cscope 15 $HOME/workspace_luma/DSA_project/linux-6.6.38/odinfs-module-6.6.38/pmfs               0000259491
	@balloc.c

22 
	~<löux/fs.h
>

23 
	~<löux/bô›s.h
>

24 
	~"pmfs.h
"

26 
	$pmfs_öô_blockm≠
(
su≥r_block
 *
sb
, 
öô_u£d_size
)

28 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

29 
num_u£d_block
;

30 
pmfs_blocknode
 *
blknode
;

32 
num_u£d_block
 = (
öô_u£d_size
 + 
sb
->
s_blocksize
 - 1) >>

33 
sb
->
s_blocksize_bôs
;

35 
blknode
 = 
	`pmfs_Æloc_blocknode
(
sb
);

36 i‡(
blknode
 =
NULL
)

37 
	`PMFS_ASSERT
(0);

38 
blknode
->
block_low
 = 
sbi
->
block_°¨t
;

39 
blknode
->
block_high
 = 
sbi
->
block_°¨t
 + 
num_u£d_block
 - 1;

40 
sbi
->
num_‰ì_blocks
 -
num_u£d_block
;

41 
	`li°_add
(&
blknode
->
lök
, &
sbi
->
block_öu£_hód
);

42 
	}
}

44 
pmfs_blocknode
 *
	$pmfs_√xt_blocknode
(
pmfs_blocknode
 *
i
,

45 
li°_hód
 *
hód
)

47 i‡(
	`li°_is_œ°
(&
i
->
lök
, 
hód
))

48  
NULL
;

49  
	`li°_fú°_íåy
(&
i
->
lök
, 
	`ty≥of
(*i),Üink);

50 
	}
}

54 
	$__pmfs_‰ì_block
(
su≥r_block
 *
sb
, 
blockƒ
,

55 
bty≥
, 
pmfs_blocknode
 **
°¨t_höt
)

57 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

58 
li°_hód
 *
hód
 = &(
sbi
->
block_öu£_hód
);

59 
√w_block_low
;

60 
√w_block_high
;

61 
num_blocks
 = 0;

62 
pmfs_blocknode
 *
i
;

63 
pmfs_blocknode
 *
‰ì_blocknode

NULL
;

64 
pmfs_blocknode
 *
cuº_node
;

66 
num_blocks
 = 
	`pmfs_gë_numblocks
(
bty≥
);

67 
√w_block_low
 = 
blockƒ
;

68 
√w_block_high
 = 
blockƒ
 + 
num_blocks
 - 1;

70 
	`BUG_ON
(
	`li°_em±y
(
hód
));

72 i‡(
°¨t_höt
 && *start_hint &&

73 
√w_block_low
 >(*
°¨t_höt
)->
block_low
)

74 
i
 = *
°¨t_höt
;

76 
i
 = 
	`li°_fú°_íåy
(
hód
, 
	`ty≥of
(*i), 
lök
);

78 
	`li°_f‹_óch_íåy_‰om
(
i
, 
hód
, 
lök
) {

80 i‡(
√w_block_low
 > 
i
->
block_high
) {

85 i‡((
√w_block_low
 =
i
->
block_low
) &&

86 (
√w_block_high
 =
i
->
block_high
)) {

88 i‡(
°¨t_höt
)

89 *
°¨t_höt
 = 
	`pmfs_√xt_blocknode
(
i
, 
hód
);

90 
	`li°_dñ
(&
i
->
lök
);

91 
‰ì_blocknode
 = 
i
;

92 
sbi
->
num_blocknode_Æloˇãd
--;

93 
sbi
->
num_‰ì_blocks
 +
num_blocks
;

94 
block_found
;

96 i‡((
√w_block_low
 =
i
->
block_low
) &&

97 (
√w_block_high
 < 
i
->
block_high
)) {

99 
i
->
block_low
 = 
√w_block_high
 + 1;

100 
sbi
->
num_‰ì_blocks
 +
num_blocks
;

101 i‡(
°¨t_höt
)

102 *
°¨t_höt
 = 
i
;

103 
block_found
;

105 i‡((
√w_block_low
 > 
i
->
block_low
) &&

106 (
√w_block_high
 =
i
->
block_high
)) {

108 
i
->
block_high
 = 
√w_block_low
 - 1;

109 
sbi
->
num_‰ì_blocks
 +
num_blocks
;

110 i‡(
°¨t_höt
)

111 *
°¨t_höt
 = 
	`pmfs_√xt_blocknode
(
i
, 
hód
);

112 
block_found
;

114 i‡((
√w_block_low
 > 
i
->
block_low
) &&

115 (
√w_block_high
 < 
i
->
block_high
)) {

117 
cuº_node
 = 
	`pmfs_Æloc_blocknode
(
sb
);

118 
	`PMFS_ASSERT
(
cuº_node
);

119 i‡(
cuº_node
 =
NULL
) {

121 
block_found
;

123 
cuº_node
->
block_low
 = 
√w_block_high
 + 1;

124 
cuº_node
->
block_high
 = 
i
->block_high;

125 
i
->
block_high
 = 
√w_block_low
 - 1;

126 
	`li°_add
(&
cuº_node
->
lök
, &
i
->link);

127 
sbi
->
num_‰ì_blocks
 +
num_blocks
;

128 i‡(
°¨t_höt
)

129 *
°¨t_höt
 = 
cuº_node
;

130 
block_found
;

134 
	`pmfs_îr‹_mng
(
sb
, "U«bÀÅÿ‰ì block %ld\n", 
blockƒ
);

136 
block_found
:

138 i‡(
‰ì_blocknode
)

139 
	`__pmfs_‰ì_blocknode
(
‰ì_blocknode
);

140 
	}
}

142 
	$pmfs_‰ì_block
(
su≥r_block
 *
sb
, 
blockƒ
,

143 
bty≥
)

145 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

146 
	`muãx_lock
(&
sbi
->
s_lock
);

147 
	`__pmfs_‰ì_block
(
sb
, 
blockƒ
, 
bty≥
, 
NULL
);

148 
	`muãx_u∆ock
(&
sbi
->
s_lock
);

149 
	}
}

151 
	$pmfs_√w_block
(
su≥r_block
 *
sb
, *
blockƒ
,

152 
bty≥
, 
zîo
)

154 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

155 
li°_hód
 *
hód
 = &(
sbi
->
block_öu£_hód
);

156 
pmfs_blocknode
 *
i
, *
√xt_i
;

157 
pmfs_blocknode
 *
‰ì_blocknode

NULL
;

158 *
bp
;

159 
num_blocks
 = 0;

160 
pmfs_blocknode
 *
cuº_node
;

161 
îrvÆ
 = 0;

162 
boﬁ
 
found
 = 0;

163 
√xt_block_low
;

164 
√w_block_low
;

165 
√w_block_high
;

167 
num_blocks
 = 
	`pmfs_gë_numblocks
(
bty≥
);

169 
	`muãx_lock
(&
sbi
->
s_lock
);

171 
	`li°_f‹_óch_íåy
(
i
, 
hód
, 
lök
) {

172 i‡(
i
->
lök
.
√xt
 =
hód
) {

173 
√xt_i
 = 
NULL
;

174 
√xt_block_low
 = 
sbi
->
block_íd
;

176 
√xt_i
 = 
	`li°_íåy
(
i
->
lök
.
√xt
, 
	`ty≥of
(*i),Üink);

177 
√xt_block_low
 = 
√xt_i
->
block_low
;

180 
√w_block_low
 = (
i
->
block_high
 + 
num_blocks
) & ~(num_blocks - 1);

181 
√w_block_high
 = 
√w_block_low
 + 
num_blocks
 - 1;

183 i‡(
√w_block_high
 >
√xt_block_low
) {

188 i‡((
√w_block_low
 =(
i
->
block_high
 + 1)) &&

189 (
√w_block_high
 =(
√xt_block_low
 - 1)))

192 i‡(
√xt_i
) {

193 
i
->
block_high
 = 
√xt_i
->block_high;

194 
	`li°_dñ
(&
√xt_i
->
lök
);

195 
‰ì_blocknode
 = 
√xt_i
;

196 
sbi
->
num_blocknode_Æloˇãd
--;

198 
i
->
block_high
 = 
√w_block_high
;

200 
found
 = 1;

204 i‡((
√w_block_low
 =(
i
->
block_high
 + 1)) &&

205 (
√w_block_high
 < (
√xt_block_low
 - 1))) {

207 
i
->
block_high
 = 
√w_block_high
;

208 
found
 = 1;

212 i‡((
√w_block_low
 > (
i
->
block_high
 + 1)) &&

213 (
√w_block_high
 =(
√xt_block_low
 - 1))) {

215 i‡(
√xt_i
) {

217 
√xt_i
->
block_low
 = 
√w_block_low
;

220 
cuº_node
 = 
	`pmfs_Æloc_blocknode
(
sb
);

221 
	`PMFS_ASSERT
(
cuº_node
);

222 i‡(
cuº_node
 =
NULL
) {

223 
îrvÆ
 = -
ENOSPC
;

226 
cuº_node
->
block_low
 = 
√w_block_low
;

227 
cuº_node
->
block_high
 = 
√w_block_high
;

228 
	`li°_add
(&
cuº_node
->
lök
, &
i
->link);

230 
found
 = 1;

234 i‡((
√w_block_low
 > (
i
->
block_high
 + 1)) &&

235 (
√w_block_high
 < (
√xt_block_low
 - 1))) {

237 
cuº_node
 = 
	`pmfs_Æloc_blocknode
(
sb
);

238 
	`PMFS_ASSERT
(
cuº_node
);

239 i‡(
cuº_node
 =
NULL
) {

240 
îrvÆ
 = -
ENOSPC
;

243 
cuº_node
->
block_low
 = 
√w_block_low
;

244 
cuº_node
->
block_high
 = 
√w_block_high
;

245 
	`li°_add
(&
cuº_node
->
lök
, &
i
->link);

246 
found
 = 1;

251 i‡(
found
 == 1) {

252 
sbi
->
num_‰ì_blocks
 -
num_blocks
;

255 
	`muãx_u∆ock
(&
sbi
->
s_lock
);

257 i‡(
‰ì_blocknode
)

258 
	`__pmfs_‰ì_blocknode
(
‰ì_blocknode
);

260 i‡(
found
 == 0) {

261  -
ENOSPC
;

264 i‡(
zîo
) {

265 
size_t
 
size
;

266 
i
 = 0, 
°rù
 = 0;

267 * 
ôî
 = 
NULL
;

268 
bp
 = 
	`pmfs_gë_block
(
sb
, 
	`pmfs_gë_block_off
(sb, 
√w_block_low
, 
bty≥
));

269 
	`pmfs_memu∆ock_block
(
sb
, 
bp
);

270 i‡(
bty≥
 =
PMFS_BLOCK_TYPE_4K
)

271 
size
 = 0x1 << 12;

272 i‡(
bty≥
 =
PMFS_BLOCK_TYPE_2M
)

273 
size
 = 0x1 << 21;

275 
size
 = 0x1 << 30;

277 
ôî
 = 
bp
;

282 
°rù
 = 0x1 << 12;

283 
i
 = 0; i < 
size
 / 
°rù
; i++) {

284 
	`mem£t_¡
(
ôî
, 0, 
°rù
);

285 
ôî
 +
°rù
;

286 i‡(
	`√ed_ªsched
()) {

287 
	`c⁄d_ªsched
();

290 
	`pmfs_memlock_block
(
sb
, 
bp
);

292 *
blockƒ
 = 
√w_block_low
;

294  
îrvÆ
;

295 
	}
}

297 
	$pmfs_cou¡_‰ì_blocks
(
su≥r_block
 *
sb
)

299 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

300  
sbi
->
num_‰ì_blocks
;

301 
	}
}

	@bbuild.c

22 
	~<löux/fs.h
>

23 
	~<löux/bô›s.h
>

24 
	~<löux/¶ab.h
>

25 
	~"pmfs.h
"

27 
	$pmfs_£tup_blocknode_m≠
(
su≥r_block
 *
sb
Ë{  0; 
	}
}

29 
	$pmfs_ßve_blocknode_m≠pögs
(
su≥r_block
 *
sb
Ë{
	}
}

34 
	~<löux/fs.h
>

35 
	~<löux/bô›s.h
>

36 
	~<löux/¶ab.h
>

37 
	~"pmfs.h
"

39 
	ssˇn_bôm≠
 {

40 
	mbôm≠_4k_size
;

41 
	mbôm≠_2M_size
;

42 
	mbôm≠_1G_size
;

43 *
	mbôm≠_4k
;

44 *
	mbôm≠_2M
;

45 *
	mbôm≠_1G
;

48 
	$pmfs_˛ór_d©ablock_öode
(
su≥r_block
 *
sb
)

50 
pmfs_öode
 *
pi
 = 
	`pmfs_gë_öode
(
sb
, 
PMFS_BLOCKNODE_IN0
);

51 
pmfs_å™ß˘i⁄_t
 *
å™s
;

54 
å™s
 = 
	`pmfs_√w_å™ß˘i⁄
(
sb
, 
MAX_INODE_LENTRIES
);

55 i‡(
	`IS_ERR
(
å™s
))

57 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
pi
, 
MAX_DATA_PER_LENTRY
, 
LE_DATA
);

59 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

60 
	`mem£t
(
pi
, 0, 
MAX_DATA_PER_LENTRY
);

61 
	`pmfs_memlock_öode
(
sb
, 
pi
);

64 
	`pmfs_commô_å™ß˘i⁄
(
sb
, 
å™s
);

65 
	}
}

67 
	$pmfs_öô_blockm≠_‰om_öode
(
su≥r_block
 *
sb
)

69 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

70 
pmfs_öode
 *
pi
 = 
	`pmfs_gë_öode
(
sb
, 
PMFS_BLOCKNODE_IN0
);

71 
pmfs_blocknode_lowhigh
 *
p
 = 
NULL
;

72 
pmfs_blocknode
 *
blknode
;

73 
ödex
;

74 
blockƒ
;

75 
i
;

76 
num_blocknode
;

77 
u64
 
bp
;

79 
num_blocknode
 = 
sbi
->
num_blocknode_Æloˇãd
;

80 
sbi
->
num_blocknode_Æloˇãd
 = 0;

81 
i
=0; i<
num_blocknode
; i++) {

82 
ödex
 = 
i
 & 0xFF;

83 i‡(
ödex
 == 0) {

85 
blockƒ
 = 
i
 >> 8;

86 
bp
 = 
	`__pmfs_föd_d©a_block
(
sb
, 
pi
, 
blockƒ
);

87 
p
 = 
	`pmfs_gë_block
(
sb
, 
bp
);

89 
	`PMFS_ASSERT
(
p
);

90 
blknode
 = 
	`pmfs_Æloc_blocknode
(
sb
);

91 i‡(
blknode
 =
NULL
)

92 
	`PMFS_ASSERT
(0);

93 
blknode
->
block_low
 = 
	`À64_to_˝u
(
p
[
ödex
].block_low);

94 
blknode
->
block_high
 = 
	`À64_to_˝u
(
p
[
ödex
].block_high);

95 
	`li°_add_èû
(&
blknode
->
lök
, &
sbi
->
block_öu£_hód
);

97 
	}
}

99 
boﬁ
 
	$pmfs_ˇn_skù_fuŒ_sˇn
(
su≥r_block
 *
sb
)

101 
pmfs_öode
 *
pi
 = 
	`pmfs_gë_öode
(
sb
, 
PMFS_BLOCKNODE_IN0
);

102 
pmfs_su≥r_block
 *
su≥r
 = 
	`pmfs_gë_su≥r
(
sb
);

103 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

104 
__À64
 
roŸ
;

105 
height
, 
bty≥
;

106 
œ°_blockƒ
;

108 i‡(!
pi
->
roŸ
)

109  
Ál£
;

111 
sbi
->
num_blocknode_Æloˇãd
 =

112 
	`À64_to_˝u
(
su≥r
->
s_num_blocknode_Æloˇãd
);

113 
sbi
->
num_‰ì_blocks
 = 
	`À64_to_˝u
(
su≥r
->
s_num_‰ì_blocks
);

114 
sbi
->
s_öodes_cou¡
 = 
	`À32_to_˝u
(
su≥r
->s_inodes_count);

115 
sbi
->
s_‰ì_öodes_cou¡
 = 
	`À32_to_˝u
(
su≥r
->s_free_inodes_count);

116 
sbi
->
s_öodes_u£d_cou¡
 = 
	`À32_to_˝u
(
su≥r
->s_inodes_used_count);

117 
sbi
->
s_‰ì_öode_höt
 = 
	`À32_to_˝u
(
su≥r
->s_free_inode_hint);

119 
	`pmfs_öô_blockm≠_‰om_öode
(
sb
);

121 
roŸ
 = 
pi
->root;

122 
height
 = 
pi
->height;

123 
bty≥
 = 
pi
->
i_blk_ty≥
;

125 
œ°_blockƒ
 = (
	`À64_to_˝u
(
pi
->
i_size
) - 1) >>

126 
	`pmfs_öode_blk_shi·
(
pi
);

129 
	`pmfs_˛ór_d©ablock_öode
(
sb
);

131 
	`pmfs_‰ì_öode_subåì
(
sb
, 
roŸ
, 
height
, 
bty≥
, 
œ°_blockƒ
);

133  
åue
;

134 
	}
}

137 
	$pmfs_Æloˇã_d©ablock_block_öode
(
pmfs_å™ß˘i⁄_t
 *
å™s
,

138 
su≥r_block
 *
sb
, 
pmfs_öode
 *
pi
, 
num_blocks
)

140 
îrvÆ
;

142 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

143 
pi
->
i_mode
 = 0;

144 
pi
->
i_löks_cou¡
 = 
	`˝u_to_À16
(1);

145 
pi
->
i_blk_ty≥
 = 
PMFS_BLOCK_TYPE_4K
;

146 
pi
->
i_Êags
 = 0;

147 
pi
->
height
 = 0;

148 
pi
->
i_dtime
 = 0;

149 
pi
->
i_size
 = 
	`˝u_to_À64
(
num_blocks
 << 
sb
->
s_blocksize_bôs
);

150 
	`pmfs_memlock_öode
(
sb
, 
pi
);

152 
îrvÆ
 = 
	`__pmfs_Æloc_blocks
(
å™s
, 
sb
, 
pi
, 0, 
num_blocks
, 
Ál£
);

154  
îrvÆ
;

155 
	}
}

157 
	$pmfs_ßve_blocknode_m≠pögs
(
su≥r_block
 *
sb
)

159 
num_blocks
, 
blockƒ
;

160 
pmfs_öode
 *
pi
 = 
	`pmfs_gë_öode
(
sb
, 
PMFS_BLOCKNODE_IN0
);

161 
pmfs_blocknode_lowhigh
 *
p
;

162 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

163 
li°_hód
 *
hód
 = &(
sbi
->
block_öu£_hód
);

164 
pmfs_blocknode
 *
i
;

165 
pmfs_su≥r_block
 *
su≥r
;

166 
pmfs_å™ß˘i⁄_t
 *
å™s
;

167 
u64
 
bp
;

168 
j
, 
k
;

169 
îrvÆ
;

171 
num_blocks
 = ((
sbi
->
num_blocknode_Æloˇãd
 * (

172 
pmfs_blocknode_lowhigh
Ë- 1Ë>> 
sb
->
s_blocksize_bôs
) + 1;

175 
å™s
 = 
	`pmfs_√w_å™ß˘i⁄
(
sb
, 
MAX_INODE_LENTRIES
 + 
MAX_SB_LENTRIES
);

176 i‡(
	`IS_ERR
(
å™s
))

179 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
pi
, 
MAX_DATA_PER_LENTRY
, 
LE_DATA
);

181 
îrvÆ
 = 
	`pmfs_Æloˇã_d©ablock_block_öode
(
å™s
, 
sb
, 
pi
, 
num_blocks
);

183 i‡(
îrvÆ
 != 0) {

184 
	`pmfs_dbg
("Eº‹ savögÅhêblocknodêm≠pögs: %d\n", 
îrvÆ
);

185 
	`pmfs_ab‹t_å™ß˘i⁄
(
sb
, 
å™s
);

189 
j
 = 0;

190 
k
 = 0;

191 
p
 = 
NULL
;

192 
	`li°_f‹_óch_íåy
(
i
, 
hód
, 
lök
) {

193 
blockƒ
 = 
k
 >> 8;

194 i‡(
j
 == 0) {

196 
bp
 = 
	`__pmfs_föd_d©a_block
(
sb
, 
pi
, 
blockƒ
);

197 
p
 = 
	`pmfs_gë_block
(
sb
, 
bp
);

198 
	`pmfs_memu∆ock_block
(
sb
, 
p
);

200 
p
[
j
].
block_low
 = 
	`˝u_to_À64
(
i
->block_low);

201 
p
[
j
].
block_high
 = 
	`˝u_to_À64
(
i
->block_high);

202 
j
++;

204 i‡(
j
 == 256) {

205 
j
 = 0;

207 
	`pmfs_memlock_block
(
sb
, 
p
);

208 
	`pmfs_Êush_buf„r
(
p
, 4096, 
Ál£
);

211 
k
++;

215 i‡(
j
) {

216 
	`pmfs_Êush_buf„r
(
p
, 
j
 << 4, 
Ál£
);

217 
	`pmfs_memlock_block
(
sb
, 
p
);

224 
su≥r
 = 
	`pmfs_gë_su≥r
(
sb
);

225 
	`pmfs_add_logíåy
(
sb
, 
å™s
, &
su≥r
->
s_wtime
,

226 
PMFS_FAST_MOUNT_FIELD_SIZE
, 
LE_DATA
);

228 
	`pmfs_memu∆ock_ønge
(
sb
, &
su≥r
->
s_wtime
, 
PMFS_FAST_MOUNT_FIELD_SIZE
);

230 
su≥r
->
s_wtime
 = 
	`˝u_to_À32
(
	`ktime_gë_£c⁄ds
());

231 
su≥r
->
s_num_blocknode_Æloˇãd
 =

232 
	`˝u_to_À64
(
sbi
->
num_blocknode_Æloˇãd
);

233 
su≥r
->
s_num_‰ì_blocks
 = 
	`˝u_to_À64
(
sbi
->
num_‰ì_blocks
);

234 
su≥r
->
s_öodes_cou¡
 = 
	`˝u_to_À32
(
sbi
->s_inodes_count);

235 
su≥r
->
s_‰ì_öodes_cou¡
 = 
	`˝u_to_À32
(
sbi
->s_free_inodes_count);

236 
su≥r
->
s_öodes_u£d_cou¡
 = 
	`˝u_to_À32
(
sbi
->s_inodes_used_count);

237 
su≥r
->
s_‰ì_öode_höt
 = 
	`˝u_to_À32
(
sbi
->s_free_inode_hint);

239 
	`pmfs_memlock_ønge
(
sb
, &
su≥r
->
s_wtime
, 
PMFS_FAST_MOUNT_FIELD_SIZE
);

241 
	`pmfs_commô_å™ß˘i⁄
(
sb
, 
å™s
);

242 
	}
}

244 
	$pmfs_öode_¸awl_ªcursive
(
su≥r_block
 *
sb
,

245 
sˇn_bôm≠
 *
bm
, 
block
,

246 
u32
 
height
, 
u8
 
bty≥
)

248 
__À64
 *
node
;

249 
i
;

251 i‡(
height
 == 0) {

253 i‡(
bty≥
 =
PMFS_BLOCK_TYPE_4K
) {

254 
	`£t_bô
(
block
 >> 
PAGE_SHIFT
, 
bm
->
bôm≠_4k
);

255 } i‡(
bty≥
 =
PMFS_BLOCK_TYPE_2M
) {

256 
	`£t_bô
(
block
 >> 
PAGE_SHIFT_2M
, 
bm
->
bôm≠_2M
);

258 
	`£t_bô
(
block
 >> 
PAGE_SHIFT_1G
, 
bm
->
bôm≠_1G
);

263 
node
 = 
	`pmfs_gë_block
(
sb
, 
block
);

264 
	`£t_bô
(
block
 >> 
PAGE_SHIFT
, 
bm
->
bôm≠_4k
);

265 
i
 = 0; i < (1 << 
META_BLK_SHIFT
); i++) {

266 i‡(
node
[
i
] == 0)

268 
	`pmfs_öode_¸awl_ªcursive
(
sb
, 
bm
,

269 
	`À64_to_˝u
(
node
[
i
]), 
height
 - 1, 
bty≥
);

271 
	}
}

273 
ölöe
 
	$pmfs_öode_¸awl
(
su≥r_block
 *
sb
,

274 
sˇn_bôm≠
 *
bm
, 
pmfs_öode
 *
pi
)

276 i‡(
pi
->
roŸ
 == 0)

278 
	`pmfs_öode_¸awl_ªcursive
(
sb
, 
bm
, 
	`À64_to_˝u
(
pi
->
roŸ
),Öi->
height
,

279 
pi
->
i_blk_ty≥
);

280 
	}
}

282 
	$pmfs_öode_èbÀ_¸awl_ªcursive
(
su≥r_block
 *
sb
,

283 
sˇn_bôm≠
 *
bm
, 
block
,

284 
u32
 
height
, u32 
bty≥
)

286 
__À64
 *
node
;

287 
i
;

288 
pmfs_öode
 *
pi
;

289 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

291 
node
 = 
	`pmfs_gë_block
(
sb
, 
block
);

293 i‡(
height
 == 0) {

294 
öodes_≥r_block
 = 
	`INODES_PER_BLOCK
(
bty≥
);

295 i‡(
	`likñy
(
bty≥
 =
PMFS_BLOCK_TYPE_2M
))

296 
	`£t_bô
(
block
 >> 
PAGE_SHIFT_2M
, 
bm
->
bôm≠_2M
);

298 
	`£t_bô
(
block
 >> 
PAGE_SHIFT
, 
bm
->
bôm≠_4k
);

300 
sbi
->
s_öodes_cou¡
 +
öodes_≥r_block
;

301 
i
 = 0; i < 
öodes_≥r_block
; i++) {

302 
pi
 = (
pmfs_öode
 *)((*)
node
 +

303 
PMFS_INODE_SIZE
 * 
i
);

304 i‡(
	`À16_to_˝u
(
pi
->
i_löks_cou¡
) == 0 &&

305 (
	`À16_to_˝u
(
pi
->
i_mode
) == 0 ||

306 
	`À32_to_˝u
(
pi
->
i_dtime
))) {

310 
sbi
->
s_öodes_u£d_cou¡
++;

311 
	`pmfs_öode_¸awl
(
sb
, 
bm
, 
pi
);

316 
	`£t_bô
(
block
 >> 
PAGE_SHIFT
, 
bm
->
bôm≠_4k
);

317 
i
 = 0; i < (1 << 
META_BLK_SHIFT
); i++) {

318 i‡(
node
[
i
] == 0)

320 
	`pmfs_öode_èbÀ_¸awl_ªcursive
(
sb
, 
bm
,

321 
	`À64_to_˝u
(
node
[
i
]), 
height
 - 1, 
bty≥
);

323 
	}
}

325 
	$pmfs_Æloc_ö£π_blocknode_m≠
(
su≥r_block
 *
sb
,

326 
low
, 
high
)

328 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

329 
li°_hód
 *
hód
 = &(
sbi
->
block_öu£_hód
);

330 
pmfs_blocknode
 *
i
, *
√xt_i
;

331 
pmfs_blocknode
 *
‰ì_blocknode

NULL
;

332 
num_blocks
 = 0;

333 
pmfs_blocknode
 *
cuº_node
;

334 
îrvÆ
 = 0;

335 
boﬁ
 
found
 = 0;

336 
√xt_block_low
;

337 
√w_block_low
;

338 
√w_block_high
;

342 
√w_block_low
 = 
low
;

343 
√w_block_high
 = 
high
;

344 
num_blocks
 = 
high
 - 
low
 + 1;

346 
	`li°_f‹_óch_íåy
(
i
, 
hód
, 
lök
) {

347 i‡(
i
->
lök
.
√xt
 =
hód
) {

348 
√xt_i
 = 
NULL
;

349 
√xt_block_low
 = 
sbi
->
block_íd
;

351 
√xt_i
 = 
	`li°_íåy
(
i
->
lök
.
√xt
, 
	`ty≥of
(*i),Üink);

352 
√xt_block_low
 = 
√xt_i
->
block_low
;

356 i‡(
√w_block_high
 >
√xt_block_low
) {

361 i‡((
√w_block_low
 =(
i
->
block_high
 + 1)) &&

362 (
√w_block_high
 =(
√xt_block_low
 - 1)))

365 i‡(
√xt_i
) {

366 
i
->
block_high
 = 
√xt_i
->block_high;

367 
	`li°_dñ
(&
√xt_i
->
lök
);

368 
‰ì_blocknode
 = 
√xt_i
;

370 
i
->
block_high
 = 
√w_block_high
;

372 
found
 = 1;

376 i‡((
√w_block_low
 =(
i
->
block_high
 + 1)) &&

377 (
√w_block_high
 < (
√xt_block_low
 - 1))) {

379 
i
->
block_high
 = 
√w_block_high
;

380 
found
 = 1;

384 i‡((
√w_block_low
 > (
i
->
block_high
 + 1)) &&

385 (
√w_block_high
 =(
√xt_block_low
 - 1))) {

387 i‡(
√xt_i
) {

389 
√xt_i
->
block_low
 = 
√w_block_low
;

392 
cuº_node
 = 
	`pmfs_Æloc_blocknode
(
sb
);

393 
	`PMFS_ASSERT
(
cuº_node
);

394 i‡(
cuº_node
 =
NULL
) {

395 
îrvÆ
 = -
ENOSPC
;

398 
cuº_node
->
block_low
 = 
√w_block_low
;

399 
cuº_node
->
block_high
 = 
√w_block_high
;

400 
	`li°_add
(&
cuº_node
->
lök
, &
i
->link);

402 
found
 = 1;

406 i‡((
√w_block_low
 > (
i
->
block_high
 + 1)) &&

407 (
√w_block_high
 < (
√xt_block_low
 - 1))) {

409 
cuº_node
 = 
	`pmfs_Æloc_blocknode
(
sb
);

410 
	`PMFS_ASSERT
(
cuº_node
);

411 i‡(
cuº_node
 =
NULL
) {

412 
îrvÆ
 = -
ENOSPC
;

415 
cuº_node
->
block_low
 = 
√w_block_low
;

416 
cuº_node
->
block_high
 = 
√w_block_high
;

417 
	`li°_add
(&
cuº_node
->
lök
, &
i
->link);

418 
found
 = 1;

423 i‡(
found
 == 1) {

424 
sbi
->
num_‰ì_blocks
 -
num_blocks
;

427 i‡(
‰ì_blocknode
)

428 
	`pmfs_‰ì_blocknode
(
sb
, 
‰ì_blocknode
);

430 i‡(
found
 == 0) {

431  -
ENOSPC
;

435  
îrvÆ
;

436 
	}
}

438 
	$__pmfs_buûd_blocknode_m≠
(
su≥r_block
 *
sb
,

439 *
bôm≠
, 
bsize
, 
sˇÀ
)

441 
√xt
 = 1;

442 
low
 = 0;

445 
√xt
 = 
	`föd_√xt_bô
(
bôm≠
, 
bsize
,Çext);

446 i‡(
√xt
 =
bsize
)

448 
low
 = 
√xt
;

449 
√xt
 = 
	`föd_√xt_zîo_bô
(
bôm≠
, 
bsize
,Çext);

450 i‡(
	`pmfs_Æloc_ö£π_blocknode_m≠
(
sb
, 
low
 << 
sˇÀ
 ,

451 (
√xt
 << 
sˇÀ
) - 1)) {

452 
	`¥ötk
("PMFS: Error couldÇot insert 0x%lx-0x%lx\n",

453 
low
 << 
sˇÀ
, ((
√xt
 << scale) - 1));

455 i‡(
√xt
 =
bsize
)

459 
	}
}

461 
	$pmfs_buûd_blocknode_m≠
(
su≥r_block
 *
sb
,

462 
sˇn_bôm≠
 *
bm
)

464 
	`__pmfs_buûd_blocknode_m≠
(
sb
, 
bm
->
bôm≠_4k
, bm->
bôm≠_4k_size
 * 8,

465 
PAGE_SHIFT
 - 12);

466 
	`__pmfs_buûd_blocknode_m≠
(
sb
, 
bm
->
bôm≠_2M
, bm->
bôm≠_2M_size
 * 8,

467 
PAGE_SHIFT_2M
 - 12);

468 
	`__pmfs_buûd_blocknode_m≠
(
sb
, 
bm
->
bôm≠_1G
, bm->
bôm≠_1G_size
 * 8,

469 
PAGE_SHIFT_1G
 - 12);

470 
	}
}

472 
	$pmfs_£tup_blocknode_m≠
(
su≥r_block
 *
sb
)

474 
pmfs_su≥r_block
 *
su≥r
 = 
	`pmfs_gë_su≥r
(
sb
);

475 
pmfs_öode
 *
pi
 = 
	`pmfs_gë_öode_èbÀ
(
sb
);

476 
pmfs_jou∫Æ_t
 *
jou∫Æ
 = 
	`pmfs_gë_jou∫Æ
(
sb
);

477 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

478 
sˇn_bôm≠
 
bm
;

479 
öôsize
 = 
	`À64_to_˝u
(
su≥r
->
s_size
);

480 
boﬁ
 
vÆue
 = 
Ál£
;

481 
timög_t
 
°¨t
;

487 
	`PMFS_START_TIMING
(
ªcovîy_t
, 
°¨t
);

489 
	`muãx_öô
(&
sbi
->
öode_èbÀ_muãx
);

490 
sbi
->
block_°¨t
 = ()0;

491 
sbi
->
block_íd
 = (()(
öôsize
Ë>> 
PAGE_SHIFT
);

493 
vÆue
 = 
	`pmfs_ˇn_skù_fuŒ_sˇn
(
sb
);

494 i‡(
vÆue
) {

495 
	`pmfs_dbg_vîbo£
("PMFS: Skipping full scan of inodes...\n");

496 
íd
;

499 
	`pmfs_dbg
("PMFS: Performing failureÑecovery\n");

500 
bm
.
bôm≠_4k_size
 = (
öôsize
 >> (
PAGE_SHIFT
 + 0x3)) + 1;

501 
bm
.
bôm≠_2M_size
 = (
öôsize
 >> (
PAGE_SHIFT_2M
 + 0x3)) + 1;

502 
bm
.
bôm≠_1G_size
 = (
öôsize
 >> (
PAGE_SHIFT_1G
 + 0x3)) + 1;

505 
bm
.
bôm≠_4k
 = 
	`kzÆloc
(bm.
bôm≠_4k_size
, 
GFP_KERNEL
);

506 
bm
.
bôm≠_2M
 = 
	`kzÆloc
(bm.
bôm≠_2M_size
, 
GFP_KERNEL
);

507 
bm
.
bôm≠_1G
 = 
	`kzÆloc
(bm.
bôm≠_1G_size
, 
GFP_KERNEL
);

509 i‡(!
bm
.
bôm≠_4k
 || !bm.
bôm≠_2M
 || !bm.
bôm≠_1G
)

510 
skù
;

513 
	`pmfs_˛ór_d©ablock_öode
(
sb
);

515 
	`pmfs_öode_èbÀ_¸awl_ªcursive
(
sb
, &
bm
, 
	`À64_to_˝u
(
pi
->
roŸ
),

516 
pi
->
height
,Öi->
i_blk_ty≥
);

519 
sbi
->
s_‰ì_öodes_cou¡
 = sbi->
s_öodes_cou¡
 -

520 (
sbi
->
s_öodes_u£d_cou¡
 + 2);

523 
sbi
->
s_‰ì_öode_höt
 = 
PMFS_FREE_INODE_HINT_START
;

526 
sbi
->
num_‰ì_blocks
 = (()(
öôsize
Ë>> 
PAGE_SHIFT
);

527 
	`pmfs_öô_blockm≠
(
sb
, 
	`À64_to_˝u
(
jou∫Æ
->
ba£
Ë+ 
sbi
->
jsize
);

529 
	`pmfs_buûd_blocknode_m≠
(
sb
, &
bm
);

531 
skù
:

533 
	`k‰ì
(
bm
.
bôm≠_4k
);

534 
	`k‰ì
(
bm
.
bôm≠_2M
);

535 
	`k‰ì
(
bm
.
bôm≠_1G
);

537 
íd
:

538 
	`PMFS_END_TIMING
(
ªcovîy_t
, 
°¨t
);

547 
	}
}

	@dir.c

16 
	~<löux/fs.h
>

17 
	~<löux/∑gem≠.h
>

18 
	~"pmfs.h
"

24 
	#DT2IF
(
dt
Ë(((dtË<< 12Ë& 
S_IFMT
)

	)

25 
	#IF2DT
(
sif
Ë(((sifË& 
S_IFMT
Ë>> 12)

	)

27 
	$pmfs_add_dúít_to_buf
(
pmfs_å™ß˘i⁄_t
 *
å™s
,

28 
díåy
 *díåy, 
öode
 *inode,

29 
pmfs_dúíåy
 *
de
, 
u8
 *
blk_ba£
, 
pmfs_öode
 *
pidú
)

31 
öode
 *
dú
 = 
díåy
->
d_∑ª¡
->
d_öode
;

32 c⁄° *
«me
 = 
díåy
->
d_«me
.name;

33 
«mñí
 = 
díåy
->
d_«me
.
Àn
;

34 
ª˛í
;

35 
∆í
, 
æí
;

36 *
t›
;

38 
ª˛í
 = 
	`PMFS_DIR_REC_LEN
(
«mñí
);

39 i‡(!
de
) {

40 
de
 = (
pmfs_dúíåy
 *)
blk_ba£
;

41 
t›
 = 
blk_ba£
 + 
dú
->
i_sb
->
s_blocksize
 - 
ª˛í
;

42 (*)
de
 <
t›
) {

44 i‡(!
	`pmfs_check_dú_íåy
("pmfs_add_dirent_to_buf",

45 
dú
, 
de
, 
blk_ba£
, 
off£t
))

46  -
EIO
;

47 i‡(
	`pmfs_m©ch
(
«mñí
, 
«me
, 
de
))

48  -
EEXIST
;

50 
æí
 = 
	`À16_to_˝u
(
de
->
de_Àn
);

51 i‡(
de
->
öo
) {

52 
∆í
 = 
	`PMFS_DIR_REC_LEN
(
de
->
«me_Àn
);

53 i‡((
æí
 - 
∆í
Ë>
ª˛í
)

55 } i‡(
æí
 >
ª˛í
)

57 
de
 = (
pmfs_dúíåy
 *)((*)dê+ 
æí
);

59 i‡((*)
de
 > 
t›
)

60  -
ENOSPC
;

62 
æí
 = 
	`À16_to_˝u
(
de
->
de_Àn
);

64 i‡(
de
->
öo
) {

65 
pmfs_dúíåy
 *
de1
;

66 
	`pmfs_add_logíåy
(
dú
->
i_sb
, 
å™s
, &
de
->
de_Àn
,

67 (
de
->
de_Àn
), 
LE_DATA
);

68 
∆í
 = 
	`PMFS_DIR_REC_LEN
(
de
->
«me_Àn
);

69 
de1
 = (
pmfs_dúíåy
 *)((*)
de
 + 
∆í
);

70 
	`pmfs_memu∆ock_block
(
dú
->
i_sb
, 
blk_ba£
);

71 
de1
->
de_Àn
 = 
	`˝u_to_À16
(
æí
 - 
∆í
);

72 
de
->
de_Àn
 = 
	`˝u_to_À16
(
∆í
);

73 
	`pmfs_memlock_block
(
dú
->
i_sb
, 
blk_ba£
);

74 
de
 = 
de1
;

76 
	`pmfs_add_logíåy
(
dú
->
i_sb
, 
å™s
, &
de
->
öo
,

77 (
de
->
öo
), 
LE_DATA
);

79 
	`pmfs_memu∆ock_block
(
dú
->
i_sb
, 
blk_ba£
);

81 i‡(
öode
) {

82 
de
->
öo
 = 
	`˝u_to_À64
(
öode
->
i_öo
);

85 
de
->
öo
 = 0;

87 
de
->
«me_Àn
 = 
«mñí
;

88 
	`mem˝y
(
de
->
«me
,Çame, 
«mñí
);

89 
	`pmfs_memlock_block
(
dú
->
i_sb
, 
blk_ba£
);

90 
	`pmfs_Êush_buf„r
(
de
, 
ª˛í
, 
Ál£
);

97 
dú
->
i_mtime
 = 
	`öode_£t_˘ime_cuºít
(
öode
);

100 
	`pmfs_memu∆ock_öode
(
dú
->
i_sb
, 
pidú
);

101 
pidú
->
i_mtime
 = 
	`˝u_to_À32
(
dú
->i_mtime.
tv_£c
);

103 
pidú
->
i_˘ime
 = 
	`˝u_to_À32
(
	`öode_gë_˘ime_£c
(
dú
));

104 
	`pmfs_memlock_öode
(
dú
->
i_sb
, 
pidú
);

106 
	}
}

111 
	$pmfs_add_íåy
(
pmfs_å™ß˘i⁄_t
 *
å™s
, 
díåy
 *dentry,

112 
öode
 *inode)

114 
öode
 *
dú
 = 
díåy
->
d_∑ª¡
->
d_öode
;

115 
su≥r_block
 *
sb
 = 
dú
->
i_sb
;

116 
ªtvÆ
 = -
EINVAL
;

117 
block
, 
blocks
;

118 
pmfs_dúíåy
 *
de
;

119 *
blk_ba£
;

120 
pmfs_öode
 *
pidú
;

122 i‡(!
díåy
->
d_«me
.
Àn
)

123  -
EINVAL
;

125 
pidú
 = 
	`pmfs_gë_öode
(
sb
, 
dú
->
i_öo
);

126 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
pidú
, 
MAX_DATA_PER_LENTRY
, 
LE_DATA
);

128 
blocks
 = 
dú
->
i_size
 >> 
sb
->
s_blocksize_bôs
;

129 
block
 = 0; block < 
blocks
; block++) {

130 
blk_ba£
 =

131 
	`pmfs_gë_block
(
sb
, 
	`pmfs_föd_d©a_block
(
dú
, 
block
));

132 i‡(!
blk_ba£
) {

133 
ªtvÆ
 = -
EIO
;

134 
out
;

136 
ªtvÆ
 = 
	`pmfs_add_dúít_to_buf
(
å™s
, 
díåy
, 
öode
,

137 
NULL
, 
blk_ba£
, 
pidú
);

138 i‡(
ªtvÆ
 !-
ENOSPC
)

139 
out
;

141 
ªtvÆ
 = 
	`pmfs_Æloc_blocks
(
å™s
, 
dú
, 
blocks
, 1, 
Ál£
);

142 i‡(
ªtvÆ
)

143 
out
;

145 
dú
->
i_size
 +dú->
i_sb
->
s_blocksize
;

146 
	`pmfs_upd©e_isize
(
dú
, 
pidú
);

148 
blk_ba£
 = 
	`pmfs_gë_block
(
sb
, 
	`pmfs_föd_d©a_block
(
dú
, 
blocks
));

149 i‡(!
blk_ba£
) {

150 
ªtvÆ
 = -
ENOSPC
;

151 
out
;

154 
de
 = (
pmfs_dúíåy
 *)
blk_ba£
;

155 
	`pmfs_memu∆ock_block
(
sb
, 
blk_ba£
);

156 
de
->
öo
 = 0;

157 
de
->
de_Àn
 = 
	`˝u_to_À16
(
sb
->
s_blocksize
);

158 
	`pmfs_memlock_block
(
sb
, 
blk_ba£
);

160 
ªtvÆ
 = 
	`pmfs_add_dúít_to_buf
(
NULL
, 
díåy
, 
öode
, 
de
, 
blk_ba£
,

161 
pidú
);

162 
out
:

163  
ªtvÆ
;

164 
	}
}

169 
	$pmfs_ªmove_íåy
(
pmfs_å™ß˘i⁄_t
 *
å™s
, 
díåy
 *
de
,

170 
öode
 *inode)

172 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

173 
öode
 *
dú
 = 
de
->
d_∑ª¡
->
d_öode
;

174 
pmfs_öode
 *
pidú
;

175 
q°r
 *
íåy
 = &
de
->
d_«me
;

176 
pmfs_dúíåy
 *
ªs_íåy
, *
¥ev_íåy
;

177 
ªtvÆ
 = -
EINVAL
;

178 
blocks
, 
block
;

179 *
blk_ba£
 = 
NULL
;

181 i‡(!
de
->
d_«me
.
Àn
)

182  -
EINVAL
;

184 
blocks
 = 
dú
->
i_size
 >> 
sb
->
s_blocksize_bôs
;

186 
block
 = 0; block < 
blocks
; block++) {

187 
blk_ba£
 =

188 
	`pmfs_gë_block
(
sb
, 
	`pmfs_föd_d©a_block
(
dú
, 
block
));

189 i‡(!
blk_ba£
)

190 
out
;

191 i‡(
	`pmfs_£¨ch_dúblock
(
blk_ba£
, 
dú
, 
íåy
,

192 
block
 << 
sb
->
s_blocksize_bôs
,

193 &
ªs_íåy
, &
¥ev_íåy
) == 1)

197 i‡(
block
 =
blocks
)

198 
out
;

199 i‡(
¥ev_íåy
) {

200 
	`pmfs_add_logíåy
(
sb
, 
å™s
, &
¥ev_íåy
->
de_Àn
,

201 (
¥ev_íåy
->
de_Àn
), 
LE_DATA
);

202 
	`pmfs_memu∆ock_block
(
sb
, 
blk_ba£
);

203 
¥ev_íåy
->
de_Àn
 =

204 
	`˝u_to_À16
(
	`À16_to_˝u
(
¥ev_íåy
->
de_Àn
) +

205 
	`À16_to_˝u
(
ªs_íåy
->
de_Àn
));

206 
	`pmfs_memlock_block
(
sb
, 
blk_ba£
);

208 
	`pmfs_add_logíåy
(
sb
, 
å™s
, &
ªs_íåy
->
öo
,

209 (
ªs_íåy
->
öo
), 
LE_DATA
);

210 
	`pmfs_memu∆ock_block
(
sb
, 
blk_ba£
);

211 
ªs_íåy
->
öo
 = 0;

212 
	`pmfs_memlock_block
(
sb
, 
blk_ba£
);

216 
dú
->
i_mtime
 = 
	`öode_£t_˘ime_cuºít
(dir);

218 
pidú
 = 
	`pmfs_gë_öode
(
sb
, 
dú
->
i_öo
);

219 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
pidú
, 
MAX_DATA_PER_LENTRY
, 
LE_DATA
);

221 
	`pmfs_memu∆ock_öode
(
sb
, 
pidú
);

222 
pidú
->
i_mtime
 = 
	`˝u_to_À32
(
dú
->i_mtime.
tv_£c
);

224 
pidú
->
i_˘ime
 = 
	`˝u_to_À32
(
	`öode_gë_˘ime_£c
(
öode
));

225 
	`pmfs_memlock_öode
(
sb
, 
pidú
);

226 
ªtvÆ
 = 0;

227 
out
:

228  
ªtvÆ
;

229 
	}
}

231 
	$pmfs_ªaddú
(
fûe
 *fûe, 
dú_c⁄ãxt
 *
˘x
)

233 
öode
 *öodê
	`fûe_öode
(
fûe
);

234 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

235 
pmfs_öode
 *
pi
;

236 *
blk_ba£
;

237 
off£t
;

238 
pmfs_dúíåy
 *
de
;

239 
öo_t
 
öo
;

240 
timög_t
 
ªaddú_time
;

242 
	`PMFS_START_TIMING
(
ªaddú_t
, 
ªaddú_time
);

244 
off£t
 = 
˘x
->
pos
 & (
sb
->
s_blocksize
 - 1);

245 
˘x
->
pos
 < 
öode
->
i_size
) {

246 
blk
 = 
˘x
->
pos
 >> 
sb
->
s_blocksize_bôs
;

248 
blk_ba£
 =

249 
	`pmfs_gë_block
(
sb
, 
	`pmfs_föd_d©a_block
(
öode
, 
blk
));

250 i‡(!
blk_ba£
) {

251 
	`pmfs_dbg
("directory %lu containsá holeát offset %lld\n",

252 
öode
->
i_öo
, 
˘x
->
pos
);

253 
˘x
->
pos
 +
sb
->
s_blocksize
 - 
off£t
;

257 i‡(
fûe
->
f_vîsi⁄
 !
öode
->
i_vîsi⁄
) {

258 
i
 = 0; i < 
sb
->
s_blocksize
 && i < 
off£t
; ) {

259 
de
 = (
pmfs_dúíåy
 *)(
blk_ba£
 + 
i
);

266 i‡(
	`À16_to_˝u
(
de
->
de_Àn
) <

267 
	`PMFS_DIR_REC_LEN
(1))

269 
i
 +
	`À16_to_˝u
(
de
->
de_Àn
);

271 
off£t
 = 
i
;

272 
˘x
->
pos
 =

273 (
˘x
->
pos
 & ~(
sb
->
s_blocksize
 - 1)Ë| 
off£t
;

274 
fûe
->
f_vîsi⁄
 = 
öode
->
i_vîsi⁄
;

277 
˘x
->
pos
 < 
öode
->
i_size


278 && 
off£t
 < 
sb
->
s_blocksize
) {

279 
de
 = (
pmfs_dúíåy
 *)(
blk_ba£
 + 
off£t
);

280 i‡(!
	`pmfs_check_dú_íåy
("pmfs_ªaddú", 
öode
, 
de
,

281 
blk_ba£
, 
off£t
)) {

283 
˘x
->
pos
 = 
	`ALIGN
(˘x->pos, 
sb
->
s_blocksize
);

286 
off£t
 +
	`À16_to_˝u
(
de
->
de_Àn
);

287 i‡(
de
->
öo
) {

288 
öo
 = 
	`À64_to_˝u
(
de
->ino);

289 
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öo
);

290 i‡(!
	`dú_emô
(
˘x
, 
de
->
«me
, de->
«me_Àn
,

291 
öo
, 
	`IF2DT
(
	`À16_to_˝u
(
pi
->
i_mode
))))

294 
˘x
->
pos
 +
	`À16_to_˝u
(
de
->
de_Àn
);

296 
off£t
 = 0;

298 
	`PMFS_END_TIMING
(
ªaddú_t
, 
ªaddú_time
);

300 
	}
}

302 c⁄° 
fûe_›î©i⁄s
 
	gpmfs_dú_›î©i⁄s
 = {

303 .
ªad
 = 
gíîic_ªad_dú
,

305 .
	gôî©e_sh¨ed
 = 
pmfs_ªaddú
,

306 .
	gfsync
 = 
no›_fsync
,

307 .
	gu∆ocked_io˘l
 = 
pmfs_io˘l
,

308 #ifde‡
CONFIG_COMPAT


309 .
	gcom∑t_io˘l
 = 
pmfs_com∑t_io˘l
,

	@file.c

16 
	~<löux/fs.h
>

17 
	~<löux/sched.h
>

18 
	~<löux/¶ab.h
>

19 
	~<löux/uio.h
>

20 
	~<löux/mm.h
>

21 
	~<löux/uac˚ss.h
>

22 
	~<löux/ÁŒoc.h
>

23 
	~<asm/mm™.h
>

24 
	~"pmfs.h
"

25 
	~"xù.h
"

27 
ölöe
 
	$pmfs_ˇn_£t_blocksize_höt
(
pmfs_öode
 *
pi
,

28 
loff_t
 
√w_size
)

32 i‡(
	`À64_to_˝u
(
pi
->
roŸ
))

35 
	}
}

37 
	$pmfs_£t_blocksize_höt
(
su≥r_block
 *
sb
, 
pmfs_öode
 *
pi
,

38 
loff_t
 
√w_size
)

40 
block_ty≥
;

42 i‡(!
	`pmfs_ˇn_£t_blocksize_höt
(
pi
, 
√w_size
))

45 i‡(
√w_size
 >= 0x40000000) {

46 
block_ty≥
 = 
PMFS_BLOCK_TYPE_1G
;

47 
höt_£t
;

50 i‡(
√w_size
 >= 0x200000) {

51 
block_ty≥
 = 
PMFS_BLOCK_TYPE_2M
;

52 
höt_£t
;

56 
block_ty≥
 = 
PMFS_BLOCK_TYPE_4K
;

58 
höt_£t
:

59 
	`pmfs_dbg_vîbo£
(

61 
√w_size
, 
pi
->
i_size
, 
	`À64_to_˝u
’i->
roŸ
));

62 
	`pmfs_dbg_vîbo£
("SëtögÅhêhöàtÿ0x%x\n", 
block_ty≥
);

63 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

64 
pi
->
i_blk_ty≥
 = 
block_ty≥
;

65 
	`pmfs_memlock_öode
(
sb
, 
pi
);

67 
	}
}

69 
	$pmfs_ÁŒoˇã
(
fûe
 *fûe, 
mode
, 
loff_t
 
off£t
,

70 
loff_t
 
Àn
)

72 
öode
 *öodê
fûe
->
f_∑th
.
díåy
->
d_öode
;

73 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

74 
ªt
 = 0;

75 
blockƒ
, 
blockoff
;

76 
num_blocks
, 
blocksize_mask
;

77 
pmfs_öode
 *
pi
;

78 
pmfs_å™ß˘i⁄_t
 *
å™s
;

79 
loff_t
 
√w_size
;

82 i‡(
mode
 & ~
FALLOC_FL_KEEP_SIZE
)

83  -
EOPNOTSUPP
;

85 i‡(
	`S_ISDIR
(
öode
->
i_mode
))

86  -
ENODEV
;

88 
	`öode_lock
(
öode
);

90 
√w_size
 = 
Àn
 + 
off£t
;

91 i‡(!(
mode
 & 
FALLOC_FL_KEEP_SIZE
Ë&& 
√w_size
 > 
öode
->
i_size
) {

92 
ªt
 = 
	`öode_√wsize_ok
(
öode
, 
√w_size
);

93 i‡(
ªt
)

94 
out
;

97 
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öode
->
i_öo
);

98 i‡(!
pi
) {

99 
ªt
 = -
EACCES
;

100 
out
;

102 
å™s
 = 
	`pmfs_√w_å™ß˘i⁄
(
sb
, 
MAX_INODE_LENTRIES
 +

103 
MAX_METABLOCK_LENTRIES
);

104 i‡(
	`IS_ERR
(
å™s
)) {

105 
ªt
 = 
	`PTR_ERR
(
å™s
);

106 
out
;

108 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
pi
, 
MAX_DATA_PER_LENTRY
, 
LE_DATA
);

111 
	`pmfs_£t_blocksize_höt
(
sb
, 
pi
, 
√w_size
);

113 
blocksize_mask
 = 
sb
->
s_blocksize
 - 1;

114 
blockƒ
 = 
off£t
 >> 
sb
->
s_blocksize_bôs
;

115 
blockoff
 = 
off£t
 & 
blocksize_mask
;

116 
num_blocks
 = (
blockoff
 + 
Àn
 + 
blocksize_mask
Ë>> 
sb
->
s_blocksize_bôs
;

117 
ªt
 = 
	`pmfs_Æloc_blocks
(
å™s
, 
öode
, 
blockƒ
, 
num_blocks
, 
åue
);

120 
öode
->
i_mtime
 = 
	`öode_£t_˘ime_cuºít
(inode);

122 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

123 i‡(
ªt
 || (
mode
 & 
FALLOC_FL_KEEP_SIZE
)) {

124 
pi
->
i_Êags
 |
	`˝u_to_À32
(
PMFS_EOFBLOCKS_FL
);

127 i‡(!(
mode
 & 
FALLOC_FL_KEEP_SIZE
Ë&& 
√w_size
 > 
öode
->
i_size
) {

128 
öode
->
i_size
 = 
√w_size
;

129 
pi
->
i_size
 = 
	`˝u_to_À64
(
öode
->i_size);

131 
pi
->
i_mtime
 = 
	`˝u_to_À32
(
öode
->i_mtime.
tv_£c
);

133 
pi
->
i_˘ime
 = 
	`˝u_to_À32
(
	`öode_gë_˘ime_£c
(
öode
));

134 
	`pmfs_memlock_öode
(
sb
, 
pi
);

136 
	`pmfs_commô_å™ß˘i⁄
(
sb
, 
å™s
);

138 
out
:

139 
	`öode_u∆ock
(
öode
);

140  
ªt
;

141 
	}
}

143 
loff_t
 
	$pmfs_Œ£ek
(
fûe
 *fûe, 
loff_t
 
off£t
, 
‹igö
)

145 
öode
 *öodê
fûe
->
f_∑th
.
díåy
->
d_öode
;

146 
ªtvÆ
;

148 i‡(
‹igö
 !
SEEK_DATA
 && origö !
SEEK_HOLE
)

149  
	`gíîic_fûe_Œ£ek
(
fûe
, 
off£t
, 
‹igö
);

151 
	`öode_lock
(
öode
);

152 
‹igö
) {

153 
SEEK_DATA
:

154 
ªtvÆ
 = 
	`pmfs_föd_ªgi⁄
(
öode
, &
off£t
, 0);

155 i‡(
ªtvÆ
) {

156 
	`öode_u∆ock
(
öode
);

157  
ªtvÆ
;

160 
SEEK_HOLE
:

161 
ªtvÆ
 = 
	`pmfs_föd_ªgi⁄
(
öode
, &
off£t
, 1);

162 i‡(
ªtvÆ
) {

163 
	`öode_u∆ock
(
öode
);

164  
ªtvÆ
;

169 i‡((
off£t
 < 0 && !(
fûe
->
f_mode
 & 
FMODE_UNSIGNED_OFFSET
)) ||

170 
off£t
 > 
öode
->
i_sb
->
s_maxbyãs
) {

171 
	`öode_u∆ock
(
öode
);

172  -
EINVAL
;

175 i‡(
off£t
 !
fûe
->
f_pos
) {

176 
fûe
->
f_pos
 = 
off£t
;

177 
fûe
->
f_vîsi⁄
 = 0;

180 
	`öode_u∆ock
(
öode
);

181  
off£t
;

182 
	}
}

188 
	$pmfs_fsync
(
fûe
 *fûe, 
loff_t
 
°¨t
,Üoff_à
íd
, 
d©async
)

191 
addªss_•a˚
 *
m≠pög
 = 
fûe
->
f_m≠pög
;

192 
öode
 *öodê
m≠pög
->
ho°
;

193 
loff_t
 
isize
;

194 
timög_t
 
fsync_time
;

196 
	`PMFS_START_TIMING
(
fsync_t
, 
fsync_time
);

198 i‡(
	`m≠pög_m≠≥d
(
m≠pög
) == 0)

199 
≥rsi°
;

201 
íd
 += 1;

203 
isize
 = 
	`i_size_ªad
(
öode
);

205 i‡(()
íd
 > ()
isize
)

206 
íd
 = 
isize
;

207 i‡(!
isize
 || (
°¨t
 >
íd
))

209 
	`pmfs_dbg_vîbo£
("[%s:%d] : (ERR) isize(%llx), start(%llx),"

210 "Énd(%Œx)\n", 
__func__
, 
__LINE__
, 
isize
, 
°¨t
, 
íd
);

211 
	`PMFS_END_TIMING
(
fsync_t
, 
fsync_time
);

212  -
ENODATA
;

216 
°¨t
 = sèπ & 
CACHELINE_MASK
;

217 
íd
 = 
	`CACHELINE_ALIGN
(end);

219 
£˘‹_t
 
block
 = 0;

220 *
xù_mem
;

221 
pgoff_t
 
pgoff
;

222 
loff_t
 
off£t
;

223 
ƒ_Êush_byãs
;

225 
pgoff
 = 
°¨t
 >> 
PAGE_SHIFT
;

226 
off£t
 = 
°¨t
 & ~
PAGE_MASK
;

228 
ƒ_Êush_byãs
 = 
PAGE_SIZE
 - 
off£t
;

229 i‡(
ƒ_Êush_byãs
 > (
íd
 - 
°¨t
))

230 
ƒ_Êush_byãs
 = 
íd
 - 
°¨t
;

232 
block
 = 
	`pmfs_föd_d©a_block
(
öode
, (
£˘‹_t
)
pgoff
);

234 i‡(
block
) {

235 
xù_mem
 = 
	`pmfs_gë_block
(
öode
->
i_sb
, 
block
);

237 
	`©omic64_öc
(&
fsync_∑ges
);

238 
	`pmfs_Êush_buf„r
(
xù_mem
 + 
off£t
, 
ƒ_Êush_byãs
, 0);

241 
	`pmfs_dbg_vîbo£
("[%s:%d] : start(%llx),Énd(%llx),"

242 "Ögoff(%lx)\n", 
__func__
, 
__LINE__
, 
°¨t
, 
íd
, 
pgoff
);

246 
°¨t
 +
ƒ_Êush_byãs
;

247 } 
°¨t
 < 
íd
);

248 
≥rsi°
:

249 
	`PERSISTENT_MARK
();

250 
	`PERSISTENT_BARRIER
();

251 
	`PMFS_END_TIMING
(
fsync_t
, 
fsync_time
);

253 
	}
}

256 
	$pmfs_Êush
(
fûe
 *fûe, 
Ê_ow√r_t
 
id
)

258 
ªt
 = 0;

261 i‡(
fûe
->
f_mode
 & 
FMODE_WRITE
) {

262 
	`PERSISTENT_MARK
();

263 
	`PERSISTENT_BARRIER
();

266  
ªt
;

267 
	}
}

271 
	$pmfs_gë_unm≠≥d_¨ó
(
fûe
 *fûe, 
addr
,

272 
Àn
, 
pgoff
,

273 
Êags
)

275 
Æign_size
;

276 
vm_¨ó_°ru˘
 *
vma
;

277 
mm_°ru˘
 *
mm
 = 
cuºít
->mm;

278 
öode
 *öodê
fûe
->
f_m≠pög
->
ho°
;

279 
pmfs_öode
 *
pi
 = 
	`pmfs_gë_öode
(
öode
->
i_sb
, inode->
i_öo
);

280 
vm_unm≠≥d_¨ó_öfo
 
öfo
;

282 i‡(
Àn
 > 
TASK_SIZE
)

283  -
ENOMEM
;

285 i‡(
pi
->
i_blk_ty≥
 =
PMFS_BLOCK_TYPE_1G
)

286 
Æign_size
 = 
PUD_SIZE
;

287 i‡(
pi
->
i_blk_ty≥
 =
PMFS_BLOCK_TYPE_2M
)

288 
Æign_size
 = 
PMD_SIZE
;

290 
Æign_size
 = 
PAGE_SIZE
;

292 i‡(
Êags
 & 
MAP_FIXED
) {

294 i‡(
Àn
 & (
Æign_size
 - 1))

295  -
EINVAL
;

296 i‡(
addr
 & (
Æign_size
 - 1))

297  -
EINVAL
;

298  
addr
;

301 i‡(
addr
) {

302 
addr
 = 
	`ALIGN
◊ddr, 
Æign_size
);

303 
vma
 = 
	`föd_vma
(
mm
, 
addr
);

304 i‡(
TASK_SIZE
 - 
Àn
 >
addr
 &&

305 (!
vma
 || 
addr
 + 
Àn
 <vma->
vm_°¨t
))

306  
addr
;

313 
öfo
.
Êags
 = 0;

314 
öfo
.
Àngth
 = 
Àn
;

315 
öfo
.
low_limô
 = 
TASK_UNMAPPED_BASE
;

316 
öfo
.
high_limô
 = 
TASK_SIZE
;

317 
öfo
.
Æign_mask
 = 
Æign_size
 - 1;

318 
öfo
.
Æign_off£t
 = 0;

319  
	`vm_unm≠≥d_¨ó
(&
öfo
);

320 
	}
}

323 c⁄° 
fûe_›î©i⁄s
 
	gpmfs_xù_fûe_›î©i⁄s
 = {

324 .
Œ£ek
 = 
pmfs_Œ£ek
,

325 .
	gªad
 = 
pmfs_xù_fûe_ªad
,

326 .
	gwrôe
 = 
pmfs_xù_fûe_wrôe
,

331 .
	gmm≠
 = 
pmfs_xù_fûe_mm≠
,

332 .
	g›í
 = 
gíîic_fûe_›í
,

333 .
	gfsync
 = 
pmfs_fsync
,

334 .
	gÊush
 = 
pmfs_Êush
,

336 .
	gu∆ocked_io˘l
 = 
pmfs_io˘l
,

337 .
	gÁŒoˇã
 = 
pmfs_ÁŒoˇã
,

338 #ifde‡
CONFIG_COMPAT


339 .
	gcom∑t_io˘l
 = 
pmfs_com∑t_io˘l
,

343 c⁄° 
öode_›î©i⁄s
 
	gpmfs_fûe_öode_›î©i⁄s
 = {

344 .
£èâr
 = 
pmfs_nŸify_ch™ge
,

345 .
	ggë©å
 = 
pmfs_gë©å
,

346 .
	ggë_a˛
 = 
NULL
,

	@inode.c

16 
	~<löux/fs.h
>

17 
	~<löux/aio.h
>

18 
	~<löux/sched.h
>

19 
	~<löux/highuid.h
>

20 
	~<löux/moduÀ.h
>

21 
	~<löux/m∑ge.h
>

22 
	~<löux/backög-dev.h
>

23 
	~<löux/ty≥s.h
>

24 
	~<löux/øãlimô.h
>

25 
	~"pmfs.h
"

26 
	~"xù.h
"

28 
	gblk_ty≥_to_shi·_pmfs
[
PMFS_BLOCK_TYPE_MAX
] = {12, 21, 30};

29 
uöt32_t
 
	gblk_ty≥_to_size_pmfs
[
PMFS_BLOCK_TYPE_MAX
] = {0x1000, 0x200000, 0x40000000};

35 
	$pmfs_√w_d©a_block
(
su≥r_block
 *
sb
, 
pmfs_öode
 *
pi
,

36 *
blockƒ
, 
zîo
)

38 
d©a_bôs
 = 
blk_ty≥_to_shi·_pmfs
[
pi
->
i_blk_ty≥
];

40 
îrvÆ
 = 
	`pmfs_√w_block
(
sb
, 
blockƒ
, 
pi
->
i_blk_ty≥
, 
zîo
);

42 i‡(!
îrvÆ
) {

43 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

44 
	`À64_add_˝u
(&
pi
->
i_blocks
,

45 (1 << (
d©a_bôs
 - 
sb
->
s_blocksize_bôs
)));

46 
	`pmfs_memlock_öode
(
sb
, 
pi
);

49  
îrvÆ
;

50 
	}
}

56 
u64
 
	$pmfs_föd_d©a_block
(
öode
 *öode, 
fûe_blockƒ
)

58 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

59 
pmfs_öode
 *
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öode
->
i_öo
);

60 
u32
 
blk_shi·
;

61 
blk_off£t
, 
blockƒ
 = 
fûe_blockƒ
;

62 
d©a_bôs
 = 
blk_ty≥_to_shi·_pmfs
[
pi
->
i_blk_ty≥
];

63 
mëa_bôs
 = 
META_BLK_SHIFT
;

64 
u64
 
bp
;

67 
blk_shi·
 = 
d©a_bôs
 - 
sb
->
s_blocksize_bôs
;

68 
blk_off£t
 = 
fûe_blockƒ
 & ((1 << 
blk_shi·
) - 1);

69 
blockƒ
 = 
fûe_blockƒ
 >> 
blk_shi·
;

71 i‡(
blockƒ
 >(1UL << (
pi
->
height
 * 
mëa_bôs
)))

74 
bp
 = 
	`__pmfs_föd_d©a_block
(
sb
, 
pi
, 
blockƒ
);

75 
	`pmfs_dbg1
("find_data_block %lx, %x %llx blk_p %p blk_shift %x"

76 " blk_off£à%lx\n", 
fûe_blockƒ
, 
pi
->
height
, 
bp
,

77 
	`pmfs_gë_block
(
sb
, 
bp
), 
blk_shi·
, 
blk_off£t
);

79 i‡(
bp
 == 0)

81  
bp
 + (
blk_off£t
 << 
sb
->
s_blocksize_bôs
);

82 
	}
}

95 
	$ªcursive_föd_ªgi⁄
(
su≥r_block
 *
sb
, 
__À64
 
block
,

96 
u32
 
height
, 
fú°_blockƒ
, 
œ°_blockƒ
,

97 *
d©a_found
, *
hﬁe_found
, 
hﬁe
)

99 
mëa_bôs
 = 
META_BLK_SHIFT
;

100 
__À64
 *
node
;

101 
fú°_blk
, 
œ°_blk
, 
node_bôs
, 
blocks
 = 0;

102 
fú°_ödex
, 
œ°_ödex
, 
i
;

104 
node_bôs
 = (
height
 - 1Ë* 
mëa_bôs
;

106 
fú°_ödex
 = 
fú°_blockƒ
 >> 
node_bôs
;

107 
œ°_ödex
 = 
œ°_blockƒ
 >> 
node_bôs
;

109 
node
 = 
	`pmfs_gë_block
(
sb
, 
	`À64_to_˝u
(
block
));

111 
i
 = 
fú°_ödex
; i <
œ°_ödex
; i++) {

112 i‡(
height
 =1 || 
node
[
i
] == 0) {

113 i‡(
node
[
i
]) {

114 *
d©a_found
 = 1;

115 i‡(!
hﬁe
)

116 
d⁄e
;

118 *
hﬁe_found
 = 1;

121 i‡(!*
hﬁe_found
 || !
hﬁe
)

122 
blocks
 +(1UL << 
node_bôs
);

124 
fú°_blk
 = (
i
 =
fú°_ödex
Ë? (
fú°_blockƒ
 &

125 ((1 << 
node_bôs
) - 1)) : 0;

127 
œ°_blk
 = (
i
 =
œ°_ödex
Ë? (
œ°_blockƒ
 &

128 ((1 << 
node_bôs
) - 1)) : (1 <<Çode_bits) - 1;

130 
blocks
 +
	`ªcursive_föd_ªgi⁄
(
sb
, 
node
[
i
], 
height
 - 1,

131 
fú°_blk
, 
œ°_blk
, 
d©a_found
, 
hﬁe_found
,

132 
hﬁe
);

133 i‡(!
hﬁe
 && *
d©a_found
)

134 
d⁄e
;

138 
d⁄e
:

139  
blocks
;

140 
	}
}

145 
	$pmfs_föd_ªgi⁄
(
öode
 *öode, 
loff_t
 *
off£t
, 
hﬁe
)

147 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

148 
pmfs_öode
 *
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öode
->
i_öo
);

149 
d©a_bôs
 = 
blk_ty≥_to_shi·_pmfs
[
pi
->
i_blk_ty≥
];

150 
fú°_blockƒ
, 
œ°_blockƒ
;

151 
blocks
 = 0, 
off£t_ö_block
;

152 
d©a_found
 = 0, 
hﬁe_found
 = 0;

154 i‡(*
off£t
 >
öode
->
i_size
)

155  -
ENXIO
;

157 i‡(!
öode
->
i_blocks
 || !
pi
->
roŸ
) {

158 i‡(
hﬁe
)

159  
öode
->
i_size
;

161  -
ENXIO
;

164 
off£t_ö_block
 = *
off£t
 & ((1UL << 
d©a_bôs
) - 1);

166 i‡(
pi
->
height
 == 0) {

167 
d©a_found
 = 1;

168 
out
;

171 
fú°_blockƒ
 = *
off£t
 >> 
d©a_bôs
;

172 
œ°_blockƒ
 = 
öode
->
i_size
 >> 
d©a_bôs
;

174 
	`pmfs_dbg_vîbo£
("find_region offset %llx, first_blocknr %lx,"

176 *
off£t
, 
fú°_blockƒ
, 
œ°_blockƒ
, 
hﬁe
);

178 
blocks
 = 
	`ªcursive_föd_ªgi⁄
(
öode
->
i_sb
, 
pi
->
roŸ
,Öi->
height
,

179 
fú°_blockƒ
, 
œ°_blockƒ
, &
d©a_found
, &
hﬁe_found
, 
hﬁe
);

181 
out
:

183 i‡(!
hﬁe
 && !
d©a_found
 && 
hﬁe_found
)

184  -
ENXIO
;

186 i‡(
d©a_found
 && !
hﬁe_found
) {

188 i‡(
hﬁe
)

190 *
off£t
 = 
öode
->
i_size
;

195 i‡(
hﬁe
 && 
hﬁe_found
 && !
blocks
) {

197 i‡(!
d©a_found
)

199 *
off£t
 = 
öode
->
i_size
;

203 i‡(
off£t_ö_block
) {

204 
blocks
--;

205 *
off£t
 +(
blocks
 << 
d©a_bôs
) +

206 ((1 << 
d©a_bôs
Ë- 
off£t_ö_block
);

208 *
off£t
 +
blocks
 << 
d©a_bôs
;

212 
	}
}

219 
ölöe
 
boﬁ
 
	$is_em±y_mëa_block
(
__À64
 *
node
, 
°¨t_idx
,

220 
íd_idx
)

222 
i
, 
œ°_idx
 = (1 << 
META_BLK_SHIFT
) - 1;

223 
i
 = 0; i < 
°¨t_idx
; i++)

224 i‡(
	`u∆ikñy
(
node
[
i
]))

225  
Ál£
;

226 
i
 = 
íd_idx
 + 1; i <
œ°_idx
; i++)

227 i‡(
	`u∆ikñy
(
node
[
i
]))

228  
Ál£
;

229  
åue
;

230 
	}
}

241 
	$ªcursive_åunˇã_blocks
(
su≥r_block
 *
sb
, 
__À64
 
block
,

242 
u32
 
height
, u32 
bty≥
, 
fú°_blockƒ
,

243 
œ°_blockƒ
, 
boﬁ
 *
mëa_em±y
)

245 
blockƒ
, 
fú°_blk
, 
œ°_blk
;

246 
node_bôs
, 
fú°_ödex
, 
œ°_ödex
, 
i
;

247 
__À64
 *
node
;

248 
‰ìd
 = 0, 
bzîo
;

249 
°¨t
, 
íd
;

250 
boﬁ
 
m±y
, 
Æl_ønge_‰ìd
 = 
åue
;

251 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

253 
node
 = 
	`pmfs_gë_block
(
sb
, 
	`À64_to_˝u
(
block
));

255 
node_bôs
 = (
height
 - 1Ë* 
META_BLK_SHIFT
;

257 
°¨t
 = 
fú°_ödex
 = 
fú°_blockƒ
 >> 
node_bôs
;

258 
íd
 = 
œ°_ödex
 = 
œ°_blockƒ
 >> 
node_bôs
;

260 i‡(
height
 == 1) {

261 
pmfs_blocknode
 *
°¨t_höt
 = 
NULL
;

262 
	`muãx_lock
(&
sbi
->
s_lock
);

263 
i
 = 
fú°_ödex
; i <
œ°_ödex
; i++) {

264 i‡(
	`u∆ikñy
(!
node
[
i
]))

267 
blockƒ
 = 
	`pmfs_gë_blockƒ
(
sb
, 
	`À64_to_˝u
(
node
[
i
]),

268 
bty≥
);

269 
	`__pmfs_‰ì_block
(
sb
, 
blockƒ
, 
bty≥
, &
°¨t_höt
);

270 
‰ìd
++;

272 
	`muãx_u∆ock
(&
sbi
->
s_lock
);

274 
i
 = 
fú°_ödex
; i <
œ°_ödex
; i++) {

275 i‡(
	`u∆ikñy
(!
node
[
i
]))

277 
fú°_blk
 = (
i
 =
fú°_ödex
Ë? (
fú°_blockƒ
 &

278 ((1 << 
node_bôs
) - 1)) : 0;

280 
œ°_blk
 = (
i
 =
œ°_ödex
Ë? (
œ°_blockƒ
 &

281 ((1 << 
node_bôs
) - 1)) : (1 <<Çode_bits) - 1;

283 
‰ìd
 +
	`ªcursive_åunˇã_blocks
(
sb
, 
node
[
i
],

284 
height
 - 1, 
bty≥
, 
fú°_blk
, 
œ°_blk
, &
m±y
);

286 i‡(
m±y
) {

288 
blockƒ
 = 
	`pmfs_gë_blockƒ
(
sb
, 
	`À64_to_˝u
(

289 
node
[
i
]), 
PMFS_BLOCK_TYPE_4K
);

290 
	`pmfs_‰ì_block
(
sb
, 
blockƒ
,
PMFS_BLOCK_TYPE_4K
);

292 i‡(
i
 =
fú°_ödex
)

293 
°¨t
++;

294 i‡(
i
 =
œ°_ödex
)

295 
íd
--;

296 
Æl_ønge_‰ìd
 = 
Ál£
;

300 i‡(
Æl_ønge_‰ìd
 &&

301 
	`is_em±y_mëa_block
(
node
, 
fú°_ödex
, 
œ°_ödex
)) {

302 *
mëa_em±y
 = 
åue
;

305 i‡(
°¨t
 <
íd
) {

306 
bzîo
 = (
íd
 - 
°¨t
 + 1Ë* (
u64
);

307 
	`pmfs_memu∆ock_block
(
sb
, 
node
);

308 
	`mem£t
(&
node
[
°¨t
], 0, 
bzîo
);

309 
	`pmfs_memlock_block
(
sb
, 
node
);

310 
	`pmfs_Êush_buf„r
(&
node
[
°¨t
], 
bzîo
, 
Ál£
);

312 *
mëa_em±y
 = 
Ál£
;

314  
‰ìd
;

315 
	}
}

317 
	$pmfs_‰ì_öode_subåì
(
su≥r_block
 *
sb
,

318 
__À64
 
roŸ
, 
u32
 
height
, u32 
bty≥
, 
œ°_blockƒ
)

320 
fú°_blockƒ
;

321 
‰ìd
;

322 
boﬁ
 
m±y
;

323 
timög_t
 
‰ì_time
;

325 i‡(!
roŸ
)

328 
	`PMFS_START_TIMING
(
‰ì_åì_t
, 
‰ì_time
);

329 i‡(
height
 == 0) {

330 
fú°_blockƒ
 = 
	`pmfs_gë_blockƒ
(
sb
, 
	`À64_to_˝u
(
roŸ
),

331 
bty≥
);

332 
	`pmfs_‰ì_block
(
sb
, 
fú°_blockƒ
, 
bty≥
);

333 
‰ìd
 = 1;

335 
fú°_blockƒ
 = 0;

337 
‰ìd
 = 
	`ªcursive_åunˇã_blocks
(
sb
, 
roŸ
, 
height
, 
bty≥
,

338 
fú°_blockƒ
, 
œ°_blockƒ
, &
m±y
);

339 
	`BUG_ON
(!
m±y
);

340 
fú°_blockƒ
 = 
	`pmfs_gë_blockƒ
(
sb
, 
	`À64_to_˝u
(
roŸ
),

341 
PMFS_BLOCK_TYPE_4K
);

342 
	`pmfs_‰ì_block
(
sb
, 
fú°_blockƒ
,
PMFS_BLOCK_TYPE_4K
);

344 
	`PMFS_END_TIMING
(
‰ì_åì_t
, 
‰ì_time
);

345  
‰ìd
;

346 
	}
}

348 
	$pmfs_de¸ó£_båì_height
(
su≥r_block
 *
sb
,

349 
pmfs_öode
 *
pi
, 
√wsize
, 
__À64
 
√wroŸ
)

351 
height
 = 
pi
->height, 
√w_height
 = 0;

352 
blockƒ
, 
œ°_blockƒ
;

353 
__À64
 *
roŸ
;

354 
b
[8];

355 
	`DEFINE_SPINLOCK
(
pmfs_båì_lock
);

357 i‡(
pi
->
i_blocks
 =0 || 
√wsize
 == 0) {

359 
	`BUG_ON
(
√wroŸ
 != 0);

360 
upd©e_roŸ_™d_height
;

363 
œ°_blockƒ
 = ((
√wsize
 + 
	`pmfs_öode_blk_size
(
pi
) - 1) >>

364 
	`pmfs_öode_blk_shi·
(
pi
)) - 1;

365 
œ°_blockƒ
 > 0) {

366 
œ°_blockƒ
 =Üa°_blockƒ >> 
META_BLK_SHIFT
;

367 
√w_height
++;

369 i‡(
height
 =
√w_height
)

371 
	`pmfs_dbg_vîbo£
("ªducögÅªêheighà%x->%x\n", 
height
, 
√w_height
);

372 
height
 > 
√w_height
) {

374 
roŸ
 = 
	`pmfs_gë_block
(
sb
, 
	`À64_to_˝u
(
√wroŸ
));

375 
blockƒ
 = 
	`pmfs_gë_blockƒ
(
sb
, 
	`À64_to_˝u
(
√wroŸ
),

376 
PMFS_BLOCK_TYPE_4K
);

377 
√wroŸ
 = 
roŸ
[0];

378 
	`pmfs_‰ì_block
(
sb
, 
blockƒ
, 
PMFS_BLOCK_TYPE_4K
);

379 
height
--;

381 
upd©e_roŸ_™d_height
:

385 *(
u64
 *)
b
 = *(u64 *)
pi
;

387 
b
[2] = (
u8
)
√w_height
;

394 
	`•ö_lock
(&
pmfs_båì_lock
);

395 i‡(
	`cmpxchg64_loˇl
((
u64
 *)
pi
, *(u64 *Ìi, *(u64 *)
b
)) {

396 
	`¥_öfo
("%s(): cmpxchg64_loˇl(Ë⁄Öòsuc˚ss\n", 
__func__
);

397 i‡(
	`cmpxchg64_loˇl
(&
pi
->
roŸ
,Öi->roŸ, 
√wroŸ
)) {

398 
	`¥_öfo
("%s(): cmpxchg64_loˇl(Ë⁄Öi->roŸ suc˚ss\n", 
__func__
);

400 
	`¥_öfo
("%s(): cmpxchg64_loˇl(Ë⁄Öi->roŸ faûed\n", 
__func__
);

403 
	`¥_öfo
("%s(): cmpxchg64_loˇl(Ë⁄ÖòÁûed\n", 
__func__
);

405 
	`•ö_u∆ock
(&
pmfs_båì_lock
);

407 
	}
}

409 
	$pmfs_öode_cou¡_iblocks_ªcursive
(
su≥r_block
 *
sb
,

410 
__À64
 
block
, 
u32
 
height
)

412 
__À64
 *
node
;

413 
i
;

414 
i_blocks
 = 0;

416 i‡(
height
 == 0)

418 
node
 = 
	`pmfs_gë_block
(
sb
, 
	`À64_to_˝u
(
block
));

419 
i
 = 0; i < (1 << 
META_BLK_SHIFT
); i++) {

420 i‡(
node
[
i
] == 0)

422 
i_blocks
 +
	`pmfs_öode_cou¡_iblocks_ªcursive
(
sb
, 
node
[
i
],

423 
height
 - 1);

425  
i_blocks
;

426 
	}
}

428 
ölöe
 
	$pmfs_öode_cou¡_iblocks
 (
su≥r_block
 *
sb
,

429 
pmfs_öode
 *
pi
, 
__À64
 
roŸ
)

431 
iblocks
;

432 i‡(
roŸ
 == 0)

434 
iblocks
 = 
	`pmfs_öode_cou¡_iblocks_ªcursive
(
sb
, 
roŸ
, 
pi
->
height
);

435  (
iblocks
 << (
	`pmfs_öode_blk_shi·
(
pi
Ë- 
sb
->
s_blocksize_bôs
));

436 
	}
}

442 
ölöe
 
	$pmfs_•¨£_œ°_blockƒ
(
height
,

443 
œ°_blockƒ
)

445 i‡(
œ°_blockƒ
 >(1UL << (
height
 * 
META_BLK_SHIFT
)))

446 
œ°_blockƒ
 = (1UL << (
height
 * 
META_BLK_SHIFT
)) - 1;

447  
œ°_blockƒ
;

448 
	}
}

453 
	$__pmfs_åunˇã_blocks
(
öode
 *öode, 
loff_t
 
°¨t
,

454 
loff_t
 
íd
)

456 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

457 
pmfs_öode
 *
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öode
->
i_öo
);

458 
fú°_blockƒ
, 
œ°_blockƒ
;

459 
__À64
 
roŸ
;

460 
‰ìd
 = 0;

461 
d©a_bôs
 = 
blk_ty≥_to_shi·_pmfs
[
pi
->
i_blk_ty≥
];

462 
mëa_bôs
 = 
META_BLK_SHIFT
;

463 
boﬁ
 
m±y
;

466 
öode
->
i_mtime
 = 
	`öode_£t_˘ime_cuºít
(inode);

468 i‡(!
pi
->
roŸ
)

469 
íd_åunˇã_blocks
;

471 
	`pmfs_dbg_vîbo£
("åunˇã:Öò%∞iblock†%Œx %Œx %Œx %x %Œx\n", 
pi
,

472 
pi
->
i_blocks
, 
°¨t
, 
íd
,Öi->
height
,Öi->
i_size
);

474 
fú°_blockƒ
 = (
°¨t
 + (1UL << 
d©a_bôs
) - 1) >> data_bits;

476 i‡(
pi
->
i_Êags
 & 
	`˝u_to_À32
(
PMFS_EOFBLOCKS_FL
)) {

477 
œ°_blockƒ
 = (1UL << (
pi
->
height
 * 
mëa_bôs
)) - 1;

479 i‡(
íd
 == 0)

480 
íd_åunˇã_blocks
;

481 
œ°_blockƒ
 = (
íd
 - 1Ë>> 
d©a_bôs
;

482 
œ°_blockƒ
 = 
	`pmfs_•¨£_œ°_blockƒ
(
pi
->
height
,

483 
œ°_blockƒ
);

486 i‡(
fú°_blockƒ
 > 
œ°_blockƒ
)

487 
íd_åunˇã_blocks
;

488 
roŸ
 = 
pi
->root;

490 i‡(
pi
->
height
 == 0) {

491 
fú°_blockƒ
 = 
	`pmfs_gë_blockƒ
(
sb
, 
	`À64_to_˝u
(
roŸ
),

492 
pi
->
i_blk_ty≥
);

493 
	`pmfs_‰ì_block
(
sb
, 
fú°_blockƒ
, 
pi
->
i_blk_ty≥
);

494 
roŸ
 = 0;

495 
‰ìd
 = 1;

497 
‰ìd
 = 
	`ªcursive_åunˇã_blocks
(
sb
, 
roŸ
, 
pi
->
height
,

498 
pi
->
i_blk_ty≥
, 
fú°_blockƒ
, 
œ°_blockƒ
, &
m±y
);

499 i‡(
m±y
) {

500 
fú°_blockƒ
 = 
	`pmfs_gë_blockƒ
(
sb
, 
	`À64_to_˝u
(
roŸ
),

501 
PMFS_BLOCK_TYPE_4K
);

502 
	`pmfs_‰ì_block
(
sb
, 
fú°_blockƒ
, 
PMFS_BLOCK_TYPE_4K
);

503 
roŸ
 = 0;

509 i‡(
	`pmfs_is_mou¡ög
(
sb
))

510 
öode
->
i_blocks
 = 
	`pmfs_öode_cou¡_iblocks
(
sb
, 
pi
, 
roŸ
);

512 
öode
->
i_blocks
 -(
‰ìd
 * (1 << (
d©a_bôs
 -

513 
sb
->
s_blocksize_bôs
)));

515 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

516 
pi
->
i_blocks
 = 
	`˝u_to_À64
(
öode
->i_blocks);

517 
pi
->
i_mtime
 = 
	`˝u_to_À32
(
öode
->i_mtime.
tv_£c
);

519 
pi
->
i_˘ime
 = 
	`˝u_to_À32
(
	`öode_gë_˘ime_£c
(
öode
));

520 
	`pmfs_de¸ó£_båì_height
(
sb
, 
pi
, 
°¨t
, 
roŸ
);

522 
	`check_eof_blocks
(
sb
, 
pi
, 
öode
->
i_size
);

523 
	`pmfs_memlock_öode
(
sb
, 
pi
);

525 
	`pmfs_Êush_buf„r
(
pi
, 1, 
Ál£
);

527 
íd_åunˇã_blocks
:

529 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

530 
pi
->
i_mtime
 = 
	`˝u_to_À32
(
öode
->i_mtime.
tv_£c
);

532 
pi
->
i_˘ime
 = 
	`˝u_to_À32
(
	`öode_gë_˘ime_£c
(
öode
));

533 
	`pmfs_memlock_öode
(
sb
, 
pi
);

534 
	`pmfs_Êush_buf„r
(
pi
, 1, 
Ál£
);

535 
	}
}

538 
	$pmfs_ö¸ó£_båì_height
(
su≥r_block
 *
sb
,

539 
pmfs_öode
 *
pi
, 
u32
 
√w_height
)

541 
u32
 
height
 = 
pi
->height;

542 
__À64
 *
roŸ
, 
¥ev_roŸ
 = 
pi
->root;

543 
blockƒ
;

544 
îrvÆ
 = 0;

546 
	`pmfs_dbg_vîbo£
("ö¸ósögÅªêheighà%x:%x\n", 
height
, 
√w_height
);

547 
height
 < 
√w_height
) {

549 
îrvÆ
 = 
	`pmfs_√w_block
(
sb
, &
blockƒ
, 
PMFS_BLOCK_TYPE_4K
, 1);

550 i‡(
îrvÆ
) {

551 
	`pmfs_îr
(
sb
, "failedÅo increase btree height\n");

554 
blockƒ
 = 
	`pmfs_gë_block_off
(
sb
, blockƒ, 
PMFS_BLOCK_TYPE_4K
);

555 
roŸ
 = 
	`pmfs_gë_block
(
sb
, 
blockƒ
);

556 
	`pmfs_memu∆ock_block
(
sb
, 
roŸ
);

557 
roŸ
[0] = 
¥ev_roŸ
;

558 
	`pmfs_memlock_block
(
sb
, 
roŸ
);

559 
	`pmfs_Êush_buf„r
(
roŸ
, (*roŸ), 
Ál£
);

560 
¥ev_roŸ
 = 
	`˝u_to_À64
(
blockƒ
);

561 
height
++;

563 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

564 
pi
->
roŸ
 = 
¥ev_roŸ
;

565 
pi
->
height
 = height;

566 
	`pmfs_memlock_öode
(
sb
, 
pi
);

567  
îrvÆ
;

568 
	}
}

579 
	$ªcursive_Æloc_blocks
(
pmfs_å™ß˘i⁄_t
 *
å™s
,

580 
su≥r_block
 *
sb
, 
pmfs_öode
 *
pi
, 
__À64
 
block
, 
u32
 
height
,

581 
fú°_blockƒ
, 
œ°_blockƒ
, 
boﬁ
 
√w_node
,

582 
boﬁ
 
zîo
)

584 
i
, 
îrvÆ
;

585 
mëa_bôs
 = 
META_BLK_SHIFT
, 
node_bôs
;

586 
__À64
 *
node
;

587 
boﬁ
 
jou∫Æ_ßved
 = 0;

588 
blockƒ
, 
fú°_blk
, 
œ°_blk
;

589 
fú°_ödex
, 
œ°_ödex
;

590 
Êush_byãs
;

592 
node
 = 
	`pmfs_gë_block
(
sb
, 
	`À64_to_˝u
(
block
));

594 
node_bôs
 = (
height
 - 1Ë* 
mëa_bôs
;

596 
fú°_ödex
 = 
fú°_blockƒ
 >> 
node_bôs
;

597 
œ°_ödex
 = 
œ°_blockƒ
 >> 
node_bôs
;

599 
i
 = 
fú°_ödex
; i <
œ°_ödex
; i++) {

600 i‡(
height
 == 1) {

601 i‡(
node
[
i
] == 0) {

602 
îrvÆ
 = 
	`pmfs_√w_d©a_block
(
sb
, 
pi
, &
blockƒ
,

603 
zîo
);

604 i‡(
îrvÆ
) {

605 
	`pmfs_dbg_vîbo£
("alloc data blk failed"

606 " %d\n", 
îrvÆ
);

608 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

609 
pi
->
i_Êags
 |
	`˝u_to_À32
(

610 
PMFS_EOFBLOCKS_FL
);

611 
	`pmfs_memlock_öode
(
sb
, 
pi
);

612  
îrvÆ
;

616 i‡(
√w_node
 =0 && 
jou∫Æ_ßved
 == 0) {

617 
À_size
 = (
œ°_ödex
 - 
i
 + 1) << 3;

618 
	`pmfs_add_logíåy
(
sb
, 
å™s
, &
node
[
i
],

619 
À_size
, 
LE_DATA
);

620 
jou∫Æ_ßved
 = 1;

622 
	`pmfs_memu∆ock_block
(
sb
, 
node
);

623 
node
[
i
] = 
	`˝u_to_À64
(
	`pmfs_gë_block_off
(
sb
,

624 
blockƒ
, 
pi
->
i_blk_ty≥
));

625 
	`pmfs_memlock_block
(
sb
, 
node
);

628 i‡(
node
[
i
] == 0) {

630 
îrvÆ
 = 
	`pmfs_√w_block
(
sb
, &
blockƒ
,

631 
PMFS_BLOCK_TYPE_4K
, 1);

632 i‡(
îrvÆ
) {

633 
	`pmfs_dbg_vîbo£
("alloc meta blk"

635 
Áû
;

639 i‡(
√w_node
 =0 && 
jou∫Æ_ßved
 == 0) {

640 
À_size
 = (
œ°_ödex
 - 
i
 + 1) << 3;

641 
	`pmfs_add_logíåy
(
sb
, 
å™s
, &
node
[
i
],

642 
À_size
, 
LE_DATA
);

643 
jou∫Æ_ßved
 = 1;

645 
	`pmfs_memu∆ock_block
(
sb
, 
node
);

646 
node
[
i
] = 
	`˝u_to_À64
(
	`pmfs_gë_block_off
(
sb
,

647 
blockƒ
, 
PMFS_BLOCK_TYPE_4K
));

648 
	`pmfs_memlock_block
(
sb
, 
node
);

649 
√w_node
 = 1;

652 
fú°_blk
 = (
i
 =
fú°_ödex
Ë? (
fú°_blockƒ
 &

653 ((1 << 
node_bôs
) - 1)) : 0;

655 
œ°_blk
 = (
i
 =
œ°_ödex
Ë? (
œ°_blockƒ
 &

656 ((1 << 
node_bôs
) - 1)) : (1 <<Çode_bits) - 1;

658 
îrvÆ
 = 
	`ªcursive_Æloc_blocks
(
å™s
, 
sb
, 
pi
, 
node
[
i
],

659 
height
 - 1, 
fú°_blk
, 
œ°_blk
, 
√w_node
, 
zîo
);

660 i‡(
îrvÆ
 < 0)

661 
Áû
;

664 i‡(
√w_node
 || 
å™s
 =
NULL
) {

667 
Êush_byãs
 = (
œ°_ödex
 - 
fú°_ödex
 + 1Ë* (
node
[0]);

668 
	`pmfs_Êush_buf„r
(&
node
[
fú°_ödex
], 
Êush_byãs
, 
Ál£
);

670 
îrvÆ
 = 0;

671 
Áû
:

672  
îrvÆ
;

673 
	}
}

675 
	$__pmfs_Æloc_blocks
(
pmfs_å™ß˘i⁄_t
 *
å™s
, 
su≥r_block
 *
sb
,

676 
pmfs_öode
 *
pi
, 
fûe_blockƒ
, 
num
,

677 
boﬁ
 
zîo
)

679 
îrvÆ
;

680 
max_blocks
;

681 
height
;

682 
d©a_bôs
 = 
blk_ty≥_to_shi·_pmfs
[
pi
->
i_blk_ty≥
];

683 
blk_shi·
, 
mëa_bôs
 = 
META_BLK_SHIFT
;

684 
blockƒ
, 
fú°_blockƒ
, 
œ°_blockƒ
, 
tŸÆ_blocks
;

685 
timög_t
 
Æloc_time
;

688 
blk_shi·
 = 
d©a_bôs
 - 
sb
->
s_blocksize_bôs
;

690 
	`PMFS_START_TIMING
(
Æloc_blocks_t
, 
Æloc_time
);

691 
fú°_blockƒ
 = 
fûe_blockƒ
 >> 
blk_shi·
;

692 
œ°_blockƒ
 = (
fûe_blockƒ
 + 
num
 - 1Ë>> 
blk_shi·
;

694 
	`pmfs_dbg_vîbo£
("alloc_blocks height %d file_blocknr %lxÇum %x, "

696 
pi
->
height
, 
fûe_blockƒ
, 
num
, 
fú°_blockƒ
, 
œ°_blockƒ
);

698 
height
 = 
pi
->height;

700 
blk_shi·
 = 
height
 * 
mëa_bôs
;

702 
max_blocks
 = 0x1UL << 
blk_shi·
;

704 i‡(
œ°_blockƒ
 > 
max_blocks
 - 1) {

706 
tŸÆ_blocks
 = 
œ°_blockƒ
 >> 
blk_shi·
;

707 
tŸÆ_blocks
 > 0) {

708 
tŸÆ_blocks
 =ÅŸÆ_block†>> 
mëa_bôs
;

709 
height
++;

711 i‡(
height
 > 3) {

712 
	`pmfs_dbg
("[%s:%d] Max file size. Cant growÅhe file\n",

713 
__func__
, 
__LINE__
);

714 
îrvÆ
 = -
ENOSPC
;

715 
Áû
;

719 i‡(!
pi
->
roŸ
) {

720 i‡(
height
 == 0) {

721 
__À64
 
roŸ
;

722 
îrvÆ
 = 
	`pmfs_√w_d©a_block
(
sb
, 
pi
, &
blockƒ
, 
zîo
);

723 i‡(
îrvÆ
) {

724 
	`pmfs_dbg_vîbo£
("[%s:%d] failed:álloc data"

725 " block\n", 
__func__
, 
__LINE__
);

726 
Áû
;

728 
roŸ
 = 
	`˝u_to_À64
(
	`pmfs_gë_block_off
(
sb
, 
blockƒ
,

729 
pi
->
i_blk_ty≥
));

730 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

731 
pi
->
roŸ
 =Ñoot;

732 
pi
->
height
 = height;

733 
	`pmfs_memlock_öode
(
sb
, 
pi
);

735 
îrvÆ
 = 
	`pmfs_ö¸ó£_båì_height
(
sb
, 
pi
, 
height
);

736 i‡(
îrvÆ
) {

737 
	`pmfs_dbg_vîbo£
("[%s:%d] failed: inc btree"

738 " height\n", 
__func__
, 
__LINE__
);

739 
Áû
;

741 
îrvÆ
 = 
	`ªcursive_Æloc_blocks
(
å™s
, 
sb
, 
pi
,Öi->
roŸ
,

742 
pi
->
height
, 
fú°_blockƒ
, 
œ°_blockƒ
, 1, 
zîo
);

743 i‡(
îrvÆ
 < 0)

744 
Áû
;

748 i‡(
height
 == 0)

751 i‡(
height
 > 
pi
->height) {

752 
îrvÆ
 = 
	`pmfs_ö¸ó£_båì_height
(
sb
, 
pi
, 
height
);

753 i‡(
îrvÆ
) {

754 
	`pmfs_dbg_vîbo£
("Err: inc height %x:%xÅot %lx"

755 "\n", 
pi
->
height
, height, 
tŸÆ_blocks
);

756 
Áû
;

759 
îrvÆ
 = 
	`ªcursive_Æloc_blocks
(
å™s
, 
sb
, 
pi
,Öi->
roŸ
, 
height
,

760 
fú°_blockƒ
, 
œ°_blockƒ
, 0, 
zîo
);

761 i‡(
îrvÆ
 < 0)

762 
Áû
;

764 
	`PMFS_END_TIMING
(
Æloc_blocks_t
, 
Æloc_time
);

766 
Áû
:

767 
	`PMFS_END_TIMING
(
Æloc_blocks_t
, 
Æloc_time
);

768  
îrvÆ
;

769 
	}
}

775 
ölöe
 
	$pmfs_Æloc_blocks
(
pmfs_å™ß˘i⁄_t
 *
å™s
, 
öode
 *inode,

776 
fûe_blockƒ
, 
num
, 
boﬁ
 
zîo
)

778 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

779 
pmfs_öode
 *
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öode
->
i_öo
);

780 
îrvÆ
;

782 
îrvÆ
 = 
	`__pmfs_Æloc_blocks
(
å™s
, 
sb
, 
pi
, 
fûe_blockƒ
, 
num
, 
zîo
);

783 
öode
->
i_blocks
 = 
	`À64_to_˝u
(
pi
->i_blocks);

785  
îrvÆ
;

786 
	}
}

790 
	$pmfs_öô_öode_èbÀ
(
su≥r_block
 *
sb
)

792 
pmfs_öode
 *
pi
 = 
	`pmfs_gë_öode_èbÀ
(
sb
);

793 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

794 
num_blocks
 = 0, 
öô_öode_èbÀ_size
;

795 
îrvÆ
;

797 i‡(
sbi
->
num_öodes
 == 0) {

799 i‡(
sbi
->
öôsize
 >
PMFS_LARGE_INODE_TABLE_THREASHOLD
)

800 
öô_öode_èbÀ_size
 = 
PMFS_LARGE_INODE_TABLE_SIZE
;

802 
öô_öode_èbÀ_size
 = 
PMFS_DEF_BLOCK_SIZE_4K
;

804 
öô_öode_èbÀ_size
 = 
sbi
->
num_öodes
 << 
PMFS_INODE_BITS
;

807 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

808 
pi
->
i_mode
 = 0;

809 
pi
->
i_uid
 = 0;

810 
pi
->
i_gid
 = 0;

811 
pi
->
i_löks_cou¡
 = 
	`˝u_to_À16
(1);

812 
pi
->
i_Êags
 = 0;

813 
pi
->
height
 = 0;

814 
pi
->
i_dtime
 = 0;

815 i‡(
öô_öode_èbÀ_size
 >
PMFS_LARGE_INODE_TABLE_SIZE
)

816 
pi
->
i_blk_ty≥
 = 
PMFS_BLOCK_TYPE_2M
;

818 
pi
->
i_blk_ty≥
 = 
PMFS_BLOCK_TYPE_4K
;

820 
num_blocks
 = (
öô_öode_èbÀ_size
 + 
	`pmfs_öode_blk_size
(
pi
) - 1) >>

821 
	`pmfs_öode_blk_shi·
(
pi
);

823 
pi
->
i_size
 = 
	`˝u_to_À64
(
num_blocks
 << 
	`pmfs_öode_blk_shi·
(pi));

825 
	`pmfs_memlock_öode
(
sb
, 
pi
);

827 
sbi
->
s_öodes_cou¡
 = 
num_blocks
 <<

828 (
	`pmfs_öode_blk_shi·
(
pi
Ë- 
PMFS_INODE_BITS
);

830 
num_blocks
 =Çum_block†<< (
	`pmfs_öode_blk_shi·
(
pi
) -

831 
sb
->
s_blocksize_bôs
);

832 
îrvÆ
 = 
	`__pmfs_Æloc_blocks
(
NULL
, 
sb
, 
pi
, 0, 
num_blocks
, 
åue
);

834 i‡(
îrvÆ
 != 0) {

835 
	`pmfs_îr
(
sb
, "Eº: inôülizögÅhêInodêTabÀ: %d\n", 
îrvÆ
);

836  
îrvÆ
;

840 
sbi
->
s_‰ì_öodes_cou¡
 =

841 (
sbi
->
s_öodes_cou¡
 - 
PMFS_FREE_INODE_HINT_START
);

842 
sbi
->
s_‰ì_öode_höt
 = (
PMFS_FREE_INODE_HINT_START
);

845 
	}
}

847 
	$pmfs_ªad_öode
(
öode
 *öode, 
pmfs_öode
 *
pi
)

849 
ªt
 = -
EIO
;

852 i‡(
	`pmfs_ˇlc_checksum
((
u8
 *)
pi
, 
PMFS_INODE_SIZE
)) {

853 
	`pmfs_îr
(
öode
->
i_sb
, "checksumÉrror in inode %lx\n",

854 (
u64
)
öode
->
i_öo
);

855 
bad_öode
;

859 
öode
->
i_mode
 = 
	`À16_to_˝u
(
pi
->i_mode);

860 
	`i_uid_wrôe
(
öode
, 
	`À32_to_˝u
(
pi
->
i_uid
));

861 
	`i_gid_wrôe
(
öode
, 
	`À32_to_˝u
(
pi
->
i_gid
));

862 
	`£t_∆ök
(
öode
, 
	`À16_to_˝u
(
pi
->
i_löks_cou¡
));

863 
öode
->
i_size
 = 
	`À64_to_˝u
(
pi
->i_size);

864 
öode
->
i_©ime
.
tv_£c
 = 
	`À32_to_˝u
(
pi
->i_atime);

866 
	`öode_£t_˘ime
(
öode
, 
	`À32_to_˝u
(
pi
->
i_˘ime
), 0);

868 
öode
->
i_mtime
.
tv_£c
 = 
	`À32_to_˝u
(
pi
->i_mtime);

871 
öode
->
i_©ime
.
tv_n£c
 = inode->
i_mtime
.tv_nsec = 0;

872 
öode
->
i_gíî©i⁄
 = 
	`À32_to_˝u
(
pi
->i_generation);

873 
	`pmfs_£t_öode_Êags
(
öode
, 
pi
);

876 i‡(
öode
->
i_∆ök
 == 0 &&

877 (
öode
->
i_mode
 =0 || 
	`À32_to_˝u
(
pi
->
i_dtime
))) {

879 
ªt
 = -
ESTALE
;

880 
bad_öode
;

883 
öode
->
i_blocks
 = 
	`À64_to_˝u
(
pi
->i_blocks);

884 
öode
->
i_m≠pög
->
a_›s
 = &
pmfs_a›s_xù
;

886 
öode
->
i_mode
 & 
S_IFMT
) {

887 
S_IFREG
:

888 
öode
->
i_›
 = &
pmfs_fûe_öode_›î©i⁄s
;

889 
öode
->
i_f›
 = &
pmfs_xù_fûe_›î©i⁄s
;

891 
S_IFDIR
:

892 
öode
->
i_›
 = &
pmfs_dú_öode_›î©i⁄s
;

893 
öode
->
i_f›
 = &
pmfs_dú_›î©i⁄s
;

895 
S_IFLNK
:

896 
öode
->
i_›
 = &
pmfs_symlök_öode_›î©i⁄s
;

899 
öode
->
i_size
 = 0;

900 
öode
->
i_›
 = &
pmfs_•ecül_öode_›î©i⁄s
;

901 
	`öô_•ecül_öode
(
öode
, inode->
i_mode
,

902 
	`À32_to_˝u
(
pi
->
dev
.
rdev
));

908 
bad_öode
:

909 
	`make_bad_öode
(
öode
);

910  
ªt
;

911 
	}
}

913 
	$pmfs_upd©e_öode
(
öode
 *öode, 
pmfs_öode
 *
pi
)

915 
	`pmfs_memu∆ock_öode
(
öode
->
i_sb
, 
pi
);

916 
pi
->
i_mode
 = 
	`˝u_to_À16
(
öode
->i_mode);

917 
pi
->
i_uid
 = 
	`˝u_to_À32
(
	`i_uid_ªad
(
öode
));

918 
pi
->
i_gid
 = 
	`˝u_to_À32
(
	`i_gid_ªad
(
öode
));

919 
pi
->
i_löks_cou¡
 = 
	`˝u_to_À16
(
öode
->
i_∆ök
);

920 
pi
->
i_size
 = 
	`˝u_to_À64
(
öode
->i_size);

921 
pi
->
i_blocks
 = 
	`˝u_to_À64
(
öode
->i_blocks);

922 
pi
->
i_©ime
 = 
	`˝u_to_À32
(
öode
->i_©ime.
tv_£c
);

924 
pi
->
i_˘ime
 = 
	`˝u_to_À32
(
	`öode_gë_˘ime_£c
(
öode
));

925 
pi
->
i_mtime
 = 
	`˝u_to_À32
(
öode
->i_mtime.
tv_£c
);

926 
pi
->
i_gíî©i⁄
 = 
	`˝u_to_À32
(
öode
->i_generation);

927 
	`pmfs_gë_öode_Êags
(
öode
, 
pi
);

929 i‡(
	`S_ISCHR
(
öode
->
i_mode
Ë|| 
	`S_ISBLK
(inode->i_mode))

930 
pi
->
dev
.
rdev
 = 
	`˝u_to_À32
(
öode
->
i_rdev
);

932 
	`pmfs_memlock_öode
(
öode
->
i_sb
, 
pi
);

933 
	}
}

943 
	$pmfs_‰ì_öode
(
öode
 *inode)

945 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

946 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

947 
pmfs_öode
 *
pi
;

948 
öode_ƒ
;

949 
pmfs_å™ß˘i⁄_t
 *
å™s
;

950 
îr
 = 0;

952 
	`muãx_lock
(&
	`PMFS_SB
(
sb
)->
öode_èbÀ_muãx
);

954 
	`pmfs_dbg_vîbo£
("free_inode: %lx free_nodes %xÅotÇodes %x hint %x\n",

955 
öode
->
i_öo
, 
sbi
->
s_‰ì_öodes_cou¡
, sbi->
s_öodes_cou¡
,

956 
sbi
->
s_‰ì_öode_höt
);

957 
öode_ƒ
 = 
öode
->
i_öo
 >> 
PMFS_INODE_BITS
;

959 
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öode
->
i_öo
);

961 
å™s
 = 
	`pmfs_√w_å™ß˘i⁄
(
sb
, 
MAX_INODE_LENTRIES
);

962 i‡(
	`IS_ERR
(
å™s
)) {

963 
îr
 = 
	`PTR_ERR
(
å™s
);

964 
out
;

967 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
pi
, 
MAX_DATA_PER_LENTRY
, 
LE_DATA
);

969 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

970 
pi
->
roŸ
 = 0;

973 
pi
->
i_size
 = 0;

974 
pi
->
i_dtime
 = 
	`˝u_to_À32
(
	`ktime_gë_£c⁄ds
());

975 
	`pmfs_memlock_öode
(
sb
, 
pi
);

977 
	`pmfs_commô_å™ß˘i⁄
(
sb
, 
å™s
);

980 i‡(
öode_ƒ
 < (
sbi
->
s_‰ì_öode_höt
))

981 
sbi
->
s_‰ì_öode_höt
 = (
öode_ƒ
);

983 
sbi
->
s_‰ì_öodes_cou¡
 += 1;

985 i‡((
sbi
->
s_‰ì_öodes_cou¡
) ==

986 (
sbi
->
s_öodes_cou¡
Ë- 
PMFS_FREE_INODE_HINT_START
) {

988 
	`pmfs_dbg_vîbo£
("fs isÉmpty!\n");

989 
sbi
->
s_‰ì_öode_höt
 = (
PMFS_FREE_INODE_HINT_START
);

992 
	`pmfs_dbg_vîbo£
("free_inode: free_nodes %xÅotal_nodes %x hint %x\n",

993 
sbi
->
s_‰ì_öodes_cou¡
, sbi->
s_öodes_cou¡
,

994 
sbi
->
s_‰ì_öode_höt
);

995 
out
:

996 
	`muãx_u∆ock
(&
	`PMFS_SB
(
sb
)->
öode_èbÀ_muãx
);

997  
îr
;

998 
	}
}

1000 
öode
 *
	$pmfs_igë
(
su≥r_block
 *
sb
, 
öo
)

1002 
öode
 *inode;

1003 
pmfs_öode
 *
pi
;

1004 
îr
;

1006 
öode
 = 
	`igë_locked
(
sb
, 
öo
);

1007 i‡(
	`u∆ikñy
(!
öode
))

1008  
	`ERR_PTR
(-
ENOMEM
);

1009 i‡(!(
öode
->
i_°©e
 & 
I_NEW
))

1010  
öode
;

1012 
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öo
);

1013 i‡(!
pi
) {

1014 
îr
 = -
EACCES
;

1015 
Áû
;

1017 
îr
 = 
	`pmfs_ªad_öode
(
öode
, 
pi
);

1018 i‡(
	`u∆ikñy
(
îr
))

1019 
Áû
;

1020 
öode
->
i_öo
 = 
öo
;

1022 
	`u∆ock_√w_öode
(
öode
);

1023  
öode
;

1024 
Áû
:

1025 
	`igë_Áûed
(
öode
);

1026  
	`ERR_PTR
(
îr
);

1027 
	}
}

1029 
	$pmfs_evi˘_öode
(
öode
 *inode)

1031 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

1032 
pmfs_öode
 *
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öode
->
i_öo
);

1033 
__À64
 
roŸ
;

1034 
œ°_blockƒ
;

1035 
height
, 
bty≥
;

1036 
îr
 = 0;

1037 
timög_t
 
evi˘_time
;

1039 
	`PMFS_START_TIMING
(
evi˘_öode_t
, 
evi˘_time
);

1040 i‡(!
öode
->
i_∆ök
 && !
	`is_bad_öode
(inode)) {

1041 i‡(!(
	`S_ISREG
(
öode
->
i_mode
Ë|| 
	`S_ISDIR
(inode->i_mode) ||

1042 
	`S_ISLNK
(
öode
->
i_mode
)))

1043 
out
;

1044 i‡(
	`IS_APPEND
(
öode
Ë|| 
	`IS_IMMUTABLE
(inode))

1045 
out
;

1047 
roŸ
 = 
pi
->root;

1048 
height
 = 
pi
->height;

1049 
bty≥
 = 
pi
->
i_blk_ty≥
;

1051 i‡(
pi
->
i_Êags
 & 
	`˝u_to_À32
(
PMFS_EOFBLOCKS_FL
)) {

1052 
œ°_blockƒ
 = (1UL << (
pi
->
height
 * 
META_BLK_SHIFT
))

1055 i‡(
	`likñy
(
öode
->
i_size
))

1056 
œ°_blockƒ
 = (
öode
->
i_size
 - 1) >>

1057 
	`pmfs_öode_blk_shi·
(
pi
);

1059 
œ°_blockƒ
 = 0;

1060 
œ°_blockƒ
 = 
	`pmfs_•¨£_œ°_blockƒ
(
pi
->
height
,

1061 
œ°_blockƒ
);

1065 
îr
 = 
	`pmfs_‰ì_öode
(
öode
);

1066 i‡(
îr
)

1067 
out
;

1068 
pi
 = 
NULL
;

1071 
	`pmfs_‰ì_öode_subåì
(
sb
, 
roŸ
, 
height
, 
bty≥
, 
œ°_blockƒ
);

1073 
öode
->
i_mtime
 = 
	`öode_£t_˘ime_cuºít
(inode);

1074 
öode
->
i_size
 = 0;

1076 
out
:

1078 
	`pmfs_åunˇã_dñ
(
öode
);

1081 
	`åunˇã_öode_∑ges
(&
öode
->
i_d©a
, 0);

1083 
	`˛ór_öode
(
öode
);

1084 
	`PMFS_END_TIMING
(
evi˘_öode_t
, 
evi˘_time
);

1085 
	}
}

1087 
	$pmfs_ö¸ó£_öode_èbÀ_size
(
su≥r_block
 *
sb
)

1089 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

1090 
pmfs_öode
 *
pi
 = 
	`pmfs_gë_öode_èbÀ
(
sb
);

1091 
pmfs_å™ß˘i⁄_t
 *
å™s
;

1092 
îrvÆ
;

1095 
å™s
 = 
	`pmfs_√w_å™ß˘i⁄
(
sb
, 
MAX_INODE_LENTRIES
);

1096 i‡(
	`IS_ERR
(
å™s
))

1097  
	`PTR_ERR
(
å™s
);

1099 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
pi
, 
MAX_DATA_PER_LENTRY
, 
LE_DATA
);

1101 
îrvÆ
 = 
	`__pmfs_Æloc_blocks
(
å™s
, 
sb
, 
pi
,

1102 
	`À64_to_˝up
(&
pi
->
i_size
Ë>> 
sb
->
s_blocksize_bôs
,

1103 1, 
åue
);

1105 i‡(
îrvÆ
 == 0) {

1106 
u64
 
i_size
 = 
	`À64_to_˝u
(
pi
->i_size);

1108 
sbi
->
s_‰ì_öode_höt
 = 
i_size
 >> 
PMFS_INODE_BITS
;

1109 
i_size
 +
	`pmfs_öode_blk_size
(
pi
);

1111 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

1112 
pi
->
i_size
 = 
	`˝u_to_À64
(i_size);

1113 
	`pmfs_memlock_öode
(
sb
, 
pi
);

1115 
sbi
->
s_‰ì_öodes_cou¡
 +
	`INODES_PER_BLOCK
(
pi
->
i_blk_ty≥
);

1116 
sbi
->
s_öodes_cou¡
 = 
i_size
 >> 
PMFS_INODE_BITS
;

1118 
	`pmfs_dbg_vîbo£
("no spaceÜeftÅo inc inodeÅable!\n");

1120 
	`pmfs_commô_å™ß˘i⁄
(
sb
, 
å™s
);

1121  
îrvÆ
;

1122 
	}
}

1124 
öode
 *
	$pmfs_√w_öode
(
pmfs_å™ß˘i⁄_t
 *
å™s
, 
öode
 *
dú
,

1125 
umode_t
 
mode
, c⁄° 
q°r
 *qstr)

1127 
su≥r_block
 *
sb
;

1128 
pmfs_sb_öfo
 *
sbi
;

1129 
öode
 *inode;

1130 
pmfs_öode
 *
pi
 = 
NULL
, *
öode_èbÀ
;

1131 
pmfs_öode
 *
dúi
 = 
NULL
;

1132 
i
, 
îrvÆ
;

1133 
u32
 
num_öodes
, 
öodes_≥r_block
;

1134 
öo_t
 
öo
 = 0;

1136 
sb
 = 
dú
->
i_sb
;

1137 
sbi
 = (
pmfs_sb_öfo
 *)
sb
->
s_fs_öfo
;

1138 
öode
 = 
	`√w_öode
(
sb
);

1139 i‡(!
öode
)

1140  
	`ERR_PTR
(-
ENOMEM
);

1143 
	`öode_öô_ow√r
(&
n›_m¡_idm≠
, 
öode
, 
dú
, 
mode
);

1144 
öode
->
i_blocks
 = inode->
i_size
 = 0;

1146 
öode
->
i_mtime
 = inode->
i_©ime
 = 
	`öode_£t_˘ime_cuºít
(inode);

1148 
öode
->
i_gíî©i⁄
 = 
	`©omic_add_ªtu∫
(1, &
sbi
->
√xt_gíî©i⁄
);

1150 
öode_èbÀ
 = 
	`pmfs_gë_öode_èbÀ
(
sb
);

1152 
	`pmfs_dbg_vîbo£
("inode: %p free_inodes %xÅotal_inodes %x hint %x\n",

1153 
öode
, 
sbi
->
s_‰ì_öodes_cou¡
, sbi->
s_öodes_cou¡
,

1154 
sbi
->
s_‰ì_öode_höt
);

1156 
dúi
 = 
	`pmfs_gë_öode
(
sb
, 
dú
->
i_öo
);

1157 i‡(!
dúi
)

1158  
	`ERR_PTR
(-
EACCES
);

1160 
	`muãx_lock
(&
sbi
->
öode_èbÀ_muãx
);

1163 
i
 = (
sbi
->
s_‰ì_öode_höt
);

1164 
öodes_≥r_block
 = 
	`INODES_PER_BLOCK
(
öode_èbÀ
->
i_blk_ty≥
);

1165 
ªåy
:

1166 
num_öodes
 = (
sbi
->
s_öodes_cou¡
);

1167 
i
 < 
num_öodes
) {

1168 
u32
 
íd_öo
;

1169 
íd_öo
 = 
i
 + (
öodes_≥r_block
 - (i & (inodes_per_block - 1)));

1170 
öo
 = 
i
 << 
PMFS_INODE_BITS
;

1171 
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öo
);

1172 ; 
i
 < 
íd_öo
; i++) {

1174 i‡(
	`À16_to_˝u
(
pi
->
i_löks_cou¡
) == 0 &&

1175 (
	`À16_to_˝u
(
pi
->
i_mode
) == 0 ||

1176 
	`À32_to_˝u
(
pi
->
i_dtime
)))

1179 
pi
 = (
pmfs_öode
 *)((*)pi +

1180 
PMFS_INODE_SIZE
);

1183 i‡(
i
 < 
íd_öo
)

1186 i‡(
	`u∆ikñy
(
i
 >
num_öodes
)) {

1187 
îrvÆ
 = 
	`pmfs_ö¸ó£_öode_èbÀ_size
(
sb
);

1188 i‡(
îrvÆ
 == 0)

1189 
ªåy
;

1190 
	`muãx_u∆ock
(&
	`PMFS_SB
(
sb
)->
öode_èbÀ_muãx
);

1191 
	`pmfs_dbg
("PMFS: couldÇot findá free inode\n");

1192 
Áû1
;

1195 
öo
 = 
i
 << 
PMFS_INODE_BITS
;

1196 
	`pmfs_dbg_vîbo£
("Æloˇtög inodê%lx\n", 
öo
);

1199 
öode
->
i_öo
 = 
öo
;

1200 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
pi
, (*pi), 
LE_DATA
);

1202 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

1203 
pi
->
i_blk_ty≥
 = 
PMFS_DEFAULT_BLOCK_TYPE
;

1204 
pi
->
i_Êags
 = 
	`pmfs_mask_Êags
(
mode
, 
dúi
->i_flags);

1205 
pi
->
height
 = 0;

1206 
pi
->
i_dtime
 = 0;

1207 
	`pmfs_memlock_öode
(
sb
, 
pi
);

1209 
sbi
->
s_‰ì_öodes_cou¡
 -= 1;

1211 i‡(
i
 < (
sbi
->
s_öodes_cou¡
) - 1)

1212 
sbi
->
s_‰ì_öode_höt
 = (
i
 + 1);

1214 
sbi
->
s_‰ì_öode_höt
 = (
PMFS_FREE_INODE_HINT_START
);

1216 
	`muãx_u∆ock
(&
sbi
->
öode_èbÀ_muãx
);

1218 
	`pmfs_upd©e_öode
(
öode
, 
pi
);

1220 
	`pmfs_£t_öode_Êags
(
öode
, 
pi
);

1222 i‡(
	`ö£π_öode_locked
(
öode
) < 0) {

1223 
	`pmfs_îr
(
sb
, "pmfs_√w_öodêÁûed inÿ%lx\n", 
öode
->
i_öo
);

1224 
îrvÆ
 = -
EINVAL
;

1225 
Áû1
;

1228  
öode
;

1229 
Áû1
:

1230 
	`make_bad_öode
(
öode
);

1231 
	`ùut
(
öode
);

1232  
	`ERR_PTR
(
îrvÆ
);

1233 
	}
}

1235 
ölöe
 
	$pmfs_upd©e_∆ök
(
öode
 *öode, 
pmfs_öode
 *
pi
)

1237 
	`pmfs_memu∆ock_öode
(
öode
->
i_sb
, 
pi
);

1238 
pi
->
i_löks_cou¡
 = 
	`˝u_to_À16
(
öode
->
i_∆ök
);

1239 
	`pmfs_memlock_öode
(
öode
->
i_sb
, 
pi
);

1240 
	}
}

1242 
ölöe
 
	$pmfs_upd©e_isize
(
öode
 *öode, 
pmfs_öode
 *
pi
)

1244 
	`pmfs_memu∆ock_öode
(
öode
->
i_sb
, 
pi
);

1245 
pi
->
i_size
 = 
	`˝u_to_À64
(
öode
->i_size);

1246 
	`pmfs_memlock_öode
(
öode
->
i_sb
, 
pi
);

1247 
	}
}

1249 
ölöe
 
	$pmfs_upd©e_time
(
öode
 *öode, 
pmfs_öode
 *
pi
)

1251 
	`pmfs_memu∆ock_öode
(
öode
->
i_sb
, 
pi
);

1253 
pi
->
i_˘ime
 = 
	`˝u_to_À32
(
	`öode_gë_˘ime_£c
(
öode
));

1254 
pi
->
i_mtime
 = 
	`˝u_to_À32
(
öode
->i_mtime.
tv_£c
);

1255 
	`pmfs_memlock_öode
(
öode
->
i_sb
, 
pi
);

1256 
	}
}

1259 
boﬁ
 
	$pmfs_is_öode_dúty
(
öode
 *öode, 
pmfs_öode
 *
pi
)

1262 i‡(
	`öode_gë_˘ime_£c
(
öode
Ë!
	`À32_to_˝u
(
pi
->
i_˘ime
) ||

1263 
öode
->
i_mtime
.
tv_£c
 !
	`À32_to_˝u
(
pi
->i_mtime) ||

1264 
öode
->
i_size
 !
	`À64_to_˝u
(
pi
->i_size) ||

1265 
öode
->
i_mode
 !
	`À16_to_˝u
(
pi
->i_mode) ||

1266 
	`i_uid_ªad
(
öode
Ë!
	`À32_to_˝u
(
pi
->
i_uid
) ||

1267 
	`i_gid_ªad
(
öode
Ë!
	`À32_to_˝u
(
pi
->
i_gid
) ||

1268 
öode
->
i_∆ök
 !
	`À16_to_˝u
(
pi
->
i_löks_cou¡
) ||

1269 
öode
->
i_blocks
 !
	`À64_to_˝u
(
pi
->i_blocks) ||

1270 
öode
->
i_©ime
.
tv_£c
 !
	`À32_to_˝u
(
pi
->i_atime))

1271  
åue
;

1272  
Ál£
;

1273 
	}
}

1275 
	$pmfs_wrôe_öode
(
öode
 *öode, 
wrôeback_c⁄åﬁ
 *
wbc
)

1281 
	}
}

1289 
	$pmfs_dúty_öode
(
öode
 *öode, 
Êags
)

1291 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

1292 
pmfs_öode
 *
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öode
->
i_öo
);

1296 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

1297 
pi
->
i_©ime
 = 
	`˝u_to_À32
(
öode
->i_©ime.
tv_£c
);

1298 
	`pmfs_memlock_öode
(
sb
, 
pi
);

1299 
	`pmfs_Êush_buf„r
(&
pi
->
i_©ime
, ’i->i_©ime), 
åue
);

1302 i‡(
	`pmfs_is_öode_dúty
(
öode
, 
pi
))

1303 
	`¥ötk_øãlimôed
(
KERN_ERR
 "pmfs: inode was dirty!\n");

1304 
	}
}

1311 
	$pmfs_block_åunˇã_∑ge
(
öode
 *öode, 
loff_t
 
√wsize
)

1313 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

1314 
off£t
 = 
√wsize
 & (
sb
->
s_blocksize
 - 1);

1315 
blockƒ
, 
Àngth
;

1316 
u64
 
blockoff
;

1317 *
bp
;

1320 i‡(!
off£t
 || 
√wsize
 > 
öode
->
i_size
)

1323 
Àngth
 = 
sb
->
s_blocksize
 - 
off£t
;

1324 
blockƒ
 = 
√wsize
 >> 
sb
->
s_blocksize_bôs
;

1326 
blockoff
 = 
	`pmfs_föd_d©a_block
(
öode
, 
blockƒ
);

1329 i‡(!
blockoff
)

1332 
bp
 = 
	`pmfs_gë_block
(
sb
, 
blockoff
);

1333 i‡(!
bp
)

1335 
	`pmfs_memu∆ock_block
(
sb
, 
bp
);

1336 
	`mem£t
(
bp
 + 
off£t
, 0, 
Àngth
);

1337 
	`pmfs_memlock_block
(
sb
, 
bp
);

1338 
	`pmfs_Êush_buf„r
(
bp
 + 
off£t
, 
Àngth
, 
Ál£
);

1339 
	}
}

1341 
	$pmfs_åunˇã_dñ
(
öode
 *inode)

1343 
li°_hód
 *
¥ev
;

1344 
pmfs_öode_öfo
 *
si
 = 
	`PMFS_I
(
öode
);

1345 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

1346 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

1347 
pmfs_öode_åunˇã_ôem
 *
hód
 = 
	`pmfs_gë_åunˇã_li°_hód
(
sb
);

1348 
pmfs_öode_åunˇã_ôem
 *
li
;

1349 
öo_√xt
;

1351 
	`muãx_lock
(&
sbi
->
s_åunˇã_lock
);

1352 i‡(
	`li°_em±y
(&
si
->
i_åunˇãd
))

1353 
out
;

1356 
	`PERSISTENT_MARK
();

1358 
li
 = 
	`pmfs_gë_åunˇã_ôem
(
sb
, 
öode
->
i_öo
);

1360 
öo_√xt
 = 
	`À64_to_˝u
(
li
->
i_√xt_åunˇã
);

1361 
¥ev
 = 
si
->
i_åunˇãd
.prev;

1363 
	`li°_dñ_öô
(&
si
->
i_åunˇãd
);

1364 
	`PERSISTENT_BARRIER
();

1367 i‡(
¥ev
 =&
sbi
->
s_åunˇã
) {

1368 
	`pmfs_memu∆ock_ønge
(
sb
, 
hód
, (*head));

1369 
hód
->
i_√xt_åunˇã
 = 
	`˝u_to_À64
(
öo_√xt
);

1370 
	`pmfs_memlock_ønge
(
sb
, 
hód
, (*head));

1371 
	`pmfs_Êush_buf„r
(&
hód
->
i_√xt_åunˇã
,

1372 (
hód
->
i_√xt_åunˇã
), 
Ál£
);

1374 
öode
 *
i_¥v
 = &
	`li°_íåy
(
¥ev
,

1375 
pmfs_öode_öfo
, 
i_åunˇãd
)->
vfs_öode
;

1376 
pmfs_öode_åunˇã_ôem
 *
li_¥v
 =

1377 
	`pmfs_gë_åunˇã_ôem
(
sb
, 
i_¥v
->
i_öo
);

1378 
	`pmfs_memu∆ock_ønge
(
sb
, 
li_¥v
, (*li_prv));

1379 
li_¥v
->
i_√xt_åunˇã
 = 
	`˝u_to_À64
(
öo_√xt
);

1380 
	`pmfs_memlock_ønge
(
sb
, 
li_¥v
, (*li_prv));

1381 
	`pmfs_Êush_buf„r
(&
li_¥v
->
i_√xt_åunˇã
,

1382 (
li_¥v
->
i_√xt_åunˇã
), 
Ál£
);

1384 
	`PERSISTENT_MARK
();

1385 
	`PERSISTENT_BARRIER
();

1386 
out
:

1387 
	`muãx_u∆ock
(&
sbi
->
s_åunˇã_lock
);

1388 
	}
}

1407 
	$pmfs_åunˇã_add
(
öode
 *öode, 
u64
 
åunˇã_size
)

1409 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

1410 
pmfs_öode_åunˇã_ôem
 *
hód
 = 
	`pmfs_gë_åunˇã_li°_hód
(
sb
);

1411 
pmfs_öode_åunˇã_ôem
 *
li
;

1413 
	`muãx_lock
(&
	`PMFS_SB
(
sb
)->
s_åunˇã_lock
);

1414 i‡(!
	`li°_em±y
(&
	`PMFS_I
(
öode
)->
i_åunˇãd
))

1415 
out_u∆ock
;

1417 
li
 = 
	`pmfs_gë_åunˇã_ôem
(
sb
, 
öode
->
i_öo
);

1419 
	`pmfs_memu∆ock_ønge
(
sb
, 
li
, (*li));

1420 
li
->
i_√xt_åunˇã
 = 
hód
->i_next_truncate;

1421 
li
->
i_åunˇãsize
 = 
	`˝u_to_À64
(
åunˇã_size
);

1422 
	`pmfs_memlock_ønge
(
sb
, 
li
, (*li));

1423 
	`pmfs_Êush_buf„r
(
li
, (*li), 
Ál£
);

1425 
	`PERSISTENT_MARK
();

1426 
	`PERSISTENT_BARRIER
();

1428 
	`pmfs_memu∆ock_ønge
(
sb
, 
hód
, (*head));

1429 
hód
->
i_√xt_åunˇã
 = 
	`˝u_to_À64
(
öode
->
i_öo
);

1430 
	`pmfs_memlock_ønge
(
sb
, 
hód
, (*head));

1431 
	`pmfs_Êush_buf„r
(&
hód
->
i_√xt_åunˇã
,

1432 (
hód
->
i_√xt_åunˇã
), 
Ál£
);

1436 i‡(
	`pmfs_cuºít_å™ß˘i⁄
(Ë=
NULL
) {

1437 
	`PERSISTENT_MARK
();

1438 
	`PERSISTENT_BARRIER
();

1440 
	`li°_add
(&
	`PMFS_I
(
öode
)->
i_åunˇãd
, &
	`PMFS_SB
(
sb
)->
s_åunˇã
);

1442 
out_u∆ock
:

1443 
	`muãx_u∆ock
(&
	`PMFS_SB
(
sb
)->
s_åunˇã_lock
);

1444 
	}
}

1446 
	$pmfs_£tsize
(
öode
 *öode, 
loff_t
 
√wsize
)

1448 
loff_t
 
ﬁdsize
 = 
öode
->
i_size
;

1450 i‡(!(
	`S_ISREG
(
öode
->
i_mode
Ë|| 
	`S_ISDIR
(inode->i_mode) ||

1451 
	`S_ISLNK
(
öode
->
i_mode
))) {

1452 
	`pmfs_îr
(
öode
->
i_sb
, "%s:wr⁄g fûêmodê%x\n", inode->
i_mode
);

1456 i‡(
√wsize
 !
ﬁdsize
) {

1457 
	`pmfs_block_åunˇã_∑ge
(
öode
, 
√wsize
);

1458 
	`i_size_wrôe
(
öode
, 
√wsize
);

1464 
	`__pmfs_åunˇã_blocks
(
öode
, 
√wsize
, 
ﬁdsize
);

1468 i‡(
	`pmfs_cuºít_å™ß˘i⁄
(Ë=
NULL
) {

1469 
	`PERSISTENT_MARK
();

1470 
	`PERSISTENT_BARRIER
();

1472 
	}
}

1476 
	$pmfs_gë©å
(
m¡_idm≠
 *
idm≠
, c⁄° 
∑th
 *path,

1477 
k°©
 *
°©
, 
u32
 
ªque°_mask
, 
quîy_Êags
)

1479 
öode
 *inode;

1481 
öode
 = 
∑th
->
díåy
->
d_öode
;

1483 
	`gíîic_fûœâr
(&
n›_m¡_idm≠
, 
ªque°_mask
, 
öode
, 
°©
);

1485 
°©
->
blocks
 = (
öode
->
i_blocks
 << inode->
i_sb
->
s_blocksize_bôs
) >> 9;

1487 
	}
}

1490 
	$pmfs_upd©e_sögÀ_fõld
(
su≥r_block
 *
sb
, 
öode
 *inode,

1491 
pmfs_öode
 *
pi
, 
ü_vÆid
)

1493 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

1494 
ü_vÆid
) {

1495 
ATTR_MODE
:

1496 
pi
->
i_mode
 = 
	`˝u_to_À16
(
öode
->i_mode);

1498 
ATTR_UID
:

1499 
pi
->
i_uid
 = 
	`˝u_to_À32
(
	`i_uid_ªad
(
öode
));

1501 
ATTR_GID
:

1502 
pi
->
i_gid
 = 
	`˝u_to_À32
(
	`i_gid_ªad
(
öode
));

1504 
ATTR_SIZE
:

1505 
pi
->
i_size
 = 
	`˝u_to_À64
(
öode
->i_size);

1507 
ATTR_ATIME
:

1508 
pi
->
i_©ime
 = 
	`˝u_to_À32
(
öode
->i_©ime.
tv_£c
);

1510 
ATTR_CTIME
:

1512 
pi
->
i_˘ime
 = 
	`˝u_to_À32
(
	`öode_gë_˘ime_£c
(
öode
));

1514 
ATTR_MTIME
:

1515 
pi
->
i_mtime
 = 
	`˝u_to_À32
(
öode
->i_mtime.
tv_£c
);

1518 
	`pmfs_memlock_öode
(
sb
, 
pi
);

1519 
	`pmfs_Êush_buf„r
(
pi
, (*pi), 
åue
);

1521 
	}
}

1525 
	$pmfs_nŸify_ch™ge
(
m¡_idm≠
 *
idm≠
, 
díåy
 *dentry,

1526 
üâr
 *
©å
)

1528 
öode
 *öodê
díåy
->
d_öode
;

1529 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

1530 
pmfs_öode
 *
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öode
->
i_öo
);

1531 
pmfs_å™ß˘i⁄_t
 *
å™s
;

1532 
ªt
;

1533 
ü_vÆid
 = 
©å
->ü_vÆid, 
©å_mask
;

1535 i‡(!
pi
)

1536  -
EACCES
;

1539 
ªt
 = 
	`£èâr_¥ï¨e
(&
n›_m¡_idm≠
, 
díåy
, 
©å
);

1540 i‡(
ªt
)

1541  
ªt
;

1543 i‡((
ü_vÆid
 & 
ATTR_SIZE
Ë&& (
©å
->
ü_size
 !
öode
->
i_size
 ||

1544 
pi
->
i_Êags
 & 
	`˝u_to_À32
(
PMFS_EOFBLOCKS_FL
))) {

1546 
	`pmfs_åunˇã_add
(
öode
, 
©å
->
ü_size
);

1548 
	`pmfs_£t_blocksize_höt
(
sb
, 
pi
, 
©å
->
ü_size
);

1551 
	`pmfs_£tsize
(
öode
, 
©å
->
ü_size
);

1552 
	`pmfs_upd©e_isize
(
öode
, 
pi
);

1553 
	`pmfs_Êush_buf„r
(
pi
, 
CACHELINE_SIZE
, 
Ál£
);

1556 
ü_vÆid
 = ia_vÆid & ~(
ATTR_CTIME
 | 
ATTR_MTIME
);

1558 
	`pmfs_åunˇã_dñ
(
öode
);

1561 
	`£èâr_c›y
(&
n›_m¡_idm≠
, 
öode
, 
©å
);

1564 
©å_mask
 = 
ATTR_MODE
 | 
ATTR_UID
 | 
ATTR_GID
 | 
ATTR_ATIME
 | 
ATTR_MTIME
 |

1565 
ATTR_CTIME
;

1567 
ü_vÆid
 = ia_vÆid & 
©å_mask
;

1569 i‡(
ü_vÆid
 == 0)

1570  
ªt
;

1573 i‡((
ü_vÆid
 & (ia_valid - 1)) == 0) {

1574 
	`pmfs_upd©e_sögÀ_fõld
(
sb
, 
öode
, 
pi
, 
ü_vÆid
);

1575  
ªt
;

1578 
	`BUG_ON
(
	`pmfs_cuºít_å™ß˘i⁄
());

1580 
å™s
 = 
	`pmfs_√w_å™ß˘i⁄
(
sb
, 
MAX_INODE_LENTRIES
);

1581 i‡(
	`IS_ERR
(
å™s
))

1582  
	`PTR_ERR
(
å™s
);

1583 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
pi
, (*pi), 
LE_DATA
);

1585 
	`pmfs_upd©e_öode
(
öode
, 
pi
);

1587 
	`pmfs_commô_å™ß˘i⁄
(
sb
, 
å™s
);

1589  
ªt
;

1590 
	}
}

1592 
	$pmfs_£t_öode_Êags
(
öode
 *öode, 
pmfs_öode
 *
pi
)

1594 
Êags
 = 
	`À32_to_˝u
(
pi
->
i_Êags
);

1596 
öode
->
i_Êags
 &=

1597 ~(
S_SYNC
 | 
S_APPEND
 | 
S_IMMUTABLE
 | 
S_NOATIME
 | 
S_DIRSYNC
);

1598 i‡(
Êags
 & 
FS_SYNC_FL
)

1599 
öode
->
i_Êags
 |
S_SYNC
;

1600 i‡(
Êags
 & 
FS_APPEND_FL
)

1601 
öode
->
i_Êags
 |
S_APPEND
;

1602 i‡(
Êags
 & 
FS_IMMUTABLE_FL
)

1603 
öode
->
i_Êags
 |
S_IMMUTABLE
;

1604 i‡(
Êags
 & 
FS_NOATIME_FL
)

1605 
öode
->
i_Êags
 |
S_NOATIME
;

1606 i‡(
Êags
 & 
FS_DIRSYNC_FL
)

1607 
öode
->
i_Êags
 |
S_DIRSYNC
;

1608 i‡(!
pi
->
i_x©å
)

1609 
	`öode_has_no_x©å
(
öode
);

1610 
öode
->
i_Êags
 |
S_DAX
;

1611 
	}
}

1613 
	$pmfs_gë_öode_Êags
(
öode
 *öode, 
pmfs_öode
 *
pi
)

1615 
Êags
 = 
öode
->
i_Êags
;

1616 
pmfs_Êags
 = 
	`À32_to_˝u
(
pi
->
i_Êags
);

1618 
pmfs_Êags
 &~(
FS_SYNC_FL
 | 
FS_APPEND_FL
 | 
FS_IMMUTABLE_FL
 |

1619 
FS_NOATIME_FL
 | 
FS_DIRSYNC_FL
);

1620 i‡(
Êags
 & 
S_SYNC
)

1621 
pmfs_Êags
 |
FS_SYNC_FL
;

1622 i‡(
Êags
 & 
S_APPEND
)

1623 
pmfs_Êags
 |
FS_APPEND_FL
;

1624 i‡(
Êags
 & 
S_IMMUTABLE
)

1625 
pmfs_Êags
 |
FS_IMMUTABLE_FL
;

1626 i‡(
Êags
 & 
S_NOATIME
)

1627 
pmfs_Êags
 |
FS_NOATIME_FL
;

1628 i‡(
Êags
 & 
S_DIRSYNC
)

1629 
pmfs_Êags
 |
FS_DIRSYNC_FL
;

1631 
pi
->
i_Êags
 = 
	`˝u_to_À32
(
pmfs_Êags
);

1632 
	}
}

1634 
ssize_t
 
	$pmfs_dúe˘_IO
(
kiocb
 *
iocb
, 
iov_ôî
 *
ôî
)

1636 
fûe
 *
fûp
 = 
iocb
->
ki_fûp
;

1637 
öode
 *öodê
fûp
->
f_m≠pög
->
ho°
;

1638 
loff_t
 
íd
 = 
iocb
->
ki_pos
;

1639 
ssize_t
 
ªt
 = -
EINVAL
;

1640 
ssize_t
 
wrôãn
 = 0;

1641 
£g
;

1642 
ƒ_£gs
 = 
ôî
->nr_segs;

1644 c⁄° 
iovec
 *
iv
 = 
	`ôî_iov
(
ôî
);

1646 
£g
 = 0; seg < 
ƒ_£gs
; seg++) {

1647 
íd
 +
iv
->
iov_Àn
;

1648 
iv
++;

1651 i‡((
	`iov_ôî_rw
(
ôî
Ë=
WRITE
Ë&& 
íd
 > 
	`i_size_ªad
(
öode
)) {

1653 
	`¥ötk
(
KERN_ERR
 "pmfs:Çìd†tÿgrow (sizê%Œd)\n", 
íd
);

1654  
ªt
;

1658 
iv
 = 
	`ôî_iov
(
ôî
);

1659 
£g
 = 0; seg < 
ƒ_£gs
; seg++) {

1660 i‡(
	`iov_ôî_rw
(
ôî
Ë=
READ
) {

1661 
ªt
 = 
	`pmfs_xù_fûe_ªad
(
fûp
, 
iv
->
iov_ba£
,

1662 
iv
->
iov_Àn
, &
iocb
->
ki_pos
);

1663 } i‡(
	`iov_ôî_rw
(
ôî
Ë=
WRITE
) {

1664 
	`öode_u∆ock
(
öode
);

1665 
ªt
 = 
	`pmfs_xù_fûe_wrôe
(
fûp
, 
iv
->
iov_ba£
,

1666 
iv
->
iov_Àn
, &
iocb
->
ki_pos
);

1667 
	`öode_lock
(
öode
);

1669 i‡(
ªt
 < 0)

1670 
îr
;

1672 i‡(
ôî
->
cou¡
 > 
iv
->
iov_Àn
)

1673 
ôî
->
cou¡
 -
iv
->
iov_Àn
;

1675 
ôî
->
cou¡
 = 0;

1677 
wrôãn
 +
ªt
;

1678 
ôî
->
ƒ_£gs
--;

1679 
iv
++;

1681 i‡(
iocb
->
ki_pos
 !
íd
)

1682 
	`¥ötk
(
KERN_ERR
 "pmfs: direct_IO:Énd = %lld"

1683 "buàoff£à%Œd\n", 
íd
, 
iocb
->
ki_pos
);

1684 
ªt
 = 
wrôãn
;

1685 
îr
:

1686  
ªt
;

1687 
	}
}

1689 c⁄° 
addªss_•a˚_›î©i⁄s
 
	gpmfs_a›s_xù
 = {

1690 .
dúe˘_IO
 = 
pmfs_dúe˘_IO
,

	@ioctl.c

14 
	~<löux/ˇ∑bûôy.h
>

15 
	~<löux/time.h
>

16 
	~<löux/sched.h
>

17 
	~<löux/com∑t.h
>

18 
	~<löux/mou¡.h
>

19 
	~"pmfs.h
"

21 
	#FS_PMFS_FSYNC
 0xBCD0000E

	)

23 
	ssync_ønge


25 
off_t
 
	moff£t
;

26 
size_t
 
	mÀngth
;

29 
	$pmfs_io˘l
(
fûe
 *
fûp
, 
cmd
, 
¨g
)

31 
addªss_•a˚
 *
m≠pög
 = 
fûp
->
f_m≠pög
;

32 
öode
 *öodê
m≠pög
->
ho°
;

33 
pmfs_öode
 *
pi
;

34 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

35 
Êags
;

36 
ªt
;

37 
pmfs_å™ß˘i⁄_t
 *
å™s
;

39 
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öode
->
i_öo
);

40 i‡(!
pi
)

41  -
EACCES
;

43 
cmd
) {

44 
FS_IOC_GETFLAGS
:

45 
Êags
 = 
	`À32_to_˝u
(
pi
->
i_Êags
Ë& 
PMFS_FL_USER_VISIBLE
;

46  
	`put_u£r
(
Êags
, (
__u£r
 *)
¨g
);

47 
FS_IOC_SETFLAGS
: {

48 
ﬁdÊags
;

50 
ªt
 = 
	`m¡_w™t_wrôe_fûe
(
fûp
);

51 i‡(
ªt
)

52  
ªt
;

55 i‡(!
	`öode_ow√r_‹_ˇ∑bÀ
(&
n›_m¡_idm≠
, 
öode
)) {

56 
ªt
 = -
EPERM
;

57 
Êags_out
;

60 i‡(
	`gë_u£r
(
Êags
, (
__u£r
 *)
¨g
)) {

61 
ªt
 = -
EFAULT
;

62 
Êags_out
;

65 
	`öode_lock
(
öode
);

66 
ﬁdÊags
 = 
	`À32_to_˝u
(
pi
->
i_Êags
);

68 i‡((
Êags
 ^ 
ﬁdÊags
) &

69 (
FS_APPEND_FL
 | 
FS_IMMUTABLE_FL
)) {

70 i‡(!
	`ˇ∑bÀ
(
CAP_LINUX_IMMUTABLE
)) {

71 
	`öode_u∆ock
(
öode
);

72 
ªt
 = -
EPERM
;

73 
Êags_out
;

77 i‡(!
	`S_ISDIR
(
öode
->
i_mode
))

78 
Êags
 &~
FS_DIRSYNC_FL
;

80 
Êags
 = fœg†& 
FS_FL_USER_MODIFIABLE
;

81 
Êags
 |
ﬁdÊags
 & ~
FS_FL_USER_MODIFIABLE
;

83 
	`öode_£t_˘ime_cuºít
(
öode
);

84 
å™s
 = 
	`pmfs_√w_å™ß˘i⁄
(
sb
, 
MAX_INODE_LENTRIES
);

85 i‡(
	`IS_ERR
(
å™s
)) {

86 
ªt
 = 
	`PTR_ERR
(
å™s
);

87 
out
;

89 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
pi
, 
MAX_DATA_PER_LENTRY
, 
LE_DATA
);

90 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

91 
pi
->
i_Êags
 = 
	`˝u_to_À32
(
Êags
);

93 
pi
->
i_˘ime
 = 
	`˝u_to_À32
(
	`öode_gë_˘ime_£c
(
öode
));

94 
	`pmfs_£t_öode_Êags
(
öode
, 
pi
);

95 
	`pmfs_memlock_öode
(
sb
, 
pi
);

96 
	`pmfs_commô_å™ß˘i⁄
(
sb
, 
å™s
);

97 
out
:

98 
	`öode_u∆ock
(
öode
);

99 
Êags_out
:

100 
	`m¡_dr›_wrôe_fûe
(
fûp
);

101  
ªt
;

103 
FS_IOC_GETVERSION
:

104  
	`put_u£r
(
öode
->
i_gíî©i⁄
, (
__u£r
 *)
¨g
);

105 
FS_IOC_SETVERSION
: {

106 
__u32
 
gíî©i⁄
;

108 i‡(!
	`öode_ow√r_‹_ˇ∑bÀ
(&
n›_m¡_idm≠
, 
öode
))

109  -
EPERM
;

110 
ªt
 = 
	`m¡_w™t_wrôe_fûe
(
fûp
);

111 i‡(
ªt
)

112  
ªt
;

113 i‡(
	`gë_u£r
(
gíî©i⁄
, (
__u£r
 *)
¨g
)) {

114 
ªt
 = -
EFAULT
;

115 
£tvîsi⁄_out
;

117 
	`öode_lock
(
öode
);

118 
å™s
 = 
	`pmfs_√w_å™ß˘i⁄
(
sb
, 
MAX_INODE_LENTRIES
);

119 i‡(
	`IS_ERR
(
å™s
)) {

120 
ªt
 = 
	`PTR_ERR
(
å™s
);

121 
out
;

123 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
pi
, (*pi), 
LE_DATA
);

125 
	`öode_£t_˘ime_cuºít
(
öode
);

126 
öode
->
i_gíî©i⁄
 = 
gíî©i⁄
;

127 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

129 
pi
->
i_˘ime
 = 
	`˝u_to_À32
(
	`öode_gë_˘ime_£c
(
öode
));

130 
pi
->
i_gíî©i⁄
 = 
	`˝u_to_À32
(
öode
->i_generation);

131 
	`pmfs_memlock_öode
(
sb
, 
pi
);

132 
	`pmfs_commô_å™ß˘i⁄
(
sb
, 
å™s
);

133 
	`öode_u∆ock
(
öode
);

134 
£tvîsi⁄_out
:

135 
	`m¡_dr›_wrôe_fûe
(
fûp
);

136  
ªt
;

138 
FS_PMFS_FSYNC
: {

139 
sync_ønge
 
∑ckë
;

140 
ªt
 = 
	`c›y_‰om_u£r
(&
∑ckë
, (*)
¨g
, (
sync_ønge
));

141 
	`pmfs_fsync
(
fûp
, 
∑ckë
.
off£t
,Öackë.off£à+Öackë.
Àngth
, 1);

144 
PMFS_PRINT_TIMING
: {

145 
	`pmfs_¥öt_timög_°©s
();

148 
PMFS_CLEAR_STATS
: {

149 
	`pmfs_˛ór_°©s
();

153  -
ENOTTY
;

155 
	}
}

157 #ifde‡
CONFIG_COMPAT


158 
	$pmfs_com∑t_io˘l
(
fûe
 *fûe, 
cmd
, 
¨g
)

160 
cmd
) {

161 
FS_IOC32_GETFLAGS
:

162 
cmd
 = 
FS_IOC_GETFLAGS
;

164 
FS_IOC32_SETFLAGS
:

165 
cmd
 = 
FS_IOC_SETFLAGS
;

167 
FS_IOC32_GETVERSION
:

168 
cmd
 = 
FS_IOC_GETVERSION
;

170 
FS_IOC32_SETVERSION
:

171 
cmd
 = 
FS_IOC_SETVERSION
;

174  -
ENOIOCTLCMD
;

176  
	`pmfs_io˘l
(
fûe
, 
cmd
, ()
	`com∑t_±r
(
¨g
));

177 
	}
}

	@journal.c

23 
	~<löux/moduÀ.h
>

24 
	~<löux/°rög.h
>

25 
	~<löux/öô.h
>

26 
	~<löux/vfs.h
>

27 
	~<löux/uac˚ss.h
>

28 
	~<löux/mm.h
>

29 
	~<löux/muãx.h
>

30 
	~<löux/sched.h
>

31 
	~<löux/kthªad.h
>

32 
	~"pmfs.h
"

33 
	~"jou∫Æ.h
"

35 
	$dump_å™ß˘i⁄
(
pmfs_sb_öfo
 *
sbi
,

36 
pmfs_å™ß˘i⁄_t
 *
å™s
)

38 
i
;

39 
pmfs_logíåy_t
 *
À
 = 
å™s
->
°¨t_addr
;

41 
i
 = 0; i < 
å™s
->
num_íåõs
; i++) {

42 
	`pmfs_dbg_å™s
("ao %llxÅid %x gid %xÅype %x sz %x\n",

43 
À
->
addr_off£t
,Üe->
å™ß˘i⁄_id
,Üe->
gí_id
,

44 
À
->
ty≥
,Üe->
size
);

45 
À
++;

47 
	}
}

49 
ölöe
 
uöt32_t
 
	$√xt_log_íåy
(
uöt32_t
 
jsize
, uöt32_à
À_off
)

51 
À_off
 =Üe_of‡+ 
LOGENTRY_SIZE
;

52 i‡(
À_off
 >
jsize
)

53 
À_off
 = 0;

54  
À_off
;

55 
	}
}

57 
ölöe
 
uöt32_t
 
	$¥ev_log_íåy
(
uöt32_t
 
jsize
, uöt32_à
À_off
)

59 i‡(
À_off
 == 0)

60 
À_off
 = 
jsize
;

61 
À_off
 =Üe_of‡- 
LOGENTRY_SIZE
;

62  
À_off
;

63 
	}
}

65 
ölöe
 
uöt16_t
 
	$√xt_gí_id
(
uöt16_t
 
gí_id
)

67 
gí_id
++;

69 i‡(
gí_id
 == 0)

70 
gí_id
++;

71  
gí_id
;

72 
	}
}

74 
ölöe
 
uöt16_t
 
	$¥ev_gí_id
(
uöt16_t
 
gí_id
)

76 
gí_id
--;

78 i‡(
gí_id
 == 0)

79 
gí_id
--;

80  
gí_id
;

81 
	}
}

84 
ölöe
 
	$pmfs_undo_logíåy
(
su≥r_block
 *
sb
,

85 
pmfs_logíåy_t
 *
À
)

87 *
d©a
;

89 i‡(
À
->
size
 > 0) {

90 
d©a
 = 
	`pmfs_gë_block
(
sb
, 
	`À64_to_˝u
(
À
->
addr_off£t
));

92 
	`pmfs_memu∆ock_ønge
(
sb
, 
d©a
, 
À
->
size
);

93 
	`mem˝y
(
d©a
, 
À
->d©a,Üe->
size
);

94 
	`pmfs_memlock_ønge
(
sb
, 
d©a
, 
À
->
size
);

95 
	`pmfs_Êush_buf„r
(
d©a
, 
À
->
size
, 
Ál£
);

97 
	}
}

101 
	$pmfs_undo_å™ß˘i⁄
(
su≥r_block
 *
sb
,

102 
pmfs_å™ß˘i⁄_t
 *
å™s
)

104 
pmfs_logíåy_t
 *
À
;

105 
i
;

106 
uöt16_t
 
gí_id
 = 
å™s
->gen_id;

108 
À
 = 
å™s
->
°¨t_addr
 +Åøns->
num_u£d
;

109 
À
--;

110 
i
 = 
å™s
->
num_u£d
 - 1; i >0; i--, 
À
--) {

111 i‡(
gí_id
 =
	`À16_to_˝u
(
À
->gen_id))

112 
	`pmfs_undo_logíåy
(
sb
, 
À
);

114 
	}
}

117 
	$pmfs_Êush_å™ß˘i⁄
(
su≥r_block
 *
sb
,

118 
pmfs_å™ß˘i⁄_t
 *
å™s
)

120 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

121 
pmfs_logíåy_t
 *
À
 = 
å™s
->
°¨t_addr
;

122 
i
;

123 *
d©a
;

125 
i
 = 0; i < 
å™s
->
num_u£d
; i++, 
À
++) {

126 i‡(
À
->
size
) {

127 
d©a
 = 
	`pmfs_gë_block
(
sb
,
	`À64_to_˝u
(
À
->
addr_off£t
));

128 i‡(
sbi
->
ªdo_log
) {

129 
	`pmfs_memu∆ock_ønge
(
sb
, 
d©a
, 
À
->
size
);

130 
	`mem˝y
(
d©a
, 
À
->d©a,Üe->
size
);

131 
	`pmfs_memlock_ønge
(
sb
, 
d©a
, 
À
->
size
);

133 
	`pmfs_Êush_buf„r
(
d©a
, 
À
->
size
, 
Ál£
);

136 
	}
}

138 
ölöe
 
	$övÆid©e_gí_id
(
pmfs_logíåy_t
 *
À
)

140 
À
->
gí_id
 = 0;

141 
	`pmfs_Êush_buf„r
(
À
, 
LOGENTRY_SIZE
, 
Ál£
);

142 
	}
}

145 
	$pmfs_övÆid©e_logíåõs
(
su≥r_block
 *
sb
,

146 
pmfs_å™ß˘i⁄_t
 *
å™s
)

148 
pmfs_logíåy_t
 *
À
 = 
å™s
->
°¨t_addr
;

149 
i
;

151 
	`pmfs_memu∆ock_ønge
(
sb
, 
å™s
->
°¨t_addr
,

152 
å™s
->
num_íåõs
 * 
LOGENTRY_SIZE
);

153 
i
 = 0; i < 
å™s
->
num_íåõs
; i++) {

154 
	`övÆid©e_gí_id
(
À
);

155 i‡(
À
->
ty≥
 =
LE_START
) {

156 
	`PERSISTENT_MARK
();

157 
	`PERSISTENT_BARRIER
();

159 
À
++;

161 
	`pmfs_memlock_ønge
(
sb
, 
å™s
->
°¨t_addr
,

162 
å™s
->
num_íåõs
 * 
LOGENTRY_SIZE
);

163 
	}
}

166 
	$pmfs_ªdo_å™ß˘i⁄
(
su≥r_block
 *
sb
,

167 
pmfs_å™ß˘i⁄_t
 *
å™s
, 
boﬁ
 
ªcovî
)

169 
pmfs_logíåy_t
 *
À
 = 
å™s
->
°¨t_addr
;

170 
i
;

171 
uöt16_t
 
gí_id
 = 
å™s
->gen_id;

172 *
d©a
;

174 
i
 = 0; i < 
å™s
->
num_íåõs
; i++) {

175 i‡(
gí_id
 =
	`À16_to_˝u
(
À
->gí_idË&&Üe->
size
 > 0) {

176 
d©a
 = 
	`pmfs_gë_block
(
sb
,
	`À64_to_˝u
(
À
->
addr_off£t
));

178 i‡(
ªcovî
) {

179 
	`pmfs_memu∆ock_ønge
(
sb
, 
d©a
, 
À
->
size
);

180 
	`mem˝y
(
d©a
, 
À
->d©a,Üe->
size
);

181 
	`pmfs_memlock_ønge
(
sb
, 
d©a
, 
À
->
size
);

183 
	`pmfs_Êush_buf„r
(
d©a
, 
À
->
size
, 
Ál£
);

185 
À
++;

187 
	}
}

191 
uöt32_t
 
	$pmfs_ªcovî_å™ß˘i⁄
(
su≥r_block
 *
sb
, 
uöt32_t
 
hód
,

192 
uöt32_t
 
èû
, 
pmfs_logíåy_t
 *
À
)

194 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

195 
pmfs_å™ß˘i⁄_t
 
å™s
;

196 
boﬁ
 
cmt_‹_abπ_found
 = 
Ál£
, 
°¨t_found
 = false;

197 
uöt16_t
 
gí_id
 = 
	`À16_to_˝u
(
À
->gen_id);

199 
	`mem£t
(&
å™s
, 0, (trans));

200 
å™s
.
å™ß˘i⁄_id
 = 
	`À32_to_˝u
(
À
->transaction_id);

201 
å™s
.
gí_id
 = gen_id;

204 
å™s
.
num_íåõs
++;

205 
å™s
.
num_u£d
++;

207 i‡(
gí_id
 =
	`À16_to_˝u
(
À
->gen_id)) {

209 i‡(
À
->
ty≥
 & 
LE_COMMIT
 ||Üe->ty≥ & 
LE_ABORT
)

210 
cmt_‹_abπ_found
 = 
åue
;

211 i‡(
À
->
ty≥
 & 
LE_START
) {

212 
å™s
.
°¨t_addr
 = 
À
;

213 
°¨t_found
 = 
åue
;

217 i‡(
èû
 =0 ||Åaû =
hód
)

220 
À
--;

222 i‡((
gí_id
 =
	`À16_to_˝u
(
À
->gen_id))

223 && (
À
->
ty≥
 & 
LE_COMMIT
 ||Üe->ty≥ & 
LE_ABORT
)) {

224 
	`BUG_ON
(
å™s
.
å™ß˘i⁄_id
 ==

225 
	`À32_to_˝u
(
À
->
å™ß˘i⁄_id
));

226 
À
++;

229 
èû
 = 
	`¥ev_log_íåy
(
sbi
->
jsize
,Åail);

232 i‡(
°¨t_found
 && !
cmt_‹_abπ_found
)

233 
	`pmfs_undo_å™ß˘i⁄
(
sb
, &
å™s
);

235 i‡(
gí_id
 =
MAX_GEN_ID
) {

236 i‡(!
°¨t_found
)

237 
å™s
.
°¨t_addr
 = 
À
;

240 i‡(
°¨t_found
 && !
cmt_‹_abπ_found
) {

241 
	`PERSISTENT_MARK
();

242 
	`PERSISTENT_BARRIER
();

244 
	`pmfs_övÆid©e_logíåõs
(
sb
, &
å™s
);

246  
èû
;

247 
	}
}

251 
uöt32_t
 
	$pmfs_¥o˚ss_å™ß˘i⁄
(
su≥r_block
 *
sb
, 
uöt32_t
 
hód
,

252 
uöt32_t
 
èû
, 
pmfs_logíåy_t
 *
À
, 
boﬁ
 
ªcovî
, *
¥o˚s£d
)

254 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

255 
pmfs_å™ß˘i⁄_t
 
å™s
;

256 
uöt16_t
 
gí_id
;

257 
uöt32_t
 
√w_hód
 = 
hód
;

258 
h™dÀd
 = 0;

260 *
¥o˚s£d
 = 0;

261 
gí_id
 = 
	`À16_to_˝u
(
À
->gen_id);

262 i‡(!(
À
->
ty≥
 & 
LE_START
)) {

263 
	`pmfs_dbg
("start ofÅrans %x but LE_STARTÇot set. gen_id %d\n",

264 
	`À32_to_˝u
(
À
->
å™ß˘i⁄_id
), 
gí_id
);

265  
	`√xt_log_íåy
(
sbi
->
jsize
, 
√w_hód
);

267 
	`mem£t
(&
å™s
, 0, (trans));

268 
å™s
.
å™ß˘i⁄_id
 = 
	`À32_to_˝u
(
À
->transaction_id);

269 
å™s
.
°¨t_addr
 = 
À
;

270 
å™s
.
gí_id
 = gen_id;

272 
å™s
.
num_íåõs
++;

273 
å™s
.
num_u£d
++;

274 
√w_hód
 = 
	`√xt_log_íåy
(
sbi
->
jsize
,Çew_head);

275 
h™dÀd
++;

278 i‡((
gí_id
 =
	`À16_to_˝u
(
À
->gí_id)Ë&& (À->
ty≥
 & 
LE_COMMIT


279 || 
À
->
ty≥
 & 
LE_ABORT
)) {

280 
hód
 = 
√w_hód
;

281 i‡((
À
->
ty≥
 & 
LE_COMMIT
Ë&& 
sbi
->
ªdo_log
)

282 
	`pmfs_ªdo_å™ß˘i⁄
(
sb
, &
å™s
, 
ªcovî
);

284 i‡(
gí_id
 =
MAX_GEN_ID
) {

285 i‡((
À
->
ty≥
 & 
LE_COMMIT
Ë&& 
sbi
->
ªdo_log
) {

286 
	`PERSISTENT_MARK
();

287 
	`PERSISTENT_BARRIER
();

289 
	`pmfs_övÆid©e_logíåõs
(
sb
, &
å™s
);

294 
À
++;

296 i‡((
√w_hód
 =
èû
Ë|| ((
gí_id
 =
	`À16_to_˝u
(
À
->gen_id))

297 && (
À
->
ty≥
 & 
LE_START
))) {

299 i‡(
ªcovî
) {

303 
hód
 = 
√w_hód
;

304 i‡(
gí_id
 =
MAX_GEN_ID
)

305 
	`pmfs_övÆid©e_logíåõs
(
sb
, &
å™s
);

307 
	`pmfs_dbg_å™s
("no cmtÅid %d sa %pÇle %dÅail %x"

309 
å™s
.
å™ß˘i⁄_id
,å™s.
°¨t_addr
,å™s.
num_íåõs
,

310 
å™s
.
num_u£d
,Åøns.
gí_id
);

314 } 
√w_hód
 !
èû
);

316 *
¥o˚s£d
 = 
h™dÀd
;

317  
hód
;

318 
	}
}

320 
	$pmfs_˛ón_jou∫Æ
(
su≥r_block
 *
sb
, 
boﬁ
 
unmou¡
,

321 
èke_lock
)

323 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

324 
pmfs_jou∫Æ_t
 *
jou∫Æ
 = 
	`pmfs_gë_jou∫Æ
(
sb
);

325 
uöt32_t
 
hód
;

326 
uöt32_t
 
√w_hód
, 
èû
;

327 
uöt16_t
 
gí_id
;

328 vﬁ©ûê
__À64
 *
±r_èû_gíid
;

329 
¥o˚s£d
 = 0;

330 
tŸÆ
 = 0;

331 
u64
 
èû_gíid
;

332 
pmfs_logíåy_t
 *
À
;

334 i‡(
èke_lock
)

335 
	`muãx_lock
(&
sbi
->
jou∫Æ_muãx
);

336 
hód
 = 
	`À32_to_˝u
(
jou∫Æ
->head);

337 
±r_èû_gíid
 = (vﬁ©ûê
__À64
 *)&
jou∫Æ
->
èû
;

344 
èû_gíid
 = 
	`À64_to_˝u
(*
±r_èû_gíid
);

345 
èû
 = 
èû_gíid
 & 0xFFFFFFFF;

346 
gí_id
 = (
èû_gíid
 >> 32) & 0xFFFF;

349 i‡(
èû
 < 
hód
)

350 
gí_id
 = 
	`¥ev_gí_id
(gen_id);

351 
	`pmfs_dbg_å™s
("°¨tög jou∫Æ cÀ™ög %x %x\n", 
hód
, 
èû
);

352 
hód
 !
èû
) {

353 
À
 = (
pmfs_logíåy_t
 *)(
sbi
->
jou∫Æ_ba£_addr
 + 
hód
);

354 i‡(
gí_id
 =
	`À16_to_˝u
(
À
->gen_id)) {

356 
√w_hód
 = 
	`pmfs_¥o˚ss_å™ß˘i⁄
(
sb
, 
hód
, 
èû
,

357 
À
, 
Ál£
, &
¥o˚s£d
);

358 
tŸÆ
 +
¥o˚s£d
;

360 i‡(
√w_hód
 =
hód
)

362 
hód
 = 
√w_hód
;

364 i‡(
gí_id
 =
MAX_GEN_ID
) {

365 
	`pmfs_memu∆ock_ønge
(
sb
, 
À
, (*le));

366 
	`övÆid©e_gí_id
(
À
);

367 
	`pmfs_memlock_ønge
(
sb
, 
À
, (*le));

369 
hód
 = 
	`√xt_log_íåy
(
sbi
->
jsize
, head);

372 i‡(
hód
 == 0)

373 
gí_id
 = 
	`√xt_gí_id
(gen_id);

375 
	`PERSISTENT_MARK
();

376 
	`PERSISTENT_BARRIER
();

377 
	`pmfs_memu∆ock_ønge
(
sb
, 
jou∫Æ
, (*journal));

378 
jou∫Æ
->
hód
 = 
	`˝u_to_À32
(head);

379 
	`pmfs_memlock_ønge
(
sb
, 
jou∫Æ
, (*journal));

380 
	`pmfs_Êush_buf„r
(&
jou∫Æ
->
hód
, (jou∫Æ->hód), 
åue
);

381 i‡(
unmou¡
) {

382 
	`PERSISTENT_MARK
();

383 i‡(
jou∫Æ
->
hód
 !jou∫Æ->
èû
)

384 
	`pmfs_dbg
("PMFS: umount but journalÇotÉmpty %x:%x\n",

385 
	`À32_to_˝u
(
jou∫Æ
->
hód
),Üe32_to_˝u(jou∫Æ->
èû
));

386 
	`PERSISTENT_BARRIER
();

388 
	`pmfs_dbg_å™s
("Àavög jou∫Æ cÀ™ög %x %x\n", 
hód
, 
èû
);

389 i‡(
èke_lock
)

390 
	`muãx_u∆ock
(&
sbi
->
jou∫Æ_muãx
);

391  
tŸÆ
;

392 
	}
}

394 
	$log_˛ó√r_åy_¶ìpög
(
pmfs_sb_öfo
 *
sbi
)

396 
	`DEFINE_WAIT
(
waô
);

397 
	`¥ï¨e_to_waô
(&
sbi
->
log_˛ó√r_waô
, &
waô
, 
TASK_INTERRUPTIBLE
);

398 
	`scheduÀ
();

399 
	`föish_waô
(&
sbi
->
log_˛ó√r_waô
, &
waô
);

400 
	}
}

402 
	$pmfs_log_˛ó√r
(*
¨g
)

404 
su≥r_block
 *
sb
 = (su≥r_block *)
¨g
;

405 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

407 
	`pmfs_dbg_å™s
("RunningÜog cleanerÅhread\n");

409 
	`log_˛ó√r_åy_¶ìpög
(
sbi
);

411 i‡(
	`kthªad_should_°›
())

414 
	`pmfs_˛ón_jou∫Æ
(
sb
, 
Ál£
, 1);

416 
	`pmfs_˛ón_jou∫Æ
(
sb
, 
åue
, 1);

417 
	`pmfs_dbg_å™s
("ExitingÜog cleanerÅhread\n");

419 
	}
}

421 
	$pmfs_jou∫Æ_˛ó√r_run
(
su≥r_block
 *
sb
)

423 
ªt
 = 0;

424 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

426 
	`öô_waôqueue_hód
(&
sbi
->
log_˛ó√r_waô
);

428 
sbi
->
log_˛ó√r_thªad
 = 
	`kthªad_run
(
pmfs_log_˛ó√r
, 
sb
,

429 "pmfs_log_˛ó√r_0x%Œx", 
sbi
->
phys_addr
);

430 i‡(
	`IS_ERR
(
sbi
->
log_˛ó√r_thªad
)) {

432 
	`pmfs_îr
(
sb
, "FailedÅo startÖmfsÜog cleanerÅhread\n");

433 
ªt
 = -1;

435  
ªt
;

436 
	}
}

438 
	$pmfs_jou∫Æ_so·_öô
(
su≥r_block
 *
sb
)

440 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

441 
pmfs_jou∫Æ_t
 *
jou∫Æ
 = 
	`pmfs_gë_jou∫Æ
(
sb
);

443 
sbi
->
√xt_å™ß˘i⁄_id
 = 0;

444 
sbi
->
jou∫Æ_ba£_addr
 = 
	`pmfs_gë_block
(
sb
,
	`À64_to_˝u
(
jou∫Æ
->
ba£
));

445 
sbi
->
jsize
 = 
	`À32_to_˝u
(
jou∫Æ
->
size
);

446 
	`muãx_öô
(&
sbi
->
jou∫Æ_muãx
);

447 
sbi
->
ªdo_log
 = !!
	`À16_to_˝u
(
jou∫Æ
->
ªdo_loggög
);

449  
	`pmfs_jou∫Æ_˛ó√r_run
(
sb
);

450 
	}
}

452 
	$pmfs_jou∫Æ_h¨d_öô
(
su≥r_block
 *
sb
, 
uöt64_t
 
ba£
,

453 
uöt32_t
 
size
)

455 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

456 
pmfs_jou∫Æ_t
 *
jou∫Æ
 = 
	`pmfs_gë_jou∫Æ
(
sb
);

458 
	`pmfs_memu∆ock_ønge
(
sb
, 
jou∫Æ
, (*journal));

459 
jou∫Æ
->
ba£
 = 
	`˝u_to_À64
(base);

460 
jou∫Æ
->
size
 = 
	`˝u_to_À32
(size);

461 
jou∫Æ
->
gí_id
 = 
	`˝u_to_À16
(1);

462 
jou∫Æ
->
hód
 = jou∫Æ->
èû
 = 0;

464 
jou∫Æ
->
ªdo_loggög
 = 0;

465 
	`pmfs_memlock_ønge
(
sb
, 
jou∫Æ
, (*journal));

467 
sbi
->
jou∫Æ_ba£_addr
 = 
	`pmfs_gë_block
(
sb
, 
ba£
);

468 
	`pmfs_memu∆ock_ønge
(
sb
, 
sbi
->
jou∫Æ_ba£_addr
, 
size
);

469 
	`mem£t_¡
(
sbi
->
jou∫Æ_ba£_addr
, 0, 
size
);

470 
	`pmfs_memlock_ønge
(
sb
, 
sbi
->
jou∫Æ_ba£_addr
, 
size
);

472  
	`pmfs_jou∫Æ_so·_öô
(
sb
);

473 
	}
}

475 
	$wakeup_log_˛ó√r
(
pmfs_sb_öfo
 *
sbi
)

477 i‡(!
	`waôqueue_a˘ive
(&
sbi
->
log_˛ó√r_waô
))

479 
	`pmfs_dbg_å™s
("waking upÅhe cleanerÅhread\n");

480 
	`wake_up_öãºu±ibÀ
(&
sbi
->
log_˛ó√r_waô
);

481 
	}
}

483 
	$pmfs_jou∫Æ_unöô
(
su≥r_block
 *
sb
)

485 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

487 i‡(
sbi
->
log_˛ó√r_thªad
)

488 
	`kthªad_°›
(
sbi
->
log_˛ó√r_thªad
);

490 
	}
}

492 
ölöe
 
pmfs_å™ß˘i⁄_t
 *
	$pmfs_cuºít_å™ß˘i⁄
()

494  (
pmfs_å™ß˘i⁄_t
 *)
cuºít
->
jou∫Æ_öfo
;

495 
	}
}

497 
	$pmfs_‰ì_logíåõs
(
su≥r_block
 *
sb
, 
max_log_íåõs
)

499 
‰ìd_íåõs
 = 0;

501 
‰ìd_íåõs
 = 
	`pmfs_˛ón_jou∫Æ
(
sb
, 
Ál£
, 0);

502  
LOGENTRY_SIZE
 * 
‰ìd_íåõs
;

503 
	}
}

505 
pmfs_å™ß˘i⁄_t
 *
	$pmfs_√w_å™ß˘i⁄
(
su≥r_block
 *
sb
,

506 
max_log_íåõs
)

508 
pmfs_jou∫Æ_t
 *
jou∫Æ
 = 
	`pmfs_gë_jou∫Æ
(
sb
);

509 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

510 
pmfs_å™ß˘i⁄_t
 *
å™s
;

511 
uöt32_t
 
hód
, 
èû
, 
ªq_size
, 
avaû_size
, 
‰ìd_size
;

512 
uöt64_t
 
ba£
;

513 
ªåy
 = 0;

514 
timög_t
 
log_time
;

516 
å™s
 = 
	`pmfs_cuºít_å™ß˘i⁄
();

518 i‡(
å™s
) {

519 
	`BUG_ON
(
å™s
->
t_jou∫Æ
 !
jou∫Æ
);

520  
å™s
;

524 
	`PMFS_START_TIMING
(
√w_å™s_t
, 
log_time
);

526 i‡(!
sbi
->
ªdo_log
)

527 
max_log_íåõs
++;

529 
å™s
 = 
	`pmfs_Æloc_å™ß˘i⁄
();

530 i‡(!
å™s
)

531  
	`ERR_PTR
(-
ENOMEM
);

532 
	`mem£t
(
å™s
, 0, (*trans));

534 
å™s
->
num_u£d
 = 0;

535 
å™s
->
num_íåõs
 = 
max_log_íåõs
;

536 
å™s
->
t_jou∫Æ
 = 
jou∫Æ
;

537 
ªq_size
 = 
max_log_íåõs
 << 
LESIZE_SHIFT
;

539 
	`muãx_lock
(&
sbi
->
jou∫Æ_muãx
);

541 
èû
 = 
	`À32_to_˝u
(
jou∫Æ
->tail);

542 
hód
 = 
	`À32_to_˝u
(
jou∫Æ
->head);

543 
å™s
->
å™ß˘i⁄_id
 = 
sbi
->
√xt_å™ß˘i⁄_id
++;

544 
agaö
:

545 
å™s
->
gí_id
 = 
	`À16_to_˝u
(
jou∫Æ
->gen_id);

546 
avaû_size
 = (
èû
 >
hód
) ?

547 (
sbi
->
jsize
 - (
èû
 - 
hód
)) : (head -Åail);

548 
avaû_size
 =ávaû_sizê- 
LOGENTRY_SIZE
;

550 i‡(
avaû_size
 < 
ªq_size
) {

552 
‰ìd_size
 = 0;

553 
ªåy
 = 0;Ñetry < 3;Ñetry++) {

554 
‰ìd_size
 +
	`pmfs_‰ì_logíåõs
(
sb
,

555 
max_log_íåõs
);

556 i‡((
avaû_size
 + 
‰ìd_size
Ë>
ªq_size
)

560 i‡((
avaû_size
 + 
‰ìd_size
Ë< 
ªq_size
)

561 
jou∫Æ_fuŒ
;

563 
ba£
 = 
	`À64_to_˝u
(
jou∫Æ
->ba£Ë+ 
èû
;

564 
èû
 =Åaû + 
ªq_size
;

568 
	`pmfs_memu∆ock_ønge
(
sb
, 
jou∫Æ
, (*journal));

569 i‡(
èû
 >
sbi
->
jsize
) {

570 
u64
 *
±r
;

571 
èû
 = 0;

572 
±r
 = (
u64
 *)&
jou∫Æ
->
èû
;

576 
	`WRITE_ONCE
(*
±r
, (
__f‹˚
 
u64
)
	`˝u_to_À64
((u64)
	`√xt_gí_id
(

577 
	`À16_to_˝u
(
jou∫Æ
->
gí_id
)) << 32));

578 
	`pmfs_memlock_ønge
(
sb
, 
jou∫Æ
, (*journal));

579 
	`pmfs_dbg_å™s
("journal wrapped.Åail %x gid %d curÅid %d\n",

580 
	`À32_to_˝u
(
jou∫Æ
->
èû
),
	`À16_to_˝u
(jou∫Æ->
gí_id
),

581 
sbi
->
√xt_å™ß˘i⁄_id
 - 1);

582 
agaö
;

584 
jou∫Æ
->
èû
 = 
	`˝u_to_À32
(tail);

585 
	`pmfs_memlock_ønge
(
sb
, 
jou∫Æ
, (*journal));

587 
	`pmfs_Êush_buf„r
(&
jou∫Æ
->
èû
, (
u64
), 
Ál£
);

588 
	`muãx_u∆ock
(&
sbi
->
jou∫Æ_muãx
);

590 
avaû_size
 =ávaû_sizê- 
ªq_size
;

592 i‡((
sbi
->
jsize
 - 
avaû_size
) > (sbi->jsize >> 3))

593 
	`wakeup_log_˛ó√r
(
sbi
);

595 
	`pmfs_dbg_å™s
("newÅransactionÅid %dÇle %dávl sz %x sa %llx\n",

596 
å™s
->
å™ß˘i⁄_id
, 
max_log_íåõs
, 
avaû_size
, 
ba£
);

597 
å™s
->
°¨t_addr
 = 
	`pmfs_gë_block
(
sb
, 
ba£
);

599 
å™s
->
∑ª¡
 = (
pmfs_å™ß˘i⁄_t
 *)
cuºít
->
jou∫Æ_öfo
;

600 
cuºít
->
jou∫Æ_öfo
 = 
å™s
;

601 
	`PMFS_END_TIMING
(
√w_å™s_t
, 
log_time
);

602  
å™s
;

603 
jou∫Æ_fuŒ
:

604 
	`muãx_u∆ock
(&
sbi
->
jou∫Æ_muãx
);

605 
	`pmfs_îr
(
sb
, "Journal full. base %llx sz %x head:tail %x:%xÇcl %x\n",

606 
	`À64_to_˝u
(
jou∫Æ
->
ba£
), 
	`À32_to_˝u
(jou∫Æ->
size
),

607 
	`À32_to_˝u
(
jou∫Æ
->
hód
),Üe32_to_˝u(jou∫Æ->
èû
),

608 
max_log_íåõs
);

609 
	`pmfs_îr
(
sb
, "avail size %u, freed size %u,Ñequest size %u\n",

610 
avaû_size
, 
‰ìd_size
, 
ªq_size
);

611 
	`pmfs_‰ì_å™ß˘i⁄
(
å™s
);

612 
	`PMFS_END_TIMING
(
√w_å™s_t
, 
log_time
);

613  
	`ERR_PTR
(-
EAGAIN
);

614 
	}
}

616 
ölöe
 
	$pmfs_commô_logíåy
(
su≥r_block
 *
sb
,

617 
pmfs_å™ß˘i⁄_t
 *
å™s
, 
pmfs_logíåy_t
 *
À
)

619 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

620 i‡(
sbi
->
ªdo_log
) {

622 
	`PERSISTENT_MARK
();

623 
	`PERSISTENT_BARRIER
();

625 
À
->
ty≥
 |
LE_COMMIT
;

626 
	`b¨rõr
();

628 
À
->
gí_id
 = 
	`˝u_to_À16
(
å™s
->gen_id);

629 
	`pmfs_Êush_buf„r
(
À
, 
LOGENTRY_SIZE
, 
Ál£
);

630 
	`PERSISTENT_MARK
();

631 
	`PERSISTENT_BARRIER
();

633 
	`pmfs_Êush_å™ß˘i⁄
(
sb
, 
å™s
);

638 
	`pmfs_Êush_å™ß˘i⁄
(
sb
, 
å™s
);

639 
	`PERSISTENT_MARK
();

640 
	`PERSISTENT_BARRIER
();

642 
À
->
ty≥
 |
LE_COMMIT
;

643 
	`b¨rõr
();

645 
À
->
gí_id
 = 
	`˝u_to_À16
(
å™s
->gen_id);

646 
	`pmfs_Êush_buf„r
(
À
, 
LOGENTRY_SIZE
, 
åue
);

648 
	}
}

650 
	$pmfs_add_logíåy
(
su≥r_block
 *
sb
,

651 
pmfs_å™ß˘i⁄_t
 *
å™s
, *
addr
, 
uöt16_t
 
size
, 
u8
 
ty≥
)

653 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

654 
pmfs_logíåy_t
 *
À
;

655 
num_Às
 = 0, 
i
;

656 
uöt64_t
 
À_°¨t
 = 
size
 ? 
	`pmfs_gë_addr_off
(
sbi
, 
addr
) : 0;

657 
uöt8_t
 
À_size
;

658 
timög_t
 
add_log_time
;

660 i‡(
å™s
 =
NULL
)

661  -
EINVAL
;

663 
	`PMFS_START_TIMING
(
add_log_t
, 
add_log_time
);

664 
À
 = 
å™s
->
°¨t_addr
 +Åøns->
num_u£d
;

666 i‡(
size
 == 0) {

668 i‡((
ty≥
 & 
LE_COMMIT
Ë|| (ty≥ & 
LE_ABORT
))

669 
num_Às
 = 1;

671 
num_Às
 = (
size
 + (
À
->
d©a
) - 1)/(le->data);

673 
	`pmfs_dbg_å™s
("addÜe id %d size %x,Çum_les %dÅail %xÜe %p\n",

674 
å™s
->
å™ß˘i⁄_id
, 
size
,Åøns->
num_íåõs
,

675 
å™s
->
num_u£d
, 
À
);

677 i‡((
å™s
->
num_u£d
 + 
num_Às
Ë>Åøns->
num_íåõs
) {

678 
	`pmfs_îr
(
sb
, "Log Entry full.Åid %xÇe %xÅail %x size %x\n",

679 
å™s
->
å™ß˘i⁄_id
,Åøns->
num_íåõs
,

680 
å™s
->
num_u£d
, 
size
);

681 
	`dump_å™ß˘i⁄
(
sbi
, 
å™s
);

682 
	`dump_°ack
();

683  -
ENOMEM
;

686 
	`pmfs_memu∆ock_ønge
(
sb
, 
À
, (*ÀË* 
num_Às
);

687 
i
 = 0; i < 
num_Às
; i++) {

688 
À
->
addr_off£t
 = 
	`˝u_to_À64
(
À_°¨t
);

689 
À
->
å™ß˘i⁄_id
 = 
	`˝u_to_À32
(
å™s
->transaction_id);

690 
À_size
 = (
i
 =(
num_Às
 - 1)Ë? 
size
 : (
À
->
d©a
);

691 
À
->
size
 = 
À_size
;

692 
size
 -
À_size
;

693 i‡(
À_size
)

694 
	`mem˝y
(
À
->
d©a
, 
addr
, 
À_size
);

695 
À
->
ty≥
 =Åype;

697 i‡(
i
 =0 && 
å™s
->
num_u£d
 == 0)

698 
À
->
ty≥
 |
LE_START
;

699 
å™s
->
num_u£d
++;

702 i‡(
i
 =(
num_Às
 - 1Ë&& (
ty≥
 & 
LE_COMMIT
)) {

703 
	`pmfs_commô_logíåy
(
sb
, 
å™s
, 
À
);

704 
	`pmfs_memlock_ønge
(
sb
, 
À
, (*ÀË* 
num_Às
);

705 
	`PMFS_END_TIMING
(
add_log_t
, 
add_log_time
);

710 
	`b¨rõr
();

713 
À
->
gí_id
 = 
	`˝u_to_À16
(
å™s
->gen_id);

714 
	`pmfs_Êush_buf„r
(
À
, 
LOGENTRY_SIZE
, 
Ál£
);

716 
addr
 +
À_size
;

717 
À_°¨t
 +
À_size
;

718 
À
++;

720 
	`pmfs_memlock_ønge
(
sb
, 
À
, (*ÀË* 
num_Às
);

721 i‡(!
sbi
->
ªdo_log
) {

722 
	`PERSISTENT_MARK
();

723 
	`PERSISTENT_BARRIER
();

725 
	`PMFS_END_TIMING
(
add_log_t
, 
add_log_time
);

727 
	}
}

729 
	$pmfs_commô_å™ß˘i⁄
(
su≥r_block
 *
sb
,

730 
pmfs_å™ß˘i⁄_t
 *
å™s
)

732 
timög_t
 
commô_time
;

734 i‡(
å™s
 =
NULL
)

737 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
NULL
, 0, 
LE_COMMIT
);

739 
	`PMFS_START_TIMING
(
commô_å™s_t
, 
commô_time
);

740 
	`pmfs_dbg_å™s
("completingÅransaction for id %d\n",

741 
å™s
->
å™ß˘i⁄_id
);

743 
cuºít
->
jou∫Æ_öfo
 = 
å™s
->
∑ª¡
;

744 
	`pmfs_‰ì_å™ß˘i⁄
(
å™s
);

745 
	`PMFS_END_TIMING
(
commô_å™s_t
, 
commô_time
);

747 
	}
}

749 
	$pmfs_ab‹t_å™ß˘i⁄
(
su≥r_block
 *
sb
, 
pmfs_å™ß˘i⁄_t
 *
å™s
)

751 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

753 i‡(
å™s
 =
NULL
)

755 
	`pmfs_dbg_å™s
("abortÅrans forÅid %x sa %pÇumle %dÅail %x gen %d\n",

756 
å™s
->
å™ß˘i⁄_id
,Åøns->
°¨t_addr
,Åøns->
num_íåõs
,

757 
å™s
->
num_u£d
,Åøns->
gí_id
);

758 
	`dump_å™ß˘i⁄
(
sbi
, 
å™s
);

761 i‡(!
sbi
->
ªdo_log
) {

763 
	`pmfs_undo_å™ß˘i⁄
(
sb
, 
å™s
);

764 
	`PERSISTENT_MARK
();

765 
	`PERSISTENT_BARRIER
();

768 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
NULL
, 0, 
LE_ABORT
);

769 
cuºít
->
jou∫Æ_öfo
 = 
å™s
->
∑ª¡
;

770 
	`pmfs_‰ì_å™ß˘i⁄
(
å™s
);

772 
	}
}

774 
	$övÆid©e_ªmaöög_jou∫Æ
(
su≥r_block
 *
sb
,

775 *
jou∫Æ_vaddr
, 
uöt32_t
 
jèû
, uöt32_à
jsize
)

777 
pmfs_logíåy_t
 *
À
 = (pmfs_logíåy_à*)(
jou∫Æ_vaddr
 + 
jèû
);

778 *
°¨t
 = 
À
;

780 
	`pmfs_memu∆ock_ønge
(
sb
, 
°¨t
, 
jsize
 - 
jèû
);

781 
jèû
 < 
jsize
) {

782 
	`övÆid©e_gí_id
(
À
);

783 
À
++;

784 
jèû
 +
LOGENTRY_SIZE
;

786 
	`pmfs_memlock_ønge
(
sb
, 
°¨t
, 
jsize
 - 
jèû
);

787 
	}
}

796 
	$pmfs_f‹w¨d_jou∫Æ
(
su≥r_block
 *
sb
, 
pmfs_sb_öfo


797 *
sbi
, 
pmfs_jou∫Æ_t
 *
jou∫Æ
)

799 
uöt16_t
 
gí_id
 = 
	`À16_to_˝u
(
jou∫Æ
->gen_id);

801 i‡(
gí_id
 =
MAX_GEN_ID
) {

802 
	`övÆid©e_ªmaöög_jou∫Æ
(
sb
, 
sbi
->
jou∫Æ_ba£_addr
,

803 
	`À32_to_˝u
(
jou∫Æ
->
èû
), 
sbi
->
jsize
);

805 
	`PERSISTENT_MARK
();

806 
gí_id
 = 
	`√xt_gí_id
(gen_id);

808 
	`PERSISTENT_BARRIER
();

809 
	`pmfs_memu∆ock_ønge
(
sb
, 
jou∫Æ
, (*journal));

810 
jou∫Æ
->
gí_id
 = 
	`˝u_to_À16
(gen_id);

811 
	`b¨rõr
();

812 
jou∫Æ
->
hód
 = jou∫Æ->
èû
;

813 
	`pmfs_memlock_ønge
(
sb
, 
jou∫Æ
, (*journal));

814 
	`pmfs_Êush_buf„r
(
jou∫Æ
, (*jou∫Æ), 
Ál£
);

815 
	}
}

817 
	$pmfs_ªcovî_undo_jou∫Æ
(
su≥r_block
 *
sb
)

819 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

820 
pmfs_jou∫Æ_t
 *
jou∫Æ
 = 
	`pmfs_gë_jou∫Æ
(
sb
);

821 
uöt32_t
 
èû
 = 
	`À32_to_˝u
(
jou∫Æ
->tail);

822 
uöt32_t
 
hód
 = 
	`À32_to_˝u
(
jou∫Æ
->head);

823 
uöt16_t
 
gí_id
 = 
	`À16_to_˝u
(
jou∫Æ
->gen_id);

824 
pmfs_logíåy_t
 *
À
;

826 
hód
 !
èû
) {

828 i‡(
èû
 == 0)

829 
gí_id
 = 
	`¥ev_gí_id
(gen_id);

830 
èû
 = 
	`¥ev_log_íåy
(
sbi
->
jsize
,Åail);

832 
À
 = (
pmfs_logíåy_t
 *)(
sbi
->
jou∫Æ_ba£_addr
 + 
èû
);

833 i‡(
gí_id
 =
	`À16_to_˝u
(
À
->gen_id)) {

834 
èû
 = 
	`pmfs_ªcovî_å™ß˘i⁄
(
sb
, 
hód
,Åaû, 
À
);

836 i‡(
gí_id
 =
MAX_GEN_ID
) {

837 
	`pmfs_memu∆ock_ønge
(
sb
, 
À
, (*le));

838 
	`övÆid©e_gí_id
(
À
);

839 
	`pmfs_memlock_ønge
(
sb
, 
À
, (*le));

843 
	`pmfs_f‹w¨d_jou∫Æ
(
sb
, 
sbi
, 
jou∫Æ
);

844 
	`PERSISTENT_MARK
();

845 
	`PERSISTENT_BARRIER
();

847 
	}
}

849 
	$pmfs_ªcovî_ªdo_jou∫Æ
(
su≥r_block
 *
sb
)

851 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

852 
pmfs_jou∫Æ_t
 *
jou∫Æ
 = 
	`pmfs_gë_jou∫Æ
(
sb
);

853 
uöt32_t
 
èû
 = 
	`À32_to_˝u
(
jou∫Æ
->tail);

854 
uöt32_t
 
hód
 = 
	`À32_to_˝u
(
jou∫Æ
->head);

855 
uöt16_t
 
gí_id
 = 
	`À16_to_˝u
(
jou∫Æ
->gen_id);

856 
¥o˚s£d
 = 0;

857 
pmfs_logíåy_t
 *
À
;

860 i‡(
èû
 < 
hód
)

861 
gí_id
 = 
	`¥ev_gí_id
(gen_id);

863 
hód
 !
èû
) {

864 
À
 = (
pmfs_logíåy_t
 *)(
sbi
->
jou∫Æ_ba£_addr
 + 
hód
);

865 i‡(
gí_id
 =
	`À16_to_˝u
(
À
->gen_id)) {

866 
hód
 = 
	`pmfs_¥o˚ss_å™ß˘i⁄
(
sb
, hód, 
èû
,

867 
À
, 
åue
, &
¥o˚s£d
);

869 i‡(
gí_id
 =
MAX_GEN_ID
) {

870 
	`pmfs_memu∆ock_ønge
(
sb
, 
À
, (*le));

871 
	`övÆid©e_gí_id
(
À
);

872 
	`pmfs_memlock_ønge
(
sb
, 
À
, (*le));

874 
hód
 = 
	`√xt_log_íåy
(
sbi
->
jsize
, head);

877 i‡(
hód
 == 0)

878 
gí_id
 = 
	`√xt_gí_id
(gen_id);

880 
	`pmfs_f‹w¨d_jou∫Æ
(
sb
, 
sbi
, 
jou∫Æ
);

881 
	`PERSISTENT_MARK
();

882 
	`PERSISTENT_BARRIER
();

884 
	}
}

886 
	$pmfs_ªcovî_jou∫Æ
(
su≥r_block
 *
sb
)

888 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

889 
pmfs_jou∫Æ_t
 *
jou∫Æ
 = 
	`pmfs_gë_jou∫Æ
(
sb
);

890 
uöt32_t
 
èû
 = 
	`À32_to_˝u
(
jou∫Æ
->tail);

891 
uöt32_t
 
hód
 = 
	`À32_to_˝u
(
jou∫Æ
->head);

892 
uöt16_t
 
gí_id
 = 
	`À16_to_˝u
(
jou∫Æ
->gen_id);

895 i‡(
hód
 =
èû
)

897 
	`pmfs_dbg
("PMFS: journalÑecovery. head:tail %x:%x gen_id %d\n",

898 
hód
, 
èû
, 
gí_id
);

899 i‡(
sbi
->
ªdo_log
)

900 
	`pmfs_ªcovî_ªdo_jou∫Æ
(
sb
);

902 
	`pmfs_ªcovî_undo_jou∫Æ
(
sb
);

904 
	}
}

	@journal.h

18 #i‚de‡
__PMFS_JOURNAL_H__


19 
	#__PMFS_JOURNAL_H__


	)

20 
	~<löux/¶ab.h
>

23 
	#PMFS_DEFAULT_JOURNAL_SIZE
 (4 << 20)

	)

25 
	#PMFS_MINIMUM_JOURNAL_SIZE
 (1 << 16)

	)

27 
	#CACHELINE_SIZE
 (64)

	)

28 
	#CLINE_SHIFT
 (6)

	)

29 
	#CACHELINE_MASK
 (~(
CACHELINE_SIZE
 - 1))

	)

30 
	#CACHELINE_ALIGN
(
addr
Ë((◊ddr)+
CACHELINE_SIZE
-1Ë& 
CACHELINE_MASK
)

	)

32 
	#LOGENTRY_SIZE
 
CACHELINE_SIZE


	)

33 
	#LESIZE_SHIFT
 
CLINE_SHIFT


	)

35 
	#MAX_INODE_LENTRIES
 (2)

	)

36 
	#MAX_SB_LENTRIES
 (2)

	)

38 
	#MAX_DIRENTRY_LENTRIES
 (2)

	)

41 
	#MAX_TRUNCATE_LENTRIES
 (2)

	)

42 
	#MAX_DATA_PER_LENTRY
 48

	)

44 
	#MAX_METABLOCK_LENTRIES
 \

45 ((
PMFS_DEF_BLOCK_SIZE_4K
 * 3)/
MAX_DATA_PER_LENTRY
)

	)

47 
	#MAX_PTRS_PER_LENTRY
 (
MAX_DATA_PER_LENTRY
 / (
u64
))

	)

49 
	#TRANS_RUNNING
 1

	)

50 
	#TRANS_COMMITTED
 2

	)

51 
	#TRANS_ABORTED
 3

	)

53 
	#LE_DATA
 0

	)

54 
	#LE_START
 1

	)

55 
	#LE_COMMIT
 2

	)

56 
	#LE_ABORT
 4

	)

58 
	#MAX_GEN_ID
 ((
uöt16_t
)-1)

	)

63 
__À64
 
	maddr_off£t
;

64 
__À32
 
	må™ß˘i⁄_id
;

65 
__À16
 
	mgí_id
;

66 
u8
 
	mty≥
;

67 
u8
 
	msize
;

68 
	md©a
[48];

69 } 
	tpmfs_logíåy_t
;

72 
	spmfs_å™ß˘i⁄
 {

73 
u32
 
	må™ß˘i⁄_id
;

74 
u16
 
	mnum_íåõs
;

75 
u16
 
	mnum_u£d
;

76 
u16
 
	mgí_id
;

77 
u16
 
	m°©us
;

78 
pmfs_jou∫Æ_t
 *
	mt_jou∫Æ
;

79 
pmfs_logíåy_t
 *
	m°¨t_addr
;

80 
pmfs_å™ß˘i⁄
 *
	m∑ª¡
;

81 } 
	tpmfs_å™ß˘i⁄_t
;

83 
pmfs_å™ß˘i⁄_t
 *
pmfs_Æloc_å™ß˘i⁄
();

84 
pmfs_‰ì_å™ß˘i⁄
(
pmfs_å™ß˘i⁄_t
 *
å™s
);

86 
pmfs_jou∫Æ_so·_öô
(
su≥r_block
 *
sb
);

87 
pmfs_jou∫Æ_h¨d_öô
(
su≥r_block
 *
sb
,

88 
uöt64_t
 
ba£
, 
uöt32_t
 
size
);

89 
pmfs_jou∫Æ_unöô
(
su≥r_block
 *
sb
);

90 
pmfs_å™ß˘i⁄_t
 *
pmfs_√w_å™ß˘i⁄
(
su≥r_block
 *
sb
,

91 
n˛öes
);

92 
pmfs_å™ß˘i⁄_t
 *
pmfs_cuºít_å™ß˘i⁄
();

93 
pmfs_add_logíåy
(
su≥r_block
 *
sb
,

94 
pmfs_å™ß˘i⁄_t
 *
å™s
, *
addr
, 
uöt16_t
 
size
, 
u8
 
ty≥
);

95 
pmfs_commô_å™ß˘i⁄
(
su≥r_block
 *
sb
,

96 
pmfs_å™ß˘i⁄_t
 *
å™s
);

97 
pmfs_ab‹t_å™ß˘i⁄
(
su≥r_block
 *
sb
,

98 
pmfs_å™ß˘i⁄_t
 *
å™s
);

99 
pmfs_ªcovî_jou∫Æ
(
su≥r_block
 *
sb
);

	@namei.c

15 
	~<löux/fs.h
>

16 
	~<löux/∑gem≠.h
>

17 
	~"pmfs.h
"

18 
	~"xù.h
"

23 
ölöe
 
	$pmfs_öc_cou¡
(
öode
 *öode, 
pmfs_öode
 *
pi
)

25 
	`öc_∆ök
(
öode
);

26 
	`pmfs_upd©e_∆ök
(
öode
, 
pi
);

27 
	}
}

29 
ölöe
 
	$pmfs_dec_cou¡
(
öode
 *öode, 
pmfs_öode
 *
pi
)

31 i‡(
öode
->
i_∆ök
) {

32 
	`dr›_∆ök
(
öode
);

33 
	`pmfs_upd©e_∆ök
(
öode
, 
pi
);

35 
	}
}

37 
ölöe
 
	$pmfs_add_n⁄dú
(
pmfs_å™ß˘i⁄_t
 *
å™s
,

38 
öode
 *
dú
, 
díåy
 *dentry, inode *inode)

40 
pmfs_öode
 *
pi
;

41 
îr
 = 
	`pmfs_add_íåy
(
å™s
, 
díåy
, 
öode
);

43 i‡(!
îr
) {

44 
	`d_ö°™tüã
(
díåy
, 
öode
);

45 
	`u∆ock_√w_öode
(
öode
);

48 
pi
 = 
	`pmfs_gë_öode
(
öode
->
i_sb
, inode->
i_öo
);

49 
	`pmfs_dec_cou¡
(
öode
, 
pi
);

50 
	`u∆ock_√w_öode
(
öode
);

51 
	`ùut
(
öode
);

52  
îr
;

53 
	}
}

55 
ölöe
 
pmfs_dúíåy
 *
	$pmfs_√xt_íåy
(
pmfs_dúíåy
 *
p
)

57  (
pmfs_dúíåy
 *)((*)
p
 + 
	`À16_to_˝u
’->
de_Àn
));

58 
	}
}

63 
	$pmfs_check_dú_íåy
(c⁄° *
fun˘i⁄
, 
öode
 *
dú
,

64 
pmfs_dúíåy
 *
de
, 
u8
 *
ba£
,

65 
off£t
)

67 c⁄° *
îr‹_msg
 = 
NULL
;

68 c⁄° 
æí
 = 
	`À16_to_˝u
(
de
->
de_Àn
);

70 i‡(
	`u∆ikñy
(
æí
 < 
	`PMFS_DIR_REC_LEN
(1)))

71 
îr‹_msg
 = "de_len is smallerÅhan minimal";

72 i‡(
	`u∆ikñy
(
æí
 % 4 != 0))

73 
îr‹_msg
 = "de_len % 4 != 0";

74 i‡(
	`u∆ikñy
(
æí
 < 
	`PMFS_DIR_REC_LEN
(
de
->
«me_Àn
)))

75 
îr‹_msg
 = "de_len isÅoo small forÇame_len";

76 i‡(
	`u∆ikñy
((((
u8
 *)
de
 - 
ba£
Ë+ 
æí
 > 
dú
->
i_sb
->
s_blocksize
)))

77 
îr‹_msg
 = "directoryÉntryácross blocks";

79 i‡(
	`u∆ikñy
(
îr‹_msg
 !
NULL
)) {

80 
	`pmfs_dbg
("badÉntry in directory #%lu: %s - "

82 
dú
->
i_öo
, 
îr‹_msg
, 
off£t
,

83 ()
	`À64_to_˝u
(
de
->
öo
), 
æí
,

84 
de
->
«me_Àn
);

87  
îr‹_msg
 =
NULL
 ? 1 : 0;

88 
	}
}

93 
	$pmfs_£¨ch_dúblock
(
u8
 *
blk_ba£
, 
öode
 *
dú
, 
q°r
 *
chûd
,

94 
off£t
,

95 
pmfs_dúíåy
 **
ªs_dú
,

96 
pmfs_dúíåy
 **
¥ev_dú
)

98 
pmfs_dúíåy
 *
de
;

99 
pmfs_dúíåy
 *
pde
 = 
NULL
;

100 *
dlimô
;

101 
de_Àn
;

102 c⁄° *
«me
 = 
chûd
->name;

103 
«mñí
 = 
chûd
->
Àn
;

105 
de
 = (
pmfs_dúíåy
 *)
blk_ba£
;

106 
dlimô
 = 
blk_ba£
 + 
dú
->
i_sb
->
s_blocksize
;

107 (*)
de
 < 
dlimô
) {

111 i‡((*)
de
 + 
«mñí
 <
dlimô
 &&

112 
	`pmfs_m©ch
(
«mñí
, 
«me
, 
de
)) {

114 i‡(!
	`pmfs_check_dú_íåy
("pmfs_inode_by_name",

115 
dú
, 
de
, 
blk_ba£
, 
off£t
))

117 *
ªs_dú
 = 
de
;

118 i‡(
¥ev_dú
)

119 *
¥ev_dú
 = 
pde
;

123 
de_Àn
 = 
	`À16_to_˝u
(
de
->de_len);

124 i‡(
de_Àn
 <= 0)

126 
off£t
 +
de_Àn
;

127 
pde
 = 
de
;

128 
de
 = (
pmfs_dúíåy
 *)((*)dê+ 
de_Àn
);

131 
	}
}

133 
öo_t
 
	$pmfs_öode_by_«me
(
öode
 *
dú
, 
q°r
 *
íåy
,

134 
pmfs_dúíåy
 **
ªs_íåy
)

136 
pmfs_öode
 *
pi
;

137 
öo_t
 
i_no
 = 0;

138 
«mñí
, 
nblocks
, 
i
;

139 
u8
 *
blk_ba£
;

140 c⁄° 
u8
 *
«me
 = 
íåy
->name;

141 
su≥r_block
 *
sb
 = 
dú
->
i_sb
;

142 
block
, 
°¨t
;

143 
pmfs_öode_öfo
 *
si
 = 
	`PMFS_I
(
dú
);

145 
pi
 = 
	`pmfs_gë_öode
(
sb
, 
dú
->
i_öo
);

147 
«mñí
 = 
íåy
->
Àn
;

148 i‡(
«mñí
 > 
PMFS_NAME_LEN
)

150 i‡((
«mñí
 <2Ë&& (
«me
[0] == '.') &&

151 (
«me
[1] == '.' ||Çame[1] == 0)) {

155 
block
 = 
°¨t
 = 0;

156 
nblocks
 = 1;

157 
ª°¨t
;

159 
nblocks
 = 
dú
->
i_size
 >> dú->
i_sb
->
s_blocksize_bôs
;

160 
°¨t
 = 
si
->
i_dú_°¨t_lookup
;

161 i‡(
°¨t
 >
nblocks
)

162 
°¨t
 = 0;

163 
block
 = 
°¨t
;

164 
ª°¨t
:

166 
blk_ba£
 =

167 
	`pmfs_gë_block
(
sb
, 
	`pmfs_föd_d©a_block
(
dú
, 
block
));

168 i‡(!
blk_ba£
)

169 
d⁄e
;

170 
i
 = 
	`pmfs_£¨ch_dúblock
(
blk_ba£
, 
dú
, 
íåy
,

171 
block
 << 
sb
->
s_blocksize_bôs
,

172 
ªs_íåy
, 
NULL
);

173 i‡(
i
 == 1) {

174 
si
->
i_dú_°¨t_lookup
 = 
block
;

175 
i_no
 = 
	`À64_to_˝u
((*
ªs_íåy
)->
öo
);

176 
d⁄e
;

178 i‡(
i
 < 0)

179 
d⁄e
;

181 i‡(++
block
 >
nblocks
)

182 
block
 = 0;

183 } 
block
 !
°¨t
);

188 
block
 = 
nblocks
;

189 
nblocks
 = 
dú
->
i_size
 >> 
sb
->
s_blocksize_bôs
;

190 i‡(
block
 < 
nblocks
) {

191 
°¨t
 = 0;

192 
ª°¨t
;

194 
d⁄e
:

195  
i_no
;

196 
	}
}

198 
díåy
 *
	$pmfs_lookup
(
öode
 *
dú
, 
díåy
 *dentry,

199 
Êags
)

201 
öode
 *öodê
NULL
;

202 
pmfs_dúíåy
 *
de
;

203 
öo_t
 
öo
;

205 i‡(
díåy
->
d_«me
.
Àn
 > 
PMFS_NAME_LEN
)

206  
	`ERR_PTR
(-
ENAMETOOLONG
);

208 
öo
 = 
	`pmfs_öode_by_«me
(
dú
, &
díåy
->
d_«me
, &
de
);

209 i‡(
öo
) {

210 
öode
 = 
	`pmfs_igë
(
dú
->
i_sb
, 
öo
);

211 i‡(
öode
 =
	`ERR_PTR
(-
ESTALE
)) {

212 
	`pmfs_îr
(
dú
->
i_sb
, 
__func__
,

214 ()
öo
);

215  
	`ERR_PTR
(-
EIO
);

219  
	`d_•li˚_Æüs
(
öode
, 
díåy
);

220 
	}
}

232 
	$pmfs_¸óã
(
m¡_idm≠
 *
idm≠
, 
öode
 *
dú
,

233 
díåy
 *díåy, 
umode_t
 
mode
, 
boﬁ
 
ex˛
)

235 
öode
 *öodê
NULL
;

236 
îr
 = 
	`PTR_ERR
(
öode
);

237 
su≥r_block
 *
sb
 = 
dú
->
i_sb
;

238 
pmfs_å™ß˘i⁄_t
 *
å™s
;

239 
timög_t
 
¸óã_time
;

241 
	`PMFS_START_TIMING
(
¸óã_t
, 
¸óã_time
);

245 
å™s
 = 
	`pmfs_√w_å™ß˘i⁄
(
sb
, 
MAX_INODE_LENTRIES
 * 2 +

246 
MAX_DIRENTRY_LENTRIES
);

247 i‡(
	`IS_ERR
(
å™s
)) {

248 
îr
 = 
	`PTR_ERR
(
å™s
);

249 
out
;

252 
öode
 = 
	`pmfs_√w_öode
(
å™s
, 
dú
, 
mode
, &
díåy
->
d_«me
);

253 i‡(
	`IS_ERR
(
öode
))

254 
out_îr
;

255 
	`pmfs_dbg_vîbo£
("%s: %s, inÿ%lu\n", 
__func__
,

256 
díåy
->
d_«me
.
«me
, 
öode
->
i_öo
);

257 
öode
->
i_›
 = &
pmfs_fûe_öode_›î©i⁄s
;

258 
öode
->
i_m≠pög
->
a_›s
 = &
pmfs_a›s_xù
;

259 
öode
->
i_f›
 = &
pmfs_xù_fûe_›î©i⁄s
;

260 
îr
 = 
	`pmfs_add_n⁄dú
(
å™s
, 
dú
, 
díåy
, 
öode
);

261 i‡(
îr
)

262 
out_îr
;

263 
	`pmfs_commô_å™ß˘i⁄
(
sb
, 
å™s
);

264 
out
:

265 
	`PMFS_END_TIMING
(
¸óã_t
, 
¸óã_time
);

266  
îr
;

267 
out_îr
:

268 
	`pmfs_ab‹t_å™ß˘i⁄
(
sb
, 
å™s
);

269  
îr
;

270 
	}
}

274 
	$pmfs_mknod
(
m¡_idm≠
 *
idm≠
, 
öode
 *
dú
,

275 
díåy
 *díåy, 
umode_t
 
mode
, 
dev_t
 
rdev
)

277 
öode
 *öodê
NULL
;

278 
îr
 = 
	`PTR_ERR
(
öode
);

279 
pmfs_å™ß˘i⁄_t
 *
å™s
;

280 
su≥r_block
 *
sb
 = 
dú
->
i_sb
;

281 
pmfs_öode
 *
pi
;

286 
å™s
 = 
	`pmfs_√w_å™ß˘i⁄
(
sb
, 
MAX_INODE_LENTRIES
 * 2 +

287 
MAX_DIRENTRY_LENTRIES
);

288 i‡(
	`IS_ERR
(
å™s
)) {

289 
îr
 = 
	`PTR_ERR
(
å™s
);

290 
out
;

293 
öode
 = 
	`pmfs_√w_öode
(
å™s
, 
dú
, 
mode
, &
díåy
->
d_«me
);

294 i‡(
	`IS_ERR
(
öode
))

295 
out_îr
;

296 
	`öô_•ecül_öode
(
öode
, 
mode
, 
rdev
);

297 
öode
->
i_›
 = &
pmfs_•ecül_öode_›î©i⁄s
;

299 
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öode
->
i_öo
);

300 i‡(
	`S_ISCHR
(
öode
->
i_mode
Ë|| 
	`S_ISBLK
(inode->i_mode))

301 
pi
->
dev
.
rdev
 = 
	`˝u_to_À32
(
öode
->
i_rdev
);

302 
îr
 = 
	`pmfs_add_n⁄dú
(
å™s
, 
dú
, 
díåy
, 
öode
);

303 i‡(
îr
)

304 
out_îr
;

305 
	`pmfs_commô_å™ß˘i⁄
(
sb
, 
å™s
);

306 
out
:

307  
îr
;

308 
out_îr
:

309 
	`pmfs_ab‹t_å™ß˘i⁄
(
sb
, 
å™s
);

310  
îr
;

311 
	}
}

315 
	$pmfs_symlök
(
m¡_idm≠
 *
idm≠
, 
öode
 *
dú
,

316 
díåy
 *díåy, c⁄° *
sym«me
)

318 
su≥r_block
 *
sb
 = 
dú
->
i_sb
;

319 
îr
 = -
ENAMETOOLONG
;

320 
Àn
 = 
	`°æí
(
sym«me
);

321 
öode
 *inode;

322 
pmfs_å™ß˘i⁄_t
 *
å™s
;

323 
pmfs_öode
 *
pi
;

325 i‡(
Àn
 + 1 > 
sb
->
s_blocksize
)

326 
out
;

331 
å™s
 = 
	`pmfs_√w_å™ß˘i⁄
(
sb
, 
MAX_INODE_LENTRIES
 * 2 +

332 
MAX_DIRENTRY_LENTRIES
);

333 i‡(
	`IS_ERR
(
å™s
)) {

334 
îr
 = 
	`PTR_ERR
(
å™s
);

335 
out
;

338 
öode
 = 
	`pmfs_√w_öode
(
å™s
, 
dú
, 
S_IFLNK
|
S_IRWXUGO
, &
díåy
->
d_«me
);

339 
îr
 = 
	`PTR_ERR
(
öode
);

340 i‡(
	`IS_ERR
(
öode
)) {

341 
	`pmfs_ab‹t_å™ß˘i⁄
(
sb
, 
å™s
);

342 
out
;

345 
öode
->
i_›
 = &
pmfs_symlök_öode_›î©i⁄s
;

346 
öode
->
i_m≠pög
->
a_›s
 = &
pmfs_a›s_xù
;

348 
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öode
->
i_öo
);

349 
îr
 = 
	`pmfs_block_symlök
(
öode
, 
sym«me
, 
Àn
);

350 i‡(
îr
)

351 
out_Áû
;

353 
öode
->
i_size
 = 
Àn
;

354 
	`pmfs_upd©e_isize
(
öode
, 
pi
);

356 
îr
 = 
	`pmfs_add_n⁄dú
(
å™s
, 
dú
, 
díåy
, 
öode
);

357 i‡(
îr
) {

358 
	`pmfs_ab‹t_å™ß˘i⁄
(
sb
, 
å™s
);

359 
out
;

362 
	`pmfs_commô_å™ß˘i⁄
(
sb
, 
å™s
);

363 
out
:

364  
îr
;

366 
out_Áû
:

367 
	`pmfs_dec_cou¡
(
öode
, 
pi
);

368 
	`u∆ock_√w_öode
(
öode
);

369 
	`ùut
(
öode
);

370 
	`pmfs_ab‹t_å™ß˘i⁄
(
sb
, 
å™s
);

371 
out
;

372 
	}
}

374 
	$pmfs_lök
(
díåy
 *
de°_díåy
, 
öode
 *
dú
,

375 
díåy
 *dentry)

377 
öode
 *öodê
de°_díåy
->
d_öode
;

378 
îr
 = -
ENOMEM
;

379 
pmfs_å™ß˘i⁄_t
 *
å™s
;

380 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

381 
pmfs_öode
 *
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öode
->
i_öo
);

383 i‡(
öode
->
i_∆ök
 >
PMFS_LINK_MAX
)

384  -
EMLINK
;

386 
å™s
 = 
	`pmfs_√w_å™ß˘i⁄
(
sb
, 
MAX_INODE_LENTRIES
 * 2 +

387 
MAX_DIRENTRY_LENTRIES
);

388 i‡(
	`IS_ERR
(
å™s
)) {

389 
îr
 = 
	`PTR_ERR
(
å™s
);

390 
out
;

394 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
pi
, 
MAX_DATA_PER_LENTRY
, 
LE_DATA
);

396 
	`ihﬁd
(
öode
);

398 
îr
 = 
	`pmfs_add_íåy
(
å™s
, 
díåy
, 
öode
);

399 i‡(!
îr
) {

401 
	`öode_£t_˘ime_cuºít
(
öode
);

402 
	`öc_∆ök
(
öode
);

404 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

406 
pi
->
i_˘ime
 = 
	`˝u_to_À32
(
	`öode_gë_˘ime_£c
(
öode
));

408 
pi
->
i_löks_cou¡
 = 
	`˝u_to_À16
(
öode
->
i_∆ök
);

409 
	`pmfs_memlock_öode
(
sb
, 
pi
);

411 
	`d_ö°™tüã
(
díåy
, 
öode
);

412 
	`pmfs_commô_å™ß˘i⁄
(
sb
, 
å™s
);

414 
	`ùut
(
öode
);

415 
	`pmfs_ab‹t_å™ß˘i⁄
(
sb
, 
å™s
);

417 
out
:

418  
îr
;

419 
	}
}

421 
	$pmfs_u∆ök
(
öode
 *
dú
, 
díåy
 *dentry)

423 
öode
 *öodê
díåy
->
d_öode
;

424 
ªtvÆ
 = -
ENOMEM
;

425 
pmfs_å™ß˘i⁄_t
 *
å™s
;

426 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

427 
pmfs_öode
 *
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öode
->
i_öo
);

428 
timög_t
 
u∆ök_time
;

430 
	`PMFS_START_TIMING
(
u∆ök_t
, 
u∆ök_time
);

432 
å™s
 = 
	`pmfs_√w_å™ß˘i⁄
(
sb
, 
MAX_INODE_LENTRIES
 * 2 +

433 
MAX_DIRENTRY_LENTRIES
);

434 i‡(
	`IS_ERR
(
å™s
)) {

435 
ªtvÆ
 = 
	`PTR_ERR
(
å™s
);

436 
out
;

438 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
pi
, 
MAX_DATA_PER_LENTRY
, 
LE_DATA
);

440 
	`pmfs_dbg_vîbo£
("%s: %s, inÿ%lu\n", 
__func__
,

441 
díåy
->
d_«me
.
«me
, 
öode
->
i_öo
);

442 
ªtvÆ
 = 
	`pmfs_ªmove_íåy
(
å™s
, 
díåy
, 
öode
);

443 i‡(
ªtvÆ
)

444 
íd_u∆ök
;

446 i‡(
öode
->
i_∆ök
 == 1)

447 
	`pmfs_åunˇã_add
(
öode
, inode->
i_size
);

449 
	`öode_£t_˘ime_to_ts
(
öode
, 
	`öode_gë_˘ime
(
dú
));

451 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

452 i‡(
öode
->
i_∆ök
) {

453 
	`dr›_∆ök
(
öode
);

454 
pi
->
i_löks_cou¡
 = 
	`˝u_to_À16
(
öode
->
i_∆ök
);

457 
pi
->
i_˘ime
 = 
	`˝u_to_À32
(
	`öode_gë_˘ime_£c
(
öode
));

458 
	`pmfs_memlock_öode
(
sb
, 
pi
);

460 
	`pmfs_commô_å™ß˘i⁄
(
sb
, 
å™s
);

461 
	`PMFS_END_TIMING
(
u∆ök_t
, 
u∆ök_time
);

463 
íd_u∆ök
:

464 
	`pmfs_ab‹t_å™ß˘i⁄
(
sb
, 
å™s
);

465 
out
:

466  
ªtvÆ
;

467 
	}
}

471 
	$pmfs_mkdú
(
m¡_idm≠
 *
idm≠
, 
öode
 *
dú
,

472 
díåy
 *díåy, 
umode_t
 
mode
)

474 
öode
 *inode;

475 
pmfs_öode
 *
pi
, *
pidú
;

476 
pmfs_dúíåy
 *
de
 = 
NULL
;

477 
su≥r_block
 *
sb
 = 
dú
->
i_sb
;

478 
pmfs_å™ß˘i⁄_t
 *
å™s
;

479 
îr
 = -
EMLINK
;

480 *
blk_ba£
;

482 i‡(
dú
->
i_∆ök
 >
PMFS_LINK_MAX
)

483 
out
;

485 
å™s
 = 
	`pmfs_√w_å™ß˘i⁄
(
sb
, 
MAX_INODE_LENTRIES
 * 2 +

486 
MAX_DIRENTRY_LENTRIES
);

487 i‡(
	`IS_ERR
(
å™s
)) {

488 
îr
 = 
	`PTR_ERR
(
å™s
);

489 
out
;

492 
öode
 = 
	`pmfs_√w_öode
(
å™s
, 
dú
, 
S_IFDIR
 | 
mode
, &
díåy
->
d_«me
);

493 
îr
 = 
	`PTR_ERR
(
öode
);

494 i‡(
	`IS_ERR
(
öode
)) {

495 
	`pmfs_ab‹t_å™ß˘i⁄
(
sb
, 
å™s
);

496 
out
;

499 
	`pmfs_dbg_vîbo£
("%s: %s, inÿ%lu\n", 
__func__
,

500 
díåy
->
d_«me
.
«me
, 
öode
->
i_öo
);

501 
öode
->
i_›
 = &
pmfs_dú_öode_›î©i⁄s
;

502 
öode
->
i_f›
 = &
pmfs_dú_›î©i⁄s
;

503 
öode
->
i_m≠pög
->
a_›s
 = &
pmfs_a›s_xù
;

508 
îr
 = 
	`pmfs_Æloc_blocks
(
NULL
, 
öode
, 0, 1, 
Ál£
);

509 i‡(
îr
)

510 
out_˛ór_öode
;

511 
öode
->
i_size
 = 
sb
->
s_blocksize
;

513 
blk_ba£
 = 
	`pmfs_gë_block
(
sb
, 
	`pmfs_föd_d©a_block
(
öode
, 0));

514 
de
 = (
pmfs_dúíåy
 *)
blk_ba£
;

515 
	`pmfs_memu∆ock_ønge
(
sb
, 
blk_ba£
, sb->
s_blocksize
);

516 
de
->
öo
 = 
	`˝u_to_À64
(
öode
->
i_öo
);

517 
de
->
«me_Àn
 = 1;

518 
de
->
de_Àn
 = 
	`˝u_to_À16
(
	`PMFS_DIR_REC_LEN
(de->
«me_Àn
));

519 
	`°r˝y
(
de
->
«me
, ".");

521 
de
 = 
	`pmfs_√xt_íåy
(de);

522 
de
->
öo
 = 
	`˝u_to_À64
(
dú
->
i_öo
);

523 
de
->
de_Àn
 = 
	`˝u_to_À16
(
sb
->
s_blocksize
 - 
	`PMFS_DIR_REC_LEN
(1));

524 
de
->
«me_Àn
 = 2;

525 
	`°r˝y
(
de
->
«me
, "..");

527 
	`pmfs_memlock_ønge
(
sb
, 
blk_ba£
, sb->
s_blocksize
);

530 
	`pmfs_Êush_buf„r
(
blk_ba£
, 
	`PMFS_DIR_REC_LEN
(1) +

531 
	`PMFS_DIR_REC_LEN
(2), 
åue
);

533 
	`£t_∆ök
(
öode
, 2);

535 
îr
 = 
	`pmfs_add_íåy
(
å™s
, 
díåy
, 
öode
);

536 i‡(
îr
) {

537 
	`pmfs_dbg_vîbo£
("failedÅoádd dirÉntry\n");

538 
out_˛ór_öode
;

540 
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öode
->
i_öo
);

541 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

542 
pi
->
i_löks_cou¡
 = 
	`˝u_to_À16
(
öode
->
i_∆ök
);

543 
pi
->
i_size
 = 
	`˝u_to_À64
(
öode
->i_size);

544 
	`pmfs_memlock_öode
(
sb
, 
pi
);

546 
pidú
 = 
	`pmfs_gë_öode
(
sb
, 
dú
->
i_öo
);

547 
	`pmfs_öc_cou¡
(
dú
, 
pidú
);

548 
	`d_ö°™tüã
(
díåy
, 
öode
);

549 
	`u∆ock_√w_öode
(
öode
);

551 
	`pmfs_commô_å™ß˘i⁄
(
sb
, 
å™s
);

553 
out
:

554  
îr
;

556 
out_˛ór_öode
:

557 
	`˛ór_∆ök
(
öode
);

558 
	`u∆ock_√w_öode
(
öode
);

559 
	`ùut
(
öode
);

560 
	`pmfs_ab‹t_å™ß˘i⁄
(
sb
, 
å™s
);

561 
out
;

562 
	}
}

567 
	$pmfs_em±y_dú
(
öode
 *inode)

569 
off£t
;

570 
pmfs_dúíåy
 *
de
, *
de1
;

571 
su≥r_block
 *
sb
;

572 *
blk_ba£
;

573 
îr
 = 0;

575 
sb
 = 
öode
->
i_sb
;

576 i‡(
öode
->
i_size
 < 
	`PMFS_DIR_REC_LEN
(1) + PMFS_DIR_REC_LEN(2)) {

577 
	`pmfs_dbg
("bad directory (dir #%lu)-no data block",

578 
öode
->
i_öo
);

582 
blk_ba£
 = 
	`pmfs_gë_block
(
sb
, 
	`pmfs_föd_d©a_block
(
öode
, 0));

583 i‡(!
blk_ba£
) {

584 
	`pmfs_dbg
("bad directory (dir #%lu)-no data block",

585 
öode
->
i_öo
);

589 
de
 = (
pmfs_dúíåy
 *)
blk_ba£
;

590 
de1
 = 
	`pmfs_√xt_íåy
(
de
);

592 i‡(
	`À64_to_˝u
(
de
->
öo
Ë!
öode
->
i_öo
 || !À64_to_˝u(
de1
->ino) ||

593 
	`°rcmp
(".", 
de
->
«me
Ë|| såcmp("..", 
de1
->name)) {

594 
	`pmfs_dbg
("bad directory (dir #%lu) -Ço `.' or `..'",

595 
öode
->
i_öo
);

598 
off£t
 = 
	`À16_to_˝u
(
de
->
de_Àn
Ë+Üe16_to_˝u(
de1
->de_len);

599 
de
 = 
	`pmfs_√xt_íåy
(
de1
);

600 
off£t
 < 
öode
->
i_size
) {

601 i‡(!
blk_ba£
 || (*)
de
 >= (*)(blk_base +

602 
sb
->
s_blocksize
)) {

603 
îr
 = 0;

604 
blk_ba£
 = 
	`pmfs_gë_block
(
sb
, 
	`pmfs_föd_d©a_block
(

605 
öode
, 
off£t
 >> 
sb
->
s_blocksize_bôs
));

606 i‡(!
blk_ba£
) {

607 
	`pmfs_dbg
("Error:Ñeading dir #%lu offset %lu\n",

608 
öode
->
i_öo
, 
off£t
);

609 
off£t
 +
sb
->
s_blocksize
;

612 
de
 = (
pmfs_dúíåy
 *)
blk_ba£
;

614 i‡(!
	`pmfs_check_dú_íåy
("em±y_dú", 
öode
, 
de
, 
blk_ba£
,

615 
off£t
)) {

616 
de
 = (
pmfs_dúíåy
 *)(
blk_ba£
 +

617 
sb
->
s_blocksize
);

618 
off£t
 = (off£à| (
sb
->
s_blocksize
 - 1)) + 1;

621 i‡(
	`À64_to_˝u
(
de
->
öo
))

623 
off£t
 +
	`À16_to_˝u
(
de
->
de_Àn
);

624 
de
 = 
	`pmfs_√xt_íåy
(de);

627 
	}
}

629 
	$pmfs_rmdú
(
öode
 *
dú
, 
díåy
 *dentry)

631 
öode
 *öodê
díåy
->
d_öode
;

632 
pmfs_dúíåy
 *
de
;

633 
pmfs_å™ß˘i⁄_t
 *
å™s
;

634 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

635 
pmfs_öode
 *
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öode
->
i_öo
), *
pidú
;

636 
îr
 = -
ENOTEMPTY
;

638 i‡(!
öode
)

639  -
ENOENT
;

641 
	`pmfs_dbg_vîbo£
("%s: %s, inÿ%lu\n", 
__func__
,

642 
díåy
->
d_«me
.
«me
, 
öode
->
i_öo
);

643 i‡(
	`pmfs_öode_by_«me
(
dú
, &
díåy
->
d_«me
, &
de
) == 0)

644  -
ENOENT
;

646 i‡(!
	`pmfs_em±y_dú
(
öode
))

647  
îr
;

649 i‡(
öode
->
i_∆ök
 != 2)

650 
	`pmfs_dbg
("em±y dúe˘‹y ha†∆ök!=2 (%d)", 
öode
->
i_∆ök
);

652 
å™s
 = 
	`pmfs_√w_å™ß˘i⁄
(
sb
, 
MAX_INODE_LENTRIES
 * 2 +

653 
MAX_DIRENTRY_LENTRIES
);

654 i‡(
	`IS_ERR
(
å™s
)) {

655 
îr
 = 
	`PTR_ERR
(
å™s
);

656  
îr
;

658 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
pi
, 
MAX_DATA_PER_LENTRY
, 
LE_DATA
);

660 
îr
 = 
	`pmfs_ªmove_íåy
(
å™s
, 
díåy
, 
öode
);

661 i‡(
îr
)

662 
íd_rmdú
;

665 
	`˛ór_∆ök
(
öode
);

667 
	`öode_£t_˘ime_to_ts
(
öode
, 
	`öode_gë_˘ime
(
dú
));

669 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

670 
pi
->
i_löks_cou¡
 = 
	`˝u_to_À16
(
öode
->
i_∆ök
);

672 
pi
->
i_˘ime
 = 
	`˝u_to_À32
(
	`öode_gë_˘ime_£c
(
öode
));

673 
	`pmfs_memlock_öode
(
sb
, 
pi
);

679 
	`pmfs_åunˇã_add
(
öode
, inode->
i_size
);

681 
pidú
 = 
	`pmfs_gë_öode
(
sb
, 
dú
->
i_öo
);

682 
	`pmfs_dec_cou¡
(
dú
, 
pidú
);

684 
	`pmfs_commô_å™ß˘i⁄
(
sb
, 
å™s
);

685  
îr
;

686 
íd_rmdú
:

687 
	`pmfs_ab‹t_å™ß˘i⁄
(
sb
, 
å™s
);

688  
îr
;

689 
	}
}

695 
	$pmfs_ª«me
(
m¡_idm≠
 *
idm≠
, 
öode
 *
ﬁd_dú
,

696 
díåy
 *
ﬁd_díåy
,

697 
öode
 *
√w_dú
, 
díåy
 *
√w_díåy
,

698 
Êags
)

700 
öode
 *
ﬁd_öode
 = 
ﬁd_díåy
->
d_öode
;

701 
öode
 *
√w_öode
 = 
√w_díåy
->
d_öode
;

702 
pmfs_dúíåy
 *
√w_de
 = 
NULL
, *
ﬁd_de
 = NULL;

703 
pmfs_å™ß˘i⁄_t
 *
å™s
;

704 
su≥r_block
 *
sb
 = 
ﬁd_öode
->
i_sb
;

705 
pmfs_öode
 *
pi
, *
√w_pidú
, *
ﬁd_pidú
;

706 
îr
 = -
ENOENT
;

708 
	`pmfs_öode_by_«me
(
√w_dú
, &
√w_díåy
->
d_«me
, &
√w_de
);

709 
	`pmfs_öode_by_«me
(
ﬁd_dú
, &
ﬁd_díåy
->
d_«me
, &
ﬁd_de
);

711 
	`pmfs_dbg_vîbo£
("%s:Ñíamê%†tÿ%s\n", 
__func__
,

712 
ﬁd_díåy
->
d_«me
.
«me
, 
√w_díåy
->d_name.name);

713 
å™s
 = 
	`pmfs_√w_å™ß˘i⁄
(
sb
, 
MAX_INODE_LENTRIES
 * 4 +

714 
MAX_DIRENTRY_LENTRIES
 * 2);

715 i‡(
	`IS_ERR
(
å™s
)) {

716  
	`PTR_ERR
(
å™s
);

719 i‡(
√w_öode
) {

720 
îr
 = -
ENOTEMPTY
;

721 i‡(
	`S_ISDIR
(
ﬁd_öode
->
i_mode
Ë&& !
	`pmfs_em±y_dú
(
√w_öode
))

722 
out
;

724 i‡(
	`S_ISDIR
(
ﬁd_öode
->
i_mode
)) {

725 
îr
 = -
EMLINK
;

726 i‡(
√w_dú
->
i_∆ök
 >
PMFS_LINK_MAX
)

727 
out
;

731 
√w_pidú
 = 
	`pmfs_gë_öode
(
sb
, 
√w_dú
->
i_öo
);

733 
pi
 = 
	`pmfs_gë_öode
(
sb
, 
ﬁd_öode
->
i_öo
);

734 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
pi
, 
MAX_DATA_PER_LENTRY
, 
LE_DATA
);

736 i‡(!
√w_de
) {

738 
îr
 = 
	`pmfs_add_íåy
(
å™s
, 
√w_díåy
, 
ﬁd_öode
);

739 i‡(
îr
)

740 
out
;

742 
	`pmfs_add_logíåy
(
sb
, 
å™s
, &
√w_de
->
öo
, (new_de->ino),

743 
LE_DATA
);

745 
	`pmfs_memu∆ock_ønge
(
sb
, 
√w_de
, sb->
s_blocksize
);

746 
√w_de
->
öo
 = 
	`˝u_to_À64
(
ﬁd_öode
->
i_öo
);

748 
	`pmfs_memlock_ønge
(
sb
, 
√w_de
, sb->
s_blocksize
);

750 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
√w_pidú
, 
MAX_DATA_PER_LENTRY
,

751 
LE_DATA
);

754 
√w_dú
->
i_mtime
 = 
	`öode_£t_˘ime_cuºít
(new_dir);

755 
	`pmfs_upd©e_time
(
√w_dú
, 
√w_pidú
);

759 
îr
 = 
	`pmfs_ªmove_íåy
(
å™s
, 
ﬁd_díåy
, 
ﬁd_öode
);

760 i‡(
îr
)

761 
out
;

763 i‡(
√w_öode
) {

764 
pi
 = 
	`pmfs_gë_öode
(
sb
, 
√w_öode
->
i_öo
);

765 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
pi
, 
MAX_DATA_PER_LENTRY
, 
LE_DATA
);

767 
	`öode_£t_˘ime_cuºít
(
√w_öode
);

769 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

770 i‡(
	`S_ISDIR
(
ﬁd_öode
->
i_mode
)) {

771 i‡(
√w_öode
->
i_∆ök
)

772 
	`dr›_∆ök
(
√w_öode
);

775 
pi
->
i_˘ime
 = 
	`˝u_to_À32
(
	`öode_gë_˘ime_£c
(
√w_öode
));

776 i‡(
√w_öode
->
i_∆ök
)

777 
	`dr›_∆ök
(
√w_öode
);

778 
pi
->
i_löks_cou¡
 = 
	`˝u_to_À16
(
√w_öode
->
i_∆ök
);

779 
	`pmfs_memlock_öode
(
sb
, 
pi
);

781 i‡(!
√w_öode
->
i_∆ök
)

782 
	`pmfs_åunˇã_add
(
√w_öode
,Çew_öode->
i_size
);

784 i‡(
	`S_ISDIR
(
ﬁd_öode
->
i_mode
)) {

785 
	`pmfs_öc_cou¡
(
√w_dú
, 
√w_pidú
);

786 
ﬁd_pidú
 = 
	`pmfs_gë_öode
(
sb
, 
ﬁd_dú
->
i_öo
);

787 
	`pmfs_dec_cou¡
(
ﬁd_dú
, 
ﬁd_pidú
);

791 
	`pmfs_commô_å™ß˘i⁄
(
sb
, 
å™s
);

793 
out
:

794 
	`pmfs_ab‹t_å™ß˘i⁄
(
sb
, 
å™s
);

795  
îr
;

796 
	}
}

798 
díåy
 *
	$pmfs_gë_∑ª¡
(
díåy
 *
chûd
)

800 
öode
 *inode;

801 
q°r
 
dŸdŸ
 = 
	`QSTR_INIT
("..", 2);

802 
pmfs_dúíåy
 *
de
 = 
NULL
;

803 
öo_t
 
öo
;

805 
	`pmfs_öode_by_«me
(
chûd
->
d_öode
, &
dŸdŸ
, &
de
);

806 i‡(!
de
)

807  
	`ERR_PTR
(-
ENOENT
);

808 
öo
 = 
	`À64_to_˝u
(
de
->ino);

810 i‡(
öo
)

811 
öode
 = 
	`pmfs_igë
(
chûd
->
d_öode
->
i_sb
, 
öo
);

813  
	`ERR_PTR
(-
ENOENT
);

815  
	`d_obèö_Æüs
(
öode
);

816 
	}
}

818 c⁄° 
öode_›î©i⁄s
 
	gpmfs_dú_öode_›î©i⁄s
 = {

819 .
¸óã
 = 
pmfs_¸óã
,

820 .
	glookup
 = 
pmfs_lookup
,

821 .
	glök
 = 
pmfs_lök
,

822 .
	gu∆ök
 = 
pmfs_u∆ök
,

823 .
	gsymlök
 = 
pmfs_symlök
,

824 .
	gmkdú
 = 
pmfs_mkdú
,

825 .
	grmdú
 = 
pmfs_rmdú
,

826 .
	gmknod
 = 
pmfs_mknod
,

827 .
	gª«me
 = 
pmfs_ª«me
,

828 .
	g£èâr
 = 
pmfs_nŸify_ch™ge
,

829 .
	ggë_a˛
 = 
NULL
,

832 c⁄° 
öode_›î©i⁄s
 
	gpmfs_•ecül_öode_›î©i⁄s
 = {

833 .
£èâr
 = 
pmfs_nŸify_ch™ge
,

834 .
	ggë_a˛
 = 
NULL
,

	@pmfs.h

15 #i‚de‡
__PMFS_H


16 
	#__PMFS_H


	)

18 
	~<löux/¸c16.h
>

19 
	~<löux/muãx.h
>

20 
	~<löux/∑gem≠.h
>

21 
	~<löux/rcupd©e.h
>

22 
	~<löux/ty≥s.h
>

23 
	~<löux/uio.h
>

24 
	~<löux/vîsi⁄.h
>

25 
	~<löux/p‚_t.h
>

27 
	~"pmfs_def.h
"

28 
	~"jou∫Æ.h
"

30 
	#PAGE_SHIFT_2M
 21

	)

31 
	#PAGE_SHIFT_1G
 30

	)

33 
	#PMFS_ASSERT
(
x
) \

34 i‡(!(
x
)) { \

35 
	`¥ötk
(
KERN_WARNING
 "assertion failed %s:%d: %s\n", \

36 
__FILE__
, 
__LINE__
, #x); \

37 }

	)

42 #ifde‡
¥_fmt


43 #unde‡
¥_fmt


44 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

48 
	#pmfs_dbg
(
s
, 
¨gs
 ...Ë
	`¥_öfo
(s, ##árgs)

	)

49 
	#pmfs_dbg1
(
s
, 
¨gs
 ...)

	)

50 
	#pmfs_îr
(
sb
, 
s
, 
¨gs
 ...Ë
	`pmfs_îr‹_mng
(sb, s, ##árgs)

	)

51 
	#pmfs_w¨n
(
s
, 
¨gs
 ...Ë
	`¥_w¨n
(s, ##árgs)

	)

52 
	#pmfs_öfo
(
s
, 
¨gs
 ...Ë
	`¥_öfo
(s, ##árgs)

	)

54 
pmfs_dbgmask
;

55 
	#PMFS_DBGMASK_MMAPHUGE
 (0x00000001)

	)

56 
	#PMFS_DBGMASK_MMAP4K
 (0x00000002)

	)

57 
	#PMFS_DBGMASK_MMAPVERBOSE
 (0x00000004)

	)

58 
	#PMFS_DBGMASK_MMAPVVERBOSE
 (0x00000008)

	)

59 
	#PMFS_DBGMASK_VERBOSE
 (0x00000010)

	)

60 
	#PMFS_DBGMASK_TRANSACTION
 (0x00000020)

	)

62 
	#pmfs_dbg_mm≠huge
(
s
, 
¨gs
 ...) \

63 ((
pmfs_dbgmask
 & 
PMFS_DBGMASK_MMAPHUGE
Ë? 
	`pmfs_dbg
(
s
, 
¨gs
Ë: 0)

	)

64 
	#pmfs_dbg_mm≠4k
(
s
, 
¨gs
 ...) \

65 ((
pmfs_dbgmask
 & 
PMFS_DBGMASK_MMAP4K
Ë? 
	`pmfs_dbg
(
s
, 
¨gs
Ë: 0)

	)

66 
	#pmfs_dbg_mm≠v
(
s
, 
¨gs
 ...) \

67 ((
pmfs_dbgmask
 & 
PMFS_DBGMASK_MMAPVERBOSE
Ë? 
	`pmfs_dbg
(
s
, 
¨gs
Ë: 0)

	)

68 
	#pmfs_dbg_mm≠vv
(
s
, 
¨gs
 ...) \

69 ((
pmfs_dbgmask
 & 
PMFS_DBGMASK_MMAPVVERBOSE
Ë? 
	`pmfs_dbg
(
s
, 
¨gs
Ë: 0)

	)

71 
	#pmfs_dbg_vîbo£
(
s
, 
¨gs
 ...) \

72 ((
pmfs_dbgmask
 & 
PMFS_DBGMASK_VERBOSE
Ë? 
	`pmfs_dbg
(
s
, ##
¨gs
Ë: 0)

	)

73 
	#pmfs_dbg_å™s
(
s
, 
¨gs
 ...) \

74 ((
pmfs_dbgmask
 & 
PMFS_DBGMASK_TRANSACTION
Ë? 
	`pmfs_dbg
(
s
, ##
¨gs
Ë: 0)

	)

76 
	#pmfs_£t_bô
 
__ã°_™d_£t_bô_À


	)

77 
	#pmfs_˛ór_bô
 
__ã°_™d_˛ór_bô_À


	)

78 
	#pmfs_föd_√xt_zîo_bô
 
föd_√xt_zîo_bô_À


	)

80 
	#˛ór_›t
(
o
, 
›t
Ë(ÿ&~
PMFS_MOUNT_
 ## o±)

	)

81 
	#£t_›t
(
o
, 
›t
Ë(ÿ|
PMFS_MOUNT_
 ## o±)

	)

82 
	#ã°_›t
(
sb
, 
›t
Ë(
	`PMFS_SB
(sb)->
s_mou¡_›t
 & 
PMFS_MOUNT_
 ## o±)

	)

84 
	#PMFS_LARGE_INODE_TABLE_SIZE
 (0x200000)

	)

86 
	#PMFS_LARGE_INODE_TABLE_THREASHOLD
 (0x20000000)

	)

92 
	#PMFS_EOFBLOCKS_FL
 0x20000000

	)

94 
	#PMFS_FL_INHERITED
 (
FS_SECRM_FL
 | 
FS_UNRM_FL
 | 
FS_COMPR_FL
 | \

95 
FS_SYNC_FL
 | 
FS_NODUMP_FL
 | 
FS_NOATIME_FL
 | \

96 
FS_COMPRBLK_FL
 | 
FS_NOCOMP_FL
 | 
FS_JOURNAL_DATA_FL
 | \

97 
FS_NOTAIL_FL
 | 
FS_DIRSYNC_FL
)

	)

99 
	#PMFS_REG_FLMASK
 (~(
FS_DIRSYNC_FL
 | 
FS_TOPDIR_FL
))

	)

101 
	#PMFS_OTHER_FLMASK
 (
FS_NODUMP_FL
 | 
FS_NOATIME_FL
)

	)

102 
	#PMFS_FL_USER_VISIBLE
 (
FS_FL_USER_VISIBLE
 | 
PMFS_EOFBLOCKS_FL
)

	)

104 
	#INODES_PER_BLOCK
(
bt
Ë(1 << (
blk_ty≥_to_shi·_pmfs
[bt] - 
PMFS_INODE_BITS
))

	)

106 
blk_ty≥_to_shi·_pmfs
[
PMFS_BLOCK_TYPE_MAX
];

107 
blk_ty≥_to_size_pmfs
[
PMFS_BLOCK_TYPE_MAX
];

110 
	etimög_ˇãg‹y
 {

111 
	m¸óã_t
,

112 
	mu∆ök_t
,

113 
	mªaddú_t
,

114 
	mxù_ªad_t
,

115 
	mxù_wrôe_t
,

116 
	mxù_wrôe_Á°_t
,

117 
	möã∫Æ_wrôe_t
,

118 
	mmem˝y_r_t
,

119 
	mmem˝y_w_t
,

120 
	mÆloc_blocks_t
,

121 
	m√w_å™s_t
,

122 
	madd_log_t
,

123 
	mcommô_å™s_t
,

124 
	mmm≠_Áu…_t
,

125 
	mfsync_t
,

126 
	m‰ì_åì_t
,

127 
	mevi˘_öode_t
,

128 
	mªcovîy_t
,

129 
	mTIMING_NUM
,

132 c⁄° *
Timög°rög_pmfs
[
TIMING_NUM
];

134 
Timög°©s_pmfs
[
TIMING_NUM
];

135 
DECLARE_PER_CPU
([
TIMING_NUM
], 
Timög°©s_≥r˝u_pmfs
);

137 
Cou¡°©s_pmfs
[
TIMING_NUM
];

138 
DECLARE_PER_CPU
([
TIMING_NUM
], 
Cou¡°©s_≥r˝u_pmfs
);

140 
mósuª_timög_pmfs
;

141 
suµ‹t_˛wb_pmfs
;

143 
©omic64_t
 
fsync_∑ges
;

145 
ölöe
 
	$pmfs_timög_°¨t
() {

146 
øx
, 
rdx
;

147 
__asm__
 
	`__vﬁ©ûe__
("rdts˝\n" : "˜"(
øx
), "=d"(
rdx
) : : "%ecx");

148  (
rdx
 << 32Ë+ 
øx
;

149 
	}
}

151 
ölöe
 
	$pmfs_timög_íd
() {

152 
øx
, 
rdx
;

153 
__asm__
 
	`__vﬁ©ûe__
("rdts˝\n" : "˜"(
øx
), "=d"(
rdx
) : : "%ecx");

154  (
rdx
 << 32Ë+ 
øx
;

155 
	}
}

157 
	ttimög_t
;

159 
	#PMFS_START_TIMING
(
«me
, 
°¨t
) \

161 i‡(
mósuª_timög_pmfs
) { \

162 
	`b¨rõr
(); \

163 
°¨t
 = 
	`pmfs_timög_°¨t
(); \

164 
	`b¨rõr
(); \

166 } 0)

	)

168 
	#PMFS_END_TIMING
(
«me
, 
°¨t
) \

170 i‡(
mósuª_timög_pmfs
) { \

171 
timög_t
 
íd
; \

172 
	`b¨rõr
(); \

173 
íd
 = 
	`pmfs_timög_íd
(); \

174 
	`b¨rõr
(); \

175 
	`__this_˝u_add
(
Timög°©s_≥r˝u_pmfs
[
«me
], (
íd
 - 
°¨t
)); \

177 
	`__this_˝u_add
(
Cou¡°©s_≥r˝u_pmfs
[
«me
], 1); \

178 } 0)

	)

180 
pmfs_îr‹_mng
(
su≥r_block
 *
sb
, c⁄° *
fmt
, ...);

183 
pmfs_mm≠
(
fûe
 *fûe, 
vm_¨ó_°ru˘
 *
vma
);

186 
pmfs_£tup_blocknode_m≠
(
su≥r_block
 *
sb
);

187 
pmfs_blocknode
 *
pmfs_Æloc_blocknode
(
su≥r_block
 *
sb
);

188 
pmfs_‰ì_blocknode
(
su≥r_block
 *
sb
, 
pmfs_blocknode
 *
bnode
);

189 
pmfs_öô_blockm≠
(
su≥r_block
 *
sb
,

190 
öô_u£d_size
);

191 
pmfs_‰ì_block
(
su≥r_block
 *
sb
, 
blockƒ
,

192 
bty≥
);

193 
__pmfs_‰ì_block
(
su≥r_block
 *
sb
, 
blockƒ
,

194 
bty≥
, 
pmfs_blocknode
 **
°¨t_höt
);

195 
pmfs_√w_block
(
su≥r_block
 *
sb
, *
blockƒ
,

196 
bty≥
, 
zîo
);

197 
pmfs_cou¡_‰ì_blocks
(
su≥r_block
 *
sb
);

200 
pmfs_add_íåy
(
pmfs_å™ß˘i⁄_t
 *
å™s
,

201 
díåy
 *díåy, 
öode
 *inode);

202 
pmfs_ªmove_íåy
(
pmfs_å™ß˘i⁄_t
 *
å™s
,

203 
díåy
 *díåy, 
öode
 *inode);

206 
díåy
 *
pmfs_gë_∑ª¡
(díåy *
chûd
);

209 
pmfs_‰ì_öode_subåì
(
su≥r_block
 *
sb
,

210 
__À64
 
roŸ
, 
u32
 
height
, u32 
bty≥
, 
œ°_blockƒ
);

211 
__pmfs_Æloc_blocks
(
pmfs_å™ß˘i⁄_t
 *
å™s
,

212 
su≥r_block
 *
sb
, 
pmfs_öode
 *
pi
,

213 
fûe_blockƒ
, 
num
, 
boﬁ
 
zîo
);

214 
pmfs_öô_öode_èbÀ
(
su≥r_block
 *
sb
);

215 
pmfs_Æloc_blocks
(
pmfs_å™ß˘i⁄_t
 *
å™s
, 
öode
 *inode,

216 
fûe_blockƒ
, 
num
, 
boﬁ
 
zîo
);

217 
u64
 
pmfs_föd_d©a_block
(
öode
 *inode,

218 
fûe_blockƒ
);

219 
pmfs_£t_blocksize_höt
(
su≥r_block
 *
sb
, 
pmfs_öode
 *
pi
,

220 
loff_t
 
√w_size
);

221 
pmfs_£tsize
(
öode
 *öode, 
loff_t
 
√wsize
);

223 
öode
 *
pmfs_igë
(
su≥r_block
 *
sb
, 
öo
);

224 
pmfs_put_öode
(
öode
 *inode);

225 
pmfs_evi˘_öode
(
öode
 *inode);

226 
öode
 *
pmfs_√w_öode
(
pmfs_å™ß˘i⁄_t
 *
å™s
,

227 
öode
 *
dú
, 
umode_t
 
mode
, c⁄° 
q°r
 *qstr);

228 
pmfs_upd©e_isize
(
öode
 *öode, 
pmfs_öode
 *
pi
);

229 
pmfs_upd©e_∆ök
(
öode
 *öode, 
pmfs_öode
 *
pi
);

230 
pmfs_upd©e_time
(
öode
 *öode, 
pmfs_öode
 *
pi
);

231 
pmfs_wrôe_öode
(
öode
 *öode, 
wrôeback_c⁄åﬁ
 *
wbc
);

232 
pmfs_dúty_öode
(
öode
 *öode, 
Êags
);

237 
pmfs_nŸify_ch™ge
(
m¡_idm≠
 *
idm≠
,

238 
díåy
 *díåy, 
üâr
 *
©å
);

239 
pmfs_gë©å
(
m¡_idm≠
 *
idm≠
, c⁄° 
∑th
 *path,

240 
k°©
 *
°©
, 
u32
 
ªque°_mask
, 
quîy_Êags
);

241 
pmfs_£t_öode_Êags
(
öode
 *öode, 
pmfs_öode
 *
pi
);

242 
pmfs_gë_öode_Êags
(
öode
 *öode, 
pmfs_öode
 *
pi
);

243 
pmfs_föd_ªgi⁄
(
öode
 *öode, 
loff_t
 *
off£t
,

244 
hﬁe
);

245 
pmfs_åunˇã_dñ
(
öode
 *inode);

246 
pmfs_åunˇã_add
(
öode
 *öode, 
u64
 
åunˇã_size
);

249 
pmfs_io˘l
(
fûe
 *
fûp
, 
cmd
, 
¨g
);

250 #ifde‡
CONFIG_COMPAT


251 
pmfs_com∑t_io˘l
(
fûe
 *fûe, 
cmd
,

252 
¨g
);

256 #ifde‡
CONFIG_PMFS_TEST


257 
pmfs_su≥r_block
 *
gë_pmfs_su≥r
();

259 
__pmfs_‰ì_blocknode
(
pmfs_blocknode
 *
bnode
);

260 
su≥r_block
 *
pmfs_ªad_su≥r
(su≥r_block *
sb
, *
d©a
,

261 
sûít
);

262 
pmfs_°©fs
(
díåy
 *
d
, 
k°©fs
 *
buf
);

263 
pmfs_ªmou¡
(
su≥r_block
 *
sb
, *
Êags
, *
d©a
);

266 
pmfs_block_symlök
(
öode
 *öode, c⁄° *
sym«me
,

267 
Àn
);

272 
ölöe
 
__À32
 
	$pmfs_mask_Êags
(
umode_t
 
mode
, 
__À32
 
Êags
)

274 
Êags
 &
	`˝u_to_À32
(
PMFS_FL_INHERITED
);

275 i‡(
	`S_ISDIR
(
mode
))

276  
Êags
;

277 i‡(
	`S_ISREG
(
mode
))

278  
Êags
 & 
	`˝u_to_À32
(
PMFS_REG_FLMASK
);

280  
Êags
 & 
	`˝u_to_À32
(
PMFS_OTHER_FLMASK
);

281 
	}
}

283 
ölöe
 
	$pmfs_ˇlc_checksum
(
u8
 *
d©a
, 
n
)

285 
u16
 
¸c
 = 0;

287 
¸c
 = 
	`¸c16
(~0, (
__u8
 *)
d©a
 + (
__À16
), 
n
 - (__le16));

288 i‡(*((
__À16
 *)
d©a
Ë=
	`˝u_to_À16
(
¸c
))

292 
	}
}

294 
	spmfs_blocknode_lowhigh
 {

295 
__À64
 
	mblock_low
;

296 
__À64
 
	mblock_high
;

299 
	spmfs_blocknode
 {

300 
li°_hód
 
	mlök
;

301 
	mblock_low
;

302 
	mblock_high
;

305 
	spmfs_öode_öfo
 {

306 
__u32
 
	mi_dú_°¨t_lookup
;

307 
li°_hód
 
	mi_åunˇãd
;

308 
öode
 
	mvfs_öode
;

314 
	spmfs_sb_öfo
 {

319 
block_devi˚
 *
	ms_bdev
;

320 
phys_addr_t
 
	mphys_addr
;

321 *
	mvút_addr
;

322 
li°_hód
 
	mblock_öu£_hód
;

323 
	mblock_°¨t
;

324 
	mblock_íd
;

325 
	mnum_‰ì_blocks
;

326 
muãx
 
	ms_lock
;

333 
	mpmfs_backög_›ti⁄
;

336 
	mbpi
;

337 
	mnum_öodes
;

338 
	mblocksize
;

339 
	möôsize
;

340 
	ms_mou¡_›t
;

341 
kuid_t
 
	muid
;

342 
kgid_t
 
	mgid
;

343 
umode_t
 
	mmode
;

344 
©omic_t
 
	m√xt_gíî©i⁄
;

346 
muãx
 
	möode_èbÀ_muãx
;

347 
	ms_öodes_cou¡
;

348 
	ms_‰ì_öodes_cou¡
;

349 
	ms_öodes_u£d_cou¡
;

350 
	ms_‰ì_öode_höt
;

352 
	mnum_blocknode_Æloˇãd
;

355 
uöt32_t
 
	m√xt_å™ß˘i⁄_id
;

356 
uöt32_t
 
	mjsize
;

357 *
	mjou∫Æ_ba£_addr
;

358 
muãx
 
	mjou∫Æ_muãx
;

359 
èsk_°ru˘
 *
	mlog_˛ó√r_thªad
;

360 
waô_queue_hód_t
 
	mlog_˛ó√r_waô
;

361 
boﬁ
 
	mªdo_log
;

364 
li°_hód
 
	ms_åunˇã
;

365 
muãx
 
	ms_åunˇã_lock
;

368 
ölöe
 
pmfs_sb_öfo
 *
	$PMFS_SB
(
su≥r_block
 *
sb
)

370  
sb
->
s_fs_öfo
;

371 
	}
}

373 
ölöe
 
pmfs_öode_öfo
 *
	$PMFS_I
(
öode
 *inode)

375  
	`c⁄èöî_of
(
öode
, 
pmfs_öode_öfo
, 
vfs_öode
);

376 
	}
}

380 
ölöe
 
pmfs_su≥r_block
 *
	$pmfs_gë_su≥r
(
su≥r_block
 *
sb
)

382 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

384  (
pmfs_su≥r_block
 *)
sbi
->
vút_addr
;

385 
	}
}

387 
ölöe
 
pmfs_jou∫Æ_t
 *
	$pmfs_gë_jou∫Æ
(
su≥r_block
 *
sb
)

389 
pmfs_su≥r_block
 *
ps
 = 
	`pmfs_gë_su≥r
(
sb
);

391  (
pmfs_jou∫Æ_t
 *)((*)
ps
 +

392 
	`À64_to_˝u
(
ps
->
s_jou∫Æ_off£t
));

393 
	}
}

395 
ölöe
 
pmfs_öode
 *
	$pmfs_gë_öode_èbÀ
(
su≥r_block
 *
sb
)

397 
pmfs_su≥r_block
 *
ps
 = 
	`pmfs_gë_su≥r
(
sb
);

399  (
pmfs_öode
 *)((*)
ps
 +

400 
	`À64_to_˝u
(
ps
->
s_öode_èbÀ_off£t
));

401 
	}
}

403 
ölöe
 
pmfs_su≥r_block
 *
	$pmfs_gë_ªdund_su≥r
(
su≥r_block
 *
sb
)

405 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

407  (
pmfs_su≥r_block
 *)(
sbi
->
vút_addr
 + 
PMFS_SB_SIZE
);

408 
	}
}

412 
ölöe
 *
	$pmfs_gë_block
(
su≥r_block
 *
sb
, 
u64
 
block
)

414 
pmfs_su≥r_block
 *
ps
 = 
	`pmfs_gë_su≥r
(
sb
);

416  
block
 ? ((*)
ps
 + blockË: 
NULL
;

417 
	}
}

420 
ölöe
 
	$pmfs_mem˝y_©omic
 (*
d°
, c⁄° *
§c
, 
u8
 
size
)

422 
size
) {

424 vﬁ©ûê
u8
 *
daddr
 = 
d°
;

425 c⁄° 
u8
 *
ßddr
 = 
§c
;

426 *
daddr
 = *
ßddr
;

430 vﬁ©ûê
__À16
 *
daddr
 = 
d°
;

431 c⁄° 
u16
 *
ßddr
 = 
§c
;

432 *
daddr
 = 
	`˝u_to_À16
(*
ßddr
);

436 vﬁ©ûê
__À32
 *
daddr
 = 
d°
;

437 c⁄° 
u32
 *
ßddr
 = 
§c
;

438 *
daddr
 = 
	`˝u_to_À32
(*
ßddr
);

442 vﬁ©ûê
__À64
 *
daddr
 = 
d°
;

443 c⁄° 
u64
 *
ßddr
 = 
§c
;

444 *
daddr
 = 
	`˝u_to_À64
(*
ßddr
);

448 
	`pmfs_dbg
("îr‹: mem˝y_©omi¯ˇŒed wôh %d byãs\n", 
size
);

451 
	}
}

453 
ölöe
 
	$pmfs_upd©e_time_™d_size
(
öode
 *inode,

454 
pmfs_öode
 *
pi
)

456 
__À32
 
w‹ds
[2];

457 
__À64
 
√w_pi_size
 = 
	`˝u_to_À64
(
	`i_size_ªad
(
öode
));

458 
	`DEFINE_SPINLOCK
(
pmfs_lock
);

463 
w‹ds
[0] = 
	`˝u_to_À32
(
	`öode_gë_˘ime_£c
(
öode
));

464 
w‹ds
[1] = 
	`˝u_to_À32
(
öode
->
i_mtime
.
tv_£c
);

471 
	`•ö_lock
(&
pmfs_lock
);

472 i‡(
	`cmpxchg64_loˇl
(&
pi
->
i_size
,Öi->i_size, 
√w_pi_size
)) {

473 
	`¥_öfo
("%s(): cmpxchg64_loˇl(Ë⁄ i_sizêsuc˚ss\n", 
__func__
);

474 i‡(
	`cmpxchg64_loˇl
((
u64
 *)&
pi
->
i_˘ime
, *(u64 *)&pi->i_˘ime, *(u64 *)
w‹ds
)) {

475 
	`¥_öfo
("%s(): cmpxchg64_loˇl(Ë⁄ i_˘imêsuc˚ss\n", 
__func__
);

477 
	`¥_öfo
("%s(): cmpxchg64_loˇl(Ë⁄ i_˘imêÁûed\n", 
__func__
);

480 
	`¥_öfo
("%s(): cmpxchg64_loˇl(Ë⁄ i_sizêÁûed\n", 
__func__
);

482 
	`•ö_u∆ock
(&
pmfs_lock
);

484 
	}
}

487 
ölöe
 
	$mem£t_¡
(*
de°
, 
uöt32_t
 
dw‹d
, 
size_t
 
Àngth
)

489 
uöt64_t
 
dummy1
, 
dummy2
;

490 
uöt64_t
 
qw‹d
 = ((uöt64_t)
dw‹d
 << 32) | dword;

492 
asm
 volatile ("movl %%edx,%%ecx\n"

520 : "=D"(
dummy1
), "=d" (
dummy2
Ë: "D" (
de°
), "a" (
qw‹d
), "d" (
Àngth
) : "memory", "rcx");

521 
	}
}

523 
ölöe
 
u64
 
	$__pmfs_föd_d©a_block
(
su≥r_block
 *
sb
,

524 
pmfs_öode
 *
pi
, 
blockƒ
)

526 
__À64
 *
Àvñ_±r
;

527 
u64
 
bp
 = 0;

528 
u32
 
height
, 
bô_shi·
;

529 
idx
;

531 
height
 = 
pi
->height;

532 
bp
 = 
	`À64_to_˝u
(
pi
->
roŸ
);

534 
height
 > 0) {

535 
Àvñ_±r
 = 
	`pmfs_gë_block
(
sb
, 
bp
);

536 
bô_shi·
 = (
height
 - 1Ë* 
META_BLK_SHIFT
;

537 
idx
 = 
blockƒ
 >> 
bô_shi·
;

538 
bp
 = 
	`À64_to_˝u
(
Àvñ_±r
[
idx
]);

539 i‡(
bp
 == 0)

541 
blockƒ
 = blockƒ & ((1 << 
bô_shi·
) - 1);

542 
height
--;

544  
bp
;

545 
	}
}

547 
ölöe
 
	$pmfs_öode_blk_shi·
 (
pmfs_öode
 *
pi
)

549  
blk_ty≥_to_shi·_pmfs
[
pi
->
i_blk_ty≥
];

550 
	}
}

552 
ölöe
 
uöt32_t
 
	$pmfs_öode_blk_size
 (
pmfs_öode
 *
pi
)

554  
blk_ty≥_to_size_pmfs
[
pi
->
i_blk_ty≥
];

555 
	}
}

559 
ölöe
 
pmfs_öode
 *
	$pmfs_gë_öode
(
su≥r_block
 *
sb
,

560 
u64
 
öo
)

562 
pmfs_su≥r_block
 *
ps
 = 
	`pmfs_gë_su≥r
(
sb
);

563 
pmfs_öode
 *
öode_èbÀ
 = 
	`pmfs_gë_öode_èbÀ
(
sb
);

564 
u64
 
bp
, 
block
, 
öo_off£t
;

566 i‡(
öo
 == 0)

567  
NULL
;

569 
block
 = 
öo
 >> 
	`pmfs_öode_blk_shi·
(
öode_èbÀ
);

570 
bp
 = 
	`__pmfs_föd_d©a_block
(
sb
, 
öode_èbÀ
, 
block
);

572 i‡(
bp
 == 0)

573  
NULL
;

574 
öo_off£t
 = (
öo
 & (
	`pmfs_öode_blk_size
(
öode_èbÀ
) - 1));

575  (
pmfs_öode
 *)((*)
ps
 + 
bp
 + 
öo_off£t
);

576 
	}
}

578 
ölöe
 
u64


579 
	$pmfs_gë_addr_off
(
pmfs_sb_öfo
 *
sbi
, *
addr
)

581 
	`PMFS_ASSERT
((
addr
 >
sbi
->
vút_addr
) &&

582 (
addr
 < (
sbi
->
vút_addr
 + sbi->
öôsize
)));

583  (
u64
)(
addr
 - 
sbi
->
vút_addr
);

584 
	}
}

586 
ölöe
 
u64


587 
	$pmfs_gë_block_off
(
su≥r_block
 *
sb
, 
blockƒ
,

588 
bty≥
)

590  (
u64
)
blockƒ
 << 
PAGE_SHIFT
;

591 
	}
}

593 
ölöe
 

594 
	$pmfs_gë_numblocks
(
bty≥
)

596 
num_blocks
;

598 i‡(
bty≥
 =
PMFS_BLOCK_TYPE_4K
) {

599 
num_blocks
 = 1;

600 } i‡(
bty≥
 =
PMFS_BLOCK_TYPE_2M
) {

601 
num_blocks
 = 512;

604 
num_blocks
 = 0x40000;

606  
num_blocks
;

607 
	}
}

609 
ölöe
 

610 
	$pmfs_gë_blockƒ
(
su≥r_block
 *
sb
, 
u64
 
block
, 
bty≥
)

612  
block
 >> 
PAGE_SHIFT
;

613 
	}
}

615 
ölöe
 
	$pmfs_gë_p‚
(
su≥r_block
 *
sb
, 
u64
 
block
)

617  (
	`PMFS_SB
(
sb
)->
phys_addr
 + 
block
Ë>> 
PAGE_SHIFT
;

618 
	}
}

620 
ölöe
 
	$pmfs_is_mou¡ög
(
su≥r_block
 *
sb
)

622 
pmfs_sb_öfo
 *
sbi
 = (pmfs_sb_öfÿ*)
sb
->
s_fs_öfo
;

623  
sbi
->
s_mou¡_›t
 & 
PMFS_MOUNT_MOUNTING
;

624 
	}
}

626 
ölöe
 
pmfs_öode_åunˇã_ôem
 * 
	$pmfs_gë_åunˇã_ôem
 (

627 
su≥r_block
 *
sb
, 
u64
 
öo
)

629 
pmfs_öode
 *
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öo
);

630  (
pmfs_öode_åunˇã_ôem
 *)(
pi
 + 1);

631 
	}
}

633 
ölöe
 
pmfs_öode_åunˇã_ôem
 * 
	$pmfs_gë_åunˇã_li°_hód
 (

634 
su≥r_block
 *
sb
)

636 
pmfs_öode
 *
pi
 = 
	`pmfs_gë_öode_èbÀ
(
sb
);

637  (
pmfs_öode_åunˇã_ôem
 *)(
pi
 + 1);

638 
	}
}

640 
ölöe
 
	$check_eof_blocks
(
su≥r_block
 *
sb
,

641 
pmfs_öode
 *
pi
, 
loff_t
 
size
)

643 i‡((
pi
->
i_Êags
 & 
	`˝u_to_À32
(
PMFS_EOFBLOCKS_FL
)) &&

644 (
size
 + 
sb
->
s_blocksize
Ë> (
	`À64_to_˝u
(
pi
->
i_blocks
)

645 << 
sb
->
s_blocksize_bôs
))

646 
pi
->
i_Êags
 &
	`˝u_to_À32
(~
PMFS_EOFBLOCKS_FL
);

647 
	}
}

649 
	~"w¥Ÿe˘.h
"

656 c⁄° 
fûe_›î©i⁄s
 
pmfs_dú_›î©i⁄s
;

659 c⁄° 
öode_›î©i⁄s
 
pmfs_fûe_öode_›î©i⁄s
;

660 c⁄° 
fûe_›î©i⁄s
 
pmfs_xù_fûe_›î©i⁄s
;

661 
pmfs_fsync
(
fûe
 *fûe, 
loff_t
 
°¨t
,Üoff_à
íd
, 
d©async
);

664 c⁄° 
addªss_•a˚_›î©i⁄s
 
pmfs_a›s_xù
;

667 
pmfs_ßve_blocknode_m≠pögs
(
su≥r_block
 *
sb
);

670 c⁄° 
öode_›î©i⁄s
 
pmfs_dú_öode_›î©i⁄s
;

671 c⁄° 
öode_›î©i⁄s
 
pmfs_•ecül_öode_›î©i⁄s
;

674 c⁄° 
öode_›î©i⁄s
 
pmfs_symlök_öode_›î©i⁄s
;

676 
pmfs_check_öãgrôy
(
su≥r_block
 *
sb
,

677 
pmfs_su≥r_block
 *
su≥r
);

678 *
pmfs_i‹em≠
(
su≥r_block
 *
sb
, 
phys_addr_t
 
phys_addr
,

679 
ssize_t
 
size
);

681 
pmfs_check_dú_íåy
(c⁄° *
fun˘i⁄
, 
öode
 *
dú
,

682 
pmfs_dúíåy
 *
de
, 
u8
 *
ba£
,

683 
off£t
);

685 
ölöe
 
	$pmfs_m©ch
(
Àn
, c⁄° *c⁄° 
«me
,

686 
pmfs_dúíåy
 *
de
)

688 i‡(
Àn
 =
de
->
«me_Àn
 && de->
öo
 && !
	`memcmp
(de->
«me
,Çame,Üen))

691 
	}
}

693 
pmfs_£¨ch_dúblock
(
u8
 *
blk_ba£
, 
öode
 *
dú
, 
q°r
 *
chûd
,

694 
off£t
,

695 
pmfs_dúíåy
 **
ªs_dú
,

696 
pmfs_dúíåy
 **
¥ev_dú
);

699 
	#PMFS_PRINT_TIMING
 0xBCD00010

	)

700 
	#PMFS_CLEAR_STATS
 0xBCD00011

	)

701 
pmfs_¥öt_timög_°©s
();

702 
pmfs_˛ór_°©s
();

	@pmfs.mod.c

1 
	~<löux/moduÀ.h
>

2 
	#INCLUDE_VERMAGIC


	)

3 
	~<löux/buûd-ß….h
>

4 
	~<löux/ñ‚Ÿe-…o.h
>

5 
	~<löux/exp‹t-öã∫Æ.h
>

6 
	~<löux/vîmagic.h
>

7 
	~<löux/compûî.h
>

9 #ifde‡
CONFIG_UNWINDER_ORC


10 
	~<asm/‹c_hódî.h
>

11 
	gORC_HEADER
;

14 
	gBUILD_SALT
;

15 
	gBUILD_LTO_INFO
;

17 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

18 
MODULE_INFO
(
«me
, 
KBUILD_MODNAME
);

20 
__visibÀ
 
moduÀ
 
__this_moduÀ


21 
__£˘i⁄
(".gnu.linkonce.this_module") = {

22 .
«me
 = 
KBUILD_MODNAME
,

23 .
	göô
 = 
öô_moduÀ
,

24 #ifde‡
CONFIG_MODULE_UNLOAD


25 .
	gexô
 = 
˛ónup_moduÀ
,

27 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

30 #ifde‡
CONFIG_RETPOLINE


31 
MODULE_INFO
(
ªçﬁöe
, "Y");

36 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

37 
__u£d
 
__£˘i⁄
("__versions") = {

167 
MODULE_INFO
(
dïíds
, "");

170 
MODULE_INFO
(
§cvîsi⁄
, "8606C3B9AB31CE8037DFBF5");

	@pmfs_def.h

17 #i‚de‡
_LINUX_PMFS_DEF_H


18 
	#_LINUX_PMFS_DEF_H


	)

20 
	~<löux/ty≥s.h
>

21 
	~<löux/magic.h
>

23 
	#PMFS_SUPER_MAGIC
 0xEFFC

	)

32 
	#PMFS_MOUNT_PROTECT
 0x000001

	)

33 
	#PMFS_MOUNT_XATTR_USER
 0x000002

	)

34 
	#PMFS_MOUNT_POSIX_ACL
 0x000004

	)

35 
	#PMFS_MOUNT_XIP
 0x000008

	)

36 
	#PMFS_MOUNT_ERRORS_CONT
 0x000010

	)

37 
	#PMFS_MOUNT_ERRORS_RO
 0x000020

	)

38 
	#PMFS_MOUNT_ERRORS_PANIC
 0x000040

	)

39 
	#PMFS_MOUNT_HUGEMMAP
 0x000080

	)

40 
	#PMFS_MOUNT_HUGEIOREMAP
 0x000100

	)

41 
	#PMFS_MOUNT_PROTECT_OLD
 0x000200

	)

42 
	#PMFS_MOUNT_FORMAT
 0x000400

	)

43 
	#PMFS_MOUNT_MOUNTING
 0x000800

	)

48 
	#PMFS_LINK_MAX
 32000

	)

50 
	#PMFS_DEF_BLOCK_SIZE_4K
 4096

	)

52 
	#PMFS_INODE_SIZE
 128

	)

53 
	#PMFS_INODE_BITS
 7

	)

55 
	#PMFS_NAME_LEN
 255

	)

59 
	spmfs_dúíåy
 {

60 
__À64
 
	möo
;

61 
__À16
 
	mde_Àn
;

62 
u8
 
	m«me_Àn
;

63 
u8
 
	mfûe_ty≥
;

64 
	m«me
[
PMFS_NAME_LEN
];

67 
	#PMFS_DIR_PAD
 4

	)

68 
	#PMFS_DIR_ROUND
 (
PMFS_DIR_PAD
 - 1)

	)

69 
	#PMFS_DIR_REC_LEN
(
«me_Àn
Ë((“ame_ÀnË+ 12 + 
PMFS_DIR_ROUND
) & \

70 ~
PMFS_DIR_ROUND
)

	)

73 
	#PMFS_BLOCK_TYPE_4K
 0

	)

74 
	#PMFS_BLOCK_TYPE_2M
 1

	)

75 
	#PMFS_BLOCK_TYPE_1G
 2

	)

76 
	#PMFS_BLOCK_TYPE_MAX
 3

	)

78 
	#META_BLK_SHIFT
 9

	)

85 
	#PMFS_DEFAULT_BLOCK_TYPE
 
PMFS_BLOCK_TYPE_4K


	)

98 
	spmfs_öode
 {

100 
__À16
 
	mi_rsvd
;

101 
u8
 
	mheight
;

102 
u8
 
	mi_blk_ty≥
;

103 
__À32
 
	mi_Êags
;

104 
__À64
 
	mroŸ
;

105 
__À64
 
	mi_size
;

106 
__À32
 
	mi_˘ime
;

107 
__À32
 
	mi_mtime
;

108 
__À32
 
	mi_dtime
;

109 
__À16
 
	mi_mode
;

110 
__À16
 
	mi_löks_cou¡
;

111 
__À64
 
	mi_blocks
;

114 
__À64
 
	mi_x©å
;

115 
__À32
 
	mi_uid
;

116 
__À32
 
	mi_gid
;

117 
__À32
 
	mi_gíî©i⁄
;

118 
__À32
 
	mi_©ime
;

121 
__À32
 
	mrdev
;

122 } 
	mdev
;

123 
__À32
 
	m∑ddög
;

130 
	spmfs_öode_åunˇã_ôem
 {

131 
__À64
 
	mi_åunˇãsize
;

132 
__À64
 
	mi_√xt_åunˇã
;

141 
	#PMFS_SB_SIZE
 512

	)

143 
	spmfs_jou∫Æ
 {

144 
__À64
 
	mba£
;

145 
__À32
 
	msize
;

146 
__À32
 
	mhód
;

149 
__À32
 
	mèû
;

150 
__À16
 
	mgí_id
;

151 
__À16
 
	m∑d
;

152 
__À16
 
	mªdo_loggög
;

153 } 
	tpmfs_jou∫Æ_t
;

167 
	spmfs_su≥r_block
 {

170 
__À16
 
	ms_sum
;

171 
__À16
 
	ms_magic
;

172 
__À32
 
	ms_blocksize
;

173 
__À64
 
	ms_size
;

174 
	ms_vﬁume_«me
[16];

176 
__À64
 
	ms_jou∫Æ_off£t
;

178 
__À64
 
	ms_öode_èbÀ_off£t
;

180 
__À64
 
	ms_°¨t_dy«mic
;

185 
__À32
 
	ms_mtime
;

186 
__À32
 
	ms_wtime
;

188 
__À64
 
	ms_num_blocknode_Æloˇãd
;

189 
__À64
 
	ms_num_‰ì_blocks
;

190 
__À32
 
	ms_öodes_cou¡
;

191 
__À32
 
	ms_‰ì_öodes_cou¡
;

192 
__À32
 
	ms_öodes_u£d_cou¡
;

193 
__À32
 
	ms_‰ì_öode_höt
;

196 
	#PMFS_SB_STATIC_SIZE
(
ps
Ë((
u64
)&ps->
s_°¨t_dy«mic
 - (u64Ìs)

	)

199 
	#PMFS_FAST_MOUNT_FIELD_SIZE
 (36)

	)

202 
	#PMFS_ROOT_INO
 (
PMFS_INODE_SIZE
)

	)

203 
	#PMFS_BLOCKNODE_IN0
 (
PMFS_ROOT_INO
 + 
PMFS_INODE_SIZE
)

	)

206 
	#PMFS_FREE_INODE_HINT_START
 (3)

	)

210 
	#CACHELINE_SIZE
 (64)

	)

211 
	#CACHELINE_MASK
 (~(
CACHELINE_SIZE
 - 1))

	)

212 
	#CACHELINE_ALIGN
(
addr
Ë((◊ddr)+
CACHELINE_SIZE
-1Ë& 
CACHELINE_MASK
)

	)

214 
	#X86_FEATURE_PCOMMIT
 ( 9*32+22Ë

	)

215 
	#X86_FEATURE_CLFLUSHOPT
 ( 9*32+23Ë

	)

216 
	#X86_FEATURE_CLWB
 ( 9*32+24Ë

	)

218 
ölöe
 
boﬁ
 
	$¨ch_has_pcommô
()

220  
	`°©ic_˝u_has
(
X86_FEATURE_PCOMMIT
);

221 
	}
}

223 
ölöe
 
boﬁ
 
	$¨ch_has_˛wb
()

225  
	`°©ic_˝u_has
(
X86_FEATURE_CLWB
);

226 
	}
}

228 
suµ‹t_˛wb_pmfs
;

229 
suµ‹t_pcommô
;

231 
	#_mm_˛Êush
(
addr
)\

232 
asm
 vﬁ©ûe("˛Êush %0" : "+m" (*(vﬁ©ûê*)(
addr
)))

	)

233 
	#_mm_˛Êush›t
(
addr
)\

234 
asm
 vﬁ©ûe(".byã 0x66; clÊush %0" : "+m" (*(vﬁ©ûê*)(
addr
)))

	)

235 
	#_mm_˛wb
(
addr
)\

236 
asm
 vﬁ©ûe(".byã 0x66; xßve›à%0" : "+m" (*(vﬁ©ûê*)(
addr
)))

	)

237 
	#_mm_pcommô
()\

238 
asm
 vﬁ©ûe(".byã 0x66, 0x0f, 0x´, 0xf8")

	)

241 
ölöe
 
	$PERSISTENT_MARK
()

244 
	}
}

246 
ölöe
 
	$PERSISTENT_BARRIER
()

248 
asm
 volatile ("sfence\n" : : );

249 i‡(
suµ‹t_pcommô
) {

252 
	}
}

254 
ölöe
 
	$pmfs_Êush_buf„r
(*
buf
, 
uöt32_t
 
Àn
, 
boﬁ
 
„n˚
)

256 
uöt32_t
 
i
;

257 
Àn
 =Üí + (()(
buf
Ë& (
CACHELINE_SIZE
 - 1));

258 i‡(
suµ‹t_˛wb_pmfs
) {

259 
i
 = 0; i < 
Àn
; i +
CACHELINE_SIZE
)

260 
	`_mm_˛wb
(
buf
 + 
i
);

262 
i
 = 0; i < 
Àn
; i +
CACHELINE_SIZE
)

263 
	`_mm_˛Êush
(
buf
 + 
i
);

269 i‡(
„n˚
)

270 
	`PERSISTENT_BARRIER
();

271 
	}
}

273 
	#PMFS_MEMCPY_CHUNK_SIZE
 (8 * 4096)

	)

	@pmfs_stats.c

1 
	~"pmfs.h
"

3 c⁄° *
	gTimög°rög_pmfs
[
TIMING_NUM
] =

25 
	gTimög°©s_pmfs
[
TIMING_NUM
];

26 
DEFINE_PER_CPU
([
TIMING_NUM
], 
Timög°©s_≥r˝u_pmfs
);

27 
	gCou¡°©s_pmfs
[
TIMING_NUM
];

28 
DEFINE_PER_CPU
([
TIMING_NUM
], 
Cou¡°©s_≥r˝u_pmfs
);

30 
©omic64_t
 
	gfsync_∑ges
 = 
ATOMIC_INIT
(0);

32 
	$pmfs_¥öt_IO_°©s
()

34 
	`¥ötk
("=========== PMFS I/O stats ===========\n");

35 
	`¥ötk
("Fsyn¯%ŒdÖages\n", 
	`©omic64_ªad
(&
fsync_∑ges
));

36 
	}
}

38 
	$pmfs_gë_timög_°©s
() {

39 
i
;

40 
˝u
;

42 
i
 = 0; i < 
TIMING_NUM
; i++) {

43 
Timög°©s_pmfs
[
i
] = 0;

44 
Cou¡°©s_pmfs
[
i
] = 0;

45 
	`f‹_óch_possibÀ_˝u
(
˝u
) {

46 
Timög°©s_pmfs
[
i
] +
	`≥r_˝u
(
Timög°©s_≥r˝u_pmfs
[i], 
˝u
);

47 
Cou¡°©s_pmfs
[
i
] +
	`≥r_˝u
(
Cou¡°©s_≥r˝u_pmfs
[i], 
˝u
);

50 
	}
}

52 
	$pmfs_¥öt_timög_°©s
() {

53 
i
;

55 
	`pmfs_gë_timög_°©s
();

57 
	`¥ötk
("======== PMFS kernelÅiming stats ========\n");

58 
i
 = 0; i < 
TIMING_NUM
; i++) {

59 i‡(
mósuª_timög_pmfs
 || 
Timög°©s_pmfs
[
i
]) {

60 
	`¥ötk
("%s: cou¡ %lu,Åimög %lu,ávîagê%lu\n", 
Timög°rög_pmfs
[
i
],

61 
Cou¡°©s_pmfs
[
i
], 
Timög°©s_pmfs
[i],

62 
Cou¡°©s_pmfs
[
i
] ? 
Timög°©s_pmfs
[i] / Countstats_pmfs[i] : 0);

64 
	`¥ötk
("%s: cou¡ %lu\n", 
Timög°rög_pmfs
[
i
], 
Cou¡°©s_pmfs
[i]);

68 
	`pmfs_¥öt_IO_°©s
();

69 
	}
}

71 
	$pmfs_˛ór_°©s
() {

72 
i
;

73 
˝u
;

75 
	`¥ötk
("======== Clear PMFS kernelÅiming stats ========\n");

76 
i
 = 0; i < 
TIMING_NUM
; i++) {

77 
Cou¡°©s_pmfs
[
i
] = 0;

78 
Timög°©s_pmfs
[
i
] = 0;

80 
	`f‹_óch_possibÀ_˝u
(
˝u
) {

81 
	`≥r_˝u
(
Timög°©s_≥r˝u_pmfs
[
i
], 
˝u
) = 0;

82 
	`≥r_˝u
(
Cou¡°©s_≥r˝u_pmfs
[
i
], 
˝u
) = 0;

85 
	}
}

	@pmfs_test.c

15 
	~<löux/moduÀ.h
>

16 
	~<löux/vîsi⁄.h
>

17 
	~<löux/öô.h
>

18 
	~<löux/fs.h
>

19 
	~"pmfs.h
"

21 
__öô
 
	$ã°_pmfs_wrôe
()

23 
pmfs_su≥r_block
 *
psb
;

25 
psb
 = 
	`gë_pmfs_su≥r
();

26 i‡(!
psb
) {

27 
	`¥ötk
(
KERN_ERR


29 
__func__
);

37 
	`¥ötk
("%s: wrôögÅÿkî√»VA %p\n", 
__func__
, 
psb
);

38 
psb
->
s_sum
 = 0;

41 
	}
}

43 
	$ã°_pmfs_wrôe_˛ónup
()

45 
	}
}

48 
MODULE_LICENSE
("GPL");

49 
moduÀ_öô
(
ã°_pmfs_wrôe
);

50 
moduÀ_exô
(
ã°_pmfs_wrôe_˛ónup
);

	@super.c

16 
	~<löux/moduÀ.h
>

17 
	~<löux/°rög.h
>

18 
	~<löux/¶ab.h
>

19 
	~<löux/öô.h
>

20 
	~<löux/∑r£r.h
>

21 
	~<löux/vfs.h
>

22 
	~<löux/uac˚ss.h
>

23 
	~<löux/io.h
>

24 
	~<löux/£q_fûe.h
>

25 
	~<löux/mou¡.h
>

26 
	~<löux/mm.h
>

27 
	~<löux/˘y≥.h
>

28 
	~<löux/bô›s.h
>

29 
	~<löux/magic.h
>

30 
	~<löux/exp‹tfs.h
>

31 
	~<löux/øndom.h
>

32 
	~<löux/¸ed.h
>

33 
	~<löux/backög-dev.h
>

34 
	~<löux/li°.h
>

35 
	~<löux/dax.h
>

36 
	~<u≠i/löux/mou¡.h
>

37 
	~"pmfs.h
"

39 
	gmósuª_timög_pmfs
 = 0;

40 
	gsuµ‹t_˛wb_pmfs
 = 0;

41 
	gsuµ‹t_pcommô_pmfs
 = 0;

43 
moduÀ_∑øm
(
mósuª_timög_pmfs
, , 
S_IRUGO
);

44 
MODULE_PARM_DESC
(
mósuª_timög_pmfs
, "Timing measurement");

46 
su≥r_›î©i⁄s
 
	gpmfs_s›s
;

47 c⁄° 
exp‹t_›î©i⁄s
 
	gpmfs_exp‹t_›s
;

48 
kmem_ˇche
 *
	gpmfs_öode_ˇchï
;

49 
kmem_ˇche
 *
	gpmfs_blocknode_ˇchï
;

50 
kmem_ˇche
 *
	gpmfs_å™ß˘i⁄_ˇchï
;

52 
	gpmfs_dbgmask
 = 0;

54 #ifde‡
CONFIG_PMFS_TEST


55 *
	gfú°_pmfs_su≥r
;

57 
pmfs_su≥r_block
 *
	$gë_pmfs_su≥r
()

59  (
pmfs_su≥r_block
 *)
fú°_pmfs_su≥r
;

60 
	}
}

61 
EXPORT_SYMBOL
(
gë_pmfs_su≥r
);

64 
	$pmfs_îr‹_mng
(
su≥r_block
 *
sb
, c⁄° *
fmt
, ...)

66 
va_li°
 
¨gs
;

68 
	`¥ötk
("pmfsÉrror: ");

69 
	`va_°¨t
(
¨gs
, 
fmt
);

70 
	`v¥ötk
(
fmt
, 
¨gs
);

71 
	`va_íd
(
¨gs
);

73 i‡(
	`ã°_›t
(
sb
, 
ERRORS_PANIC
))

74 
	`∑nic
("pmfs:Öanic fromÖreviousÉrror\n");

75 i‡(
	`ã°_›t
(
sb
, 
ERRORS_RO
)) {

76 
	`¥ötk
(
KERN_CRIT
 "pmfsÉrr:Ñemounting filesystemÑead-only");

77 
sb
->
s_Êags
 |
MS_RDONLY
;

79 
	}
}

81 
	$pmfs_£t_blocksize
(
su≥r_block
 *
sb
, 
size
)

83 
bôs
;

90 
bôs
 = 
	`Ês
(
size
) - 1;

91 
sb
->
s_blocksize_bôs
 = 
bôs
;

92 
sb
->
s_blocksize
 = (1 << 
bôs
);

93 
	}
}

95 
ölöe
 
	$pmfs_has_huge_i‹em≠
(
su≥r_block
 *
sb
)

97 
pmfs_sb_öfo
 *
sbi
 = (pmfs_sb_öfÿ*)
sb
->
s_fs_öfo
;

99  
sbi
->
s_mou¡_›t
 & 
PMFS_MOUNT_HUGEIOREMAP
;

100 
	}
}

102 
	$pmfs_gë_block_öfo
(
su≥r_block
 *
sb
,

103 
pmfs_sb_öfo
 *
sbi
)

105 
dax_devi˚
 *
dax_dev
;

106 *
vút_addr
 = 
NULL
;

107 
p‚_t
 
__p‚_t
;

108 
size
;

110 
u64
 
dax_∑π_off
;

119 
sbi
->
s_bdev
 = 
sb
->s_bdev;

122 
dax_dev
 = 
	`fs_dax_gë_by_bdev
(
sb
->
s_bdev
, &
dax_∑π_off
, 
NULL
, NULL);

123 i‡(!
dax_dev
) {

124 
	`pmfs_îr
(
sb
, "Couldn'tÑetrieve DAX device\n");

125  -
EINVAL
;

128 
size
 = 
	`dax_dúe˘_ac˚ss
(
dax_dev
, 0, 
LONG_MAX
 / 
PAGE_SIZE
,

130 
DAX_ACCESS
, &
vút_addr
, &
__p‚_t
Ë* 
PAGE_SIZE
;

131 i‡(
size
 <= 0) {

132 
	`pmfs_îr
(
sb
, "direct_access failed\n");

133  -
EINVAL
;

136 
sbi
->
vút_addr
 = virt_addr;

137 
sbi
->
phys_addr
 = 
	`p‚_t_to_p‚
(
__p‚_t
Ë<< 
PAGE_SHIFT
;

138 
sbi
->
öôsize
 = 
size
;

141 
	}
}

143 
loff_t
 
	$pmfs_max_size
(
bôs
)

145 
loff_t
 
ªs
;

147 
ªs
 = (1ULL << (3 * 9 + 
bôs
)) - 1;

149 i‡(
ªs
 > 
MAX_LFS_FILESIZE
)

150 
ªs
 = 
MAX_LFS_FILESIZE
;

152 
	`pmfs_dbg_vîbo£
("max fûêsizê%Œu byãs\n", 
ªs
);

153  
ªs
;

154 
	}
}

157 
	mO±_bpi
, 
	mO±_öô
, 
	mO±_jsize
,

158 
	mO±_num_öodes
, 
	mO±_mode
, 
	mO±_uid
,

159 
	mO±_gid
, 
	mO±_blocksize
, 
	mO±_w¥Ÿe˘
, 
	mO±_w¥Ÿe˘ﬁd
,

160 
	mO±_îr_c⁄t
, 
	mO±_îr_∑nic
, 
	mO±_îr_ro
,

161 
	mO±_hugemm≠
, 
	mO±_nohugei‹em≠
, 
	mO±_dbgmask
, 
	mO±_bs
, 
	mO±_îr


164 c⁄° 
m©ch_èbÀ_t
 
	gtokís
 = {

165 { 
O±_bpi
, "bpi=%u" },

166 { 
O±_öô
, "init" },

167 { 
O±_jsize
, "jsize=%s" },

168 { 
O±_num_öodes
,"num_inodes=%u" },

169 { 
O±_mode
, "mode=%o" },

170 { 
O±_uid
, "uid=%u" },

171 { 
O±_gid
, "gid=%u" },

172 { 
O±_w¥Ÿe˘
, "wprotect" },

173 { 
O±_w¥Ÿe˘ﬁd
, "wprotectold" },

174 { 
O±_îr_c⁄t
, "errors=continue" },

175 { 
O±_îr_∑nic
, "errors=panic" },

176 { 
O±_îr_ro
, "errors=remount-ro" },

177 { 
O±_hugemm≠
, "hugemmap" },

178 { 
O±_nohugei‹em≠
, "nohugeioremap" },

179 { 
O±_dbgmask
, "dbgmask=%u" },

180 { 
O±_bs
, "backing_dev=%s" },

181 { 
O±_îr
, 
NULL
 },

184 
	$pmfs_∑r£_›ti⁄s
(*
›ti⁄s
, 
pmfs_sb_öfo
 *
sbi
,

185 
boﬁ
 
ªmou¡
)

187 *
p
, *
ª°
;

188 
sub°rög_t
 
¨gs
[
MAX_OPT_ARGS
];

189 
›ti⁄
;

191 i‡(!
›ti⁄s
)

194 (
p
 = 
	`°r£p
(&
›ti⁄s
, ",")Ë!
NULL
) {

195 
tokí
;

196 i‡(!*
p
)

199 
tokí
 = 
	`m©ch_tokí
(
p
, 
tokís
, 
¨gs
);

200 
tokí
) {

201 
O±_bpi
:

202 i‡(
ªmou¡
)

203 
bad_›t
;

204 i‡(
	`m©ch_öt
(&
¨gs
[0], &
›ti⁄
))

205 
bad_vÆ
;

206 
sbi
->
bpi
 = 
›ti⁄
;

208 
O±_uid
:

209 i‡(
ªmou¡
)

210 
bad_›t
;

211 i‡(
	`m©ch_öt
(&
¨gs
[0], &
›ti⁄
))

212 
bad_vÆ
;

213 
sbi
->
uid
 = 
	`make_kuid
(
	`cuºít_u£r_ns
(), 
›ti⁄
);

215 
O±_gid
:

216 i‡(
	`m©ch_öt
(&
¨gs
[0], &
›ti⁄
))

217 
bad_vÆ
;

218 
sbi
->
gid
 = 
	`make_kgid
(
	`cuºít_u£r_ns
(), 
›ti⁄
);

220 
O±_mode
:

221 i‡(
	`m©ch_o˘Æ
(&
¨gs
[0], &
›ti⁄
))

222 
bad_vÆ
;

223 
sbi
->
mode
 = 
›ti⁄
 & 01777U;

225 
O±_öô
:

226 i‡(
ªmou¡
)

227 
bad_›t
;

228 
	`£t_›t
(
sbi
->
s_mou¡_›t
, 
FORMAT
);

230 
O±_jsize
:

231 i‡(
ªmou¡
)

232 
bad_›t
;

234 i‡(!
	`isdigô
(*
¨gs
[0].
‰om
))

235 
bad_vÆ
;

236 
sbi
->
jsize
 = 
	`mem∑r£
(
¨gs
[0].
‰om
, &
ª°
);

238 i‡(
sbi
->
jsize
 & (sbi->jsize - 1) ||

239 
sbi
->
jsize
 < 
PMFS_MINIMUM_JOURNAL_SIZE
) {

240 
	`pmfs_dbg
("Invalid jsize: "

242 
bad_vÆ
;

245 
O±_num_öodes
:

246 i‡(
ªmou¡
)

247 
bad_›t
;

248 i‡(
	`m©ch_öt
(&
¨gs
[0], &
›ti⁄
))

249 
bad_vÆ
;

250 
sbi
->
num_öodes
 = 
›ti⁄
;

252 
O±_îr_∑nic
:

253 
	`˛ór_›t
(
sbi
->
s_mou¡_›t
, 
ERRORS_CONT
);

254 
	`˛ór_›t
(
sbi
->
s_mou¡_›t
, 
ERRORS_RO
);

255 
	`£t_›t
(
sbi
->
s_mou¡_›t
, 
ERRORS_PANIC
);

257 
O±_îr_ro
:

258 
	`˛ór_›t
(
sbi
->
s_mou¡_›t
, 
ERRORS_CONT
);

259 
	`˛ór_›t
(
sbi
->
s_mou¡_›t
, 
ERRORS_PANIC
);

260 
	`£t_›t
(
sbi
->
s_mou¡_›t
, 
ERRORS_RO
);

262 
O±_îr_c⁄t
:

263 
	`˛ór_›t
(
sbi
->
s_mou¡_›t
, 
ERRORS_RO
);

264 
	`˛ór_›t
(
sbi
->
s_mou¡_›t
, 
ERRORS_PANIC
);

265 
	`£t_›t
(
sbi
->
s_mou¡_›t
, 
ERRORS_CONT
);

267 
O±_w¥Ÿe˘
:

268 i‡(
ªmou¡
)

269 
bad_›t
;

270 
	`£t_›t
(
sbi
->
s_mou¡_›t
, 
PROTECT
);

271 
pmfs_öfo


274 
O±_w¥Ÿe˘ﬁd
:

275 i‡(
ªmou¡
)

276 
bad_›t
;

277 
	`£t_›t
(
sbi
->
s_mou¡_›t
, 
PROTECT_OLD
);

278 
pmfs_öfo


281 
O±_hugemm≠
:

282 i‡(
ªmou¡
)

283 
bad_›t
;

284 
	`£t_›t
(
sbi
->
s_mou¡_›t
, 
HUGEMMAP
);

285 
	`pmfs_öfo
("PMFS: Enabling huge mappings for mmap\n");

287 
O±_nohugei‹em≠
:

288 i‡(
ªmou¡
)

289 
bad_›t
;

290 
	`˛ór_›t
(
sbi
->
s_mou¡_›t
, 
HUGEIOREMAP
);

291 
	`pmfs_öfo
("PMFS: Disabling huge ioremap\n");

293 
O±_dbgmask
:

294 i‡(
	`m©ch_öt
(&
¨gs
[0], &
›ti⁄
))

295 
bad_vÆ
;

296 
pmfs_dbgmask
 = 
›ti⁄
;

299 
bad_›t
;

306 
bad_vÆ
:

307 
	`¥ötk
(
KERN_INFO
 "Bad vÆuê'%s' f‹ mou¡ o±i⁄ '%s'\n", 
¨gs
[0].
‰om
,

308 
p
);

309  -
EINVAL
;

310 
bad_›t
:

311 
	`¥ötk
(
KERN_INFO
 "Bad mou¡ o±i⁄: \"%s\"\n", 
p
);

312  -
EINVAL
;

313 
	}
}

315 
boﬁ
 
	$pmfs_check_size
 (
su≥r_block
 *
sb
, 
size
)

317 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

318 
möimum_size
, 
num_blocks
;

321 
möimum_size
 = 2 << 
sb
->
s_blocksize_bôs
;

324 i‡(
sbi
->
num_öodes
 > 0)

325 
num_blocks
 = (
sbi
->
num_öodes
 >>

326 (
sb
->
s_blocksize_bôs
 - 
PMFS_INODE_BITS
)) + 1;

328 
num_blocks
 = 1;

329 
möimum_size
 +(
num_blocks
 << 
sb
->
s_blocksize_bôs
);

331 
möimum_size
 +
sbi
->
jsize
;

333 i‡(
size
 < 
möimum_size
)

334  
Ál£
;

336  
åue
;

337 
	}
}

340 
pmfs_öode
 *
	$pmfs_öô
(
su≥r_block
 *
sb
,

341 
size
)

343 
blocksize
;

344 
u64
 
jou∫Æ_mëa_°¨t
, 
jou∫Æ_d©a_°¨t
, 
öode_èbÀ_°¨t
;

345 
pmfs_öode
 *
roŸ_i
;

346 
pmfs_su≥r_block
 *
su≥r
;

347 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

348 
pmfs_dúíåy
 *
de
;

349 
blockƒ
;

351 
	`pmfs_öfo
("¸ótögá¿em±yÖmf†o‡sizê%lu\n", 
size
);

352 
sbi
->
block_°¨t
 = ()0;

353 
sbi
->
block_íd
 = (()(
size
Ë>> 
PAGE_SHIFT
);

354 
sbi
->
num_‰ì_blocks
 = (()(
size
Ë>> 
PAGE_SHIFT
);

356 i‡(!
sbi
->
vút_addr
) {

357 
	`¥ötk
(
KERN_ERR
 "ioremap ofÅheÖmfs image failed(1)\n");

358  
	`ERR_PTR
(-
EINVAL
);

360 #ifde‡
CONFIG_PMFS_TEST


361 i‡(!
fú°_pmfs_su≥r
)

362 
fú°_pmfs_su≥r
 = 
sbi
->
vút_addr
;

365 
	`pmfs_dbg_vîbo£
("pmfs: Default block size setÅo 4K\n");

366 
blocksize
 = 
sbi
->blocksizê
PMFS_DEF_BLOCK_SIZE_4K
;

368 
	`pmfs_£t_blocksize
(
sb
, 
blocksize
);

369 
blocksize
 = 
sb
->
s_blocksize
;

371 i‡(
sbi
->
blocksize
 && sbi->blocksize != blocksize)

372 
sbi
->
blocksize
 = blocksize;

374 i‡(!
	`pmfs_check_size
(
sb
, 
size
)) {

375 
	`pmfs_dbg
("Specified PMFS sizeÅoo small 0x%lx. Either increase"

377 " o∏jou∫Æ sizê(möimum 64KB)\n", 
size
);

378  
	`ERR_PTR
(-
EINVAL
);

381 
jou∫Æ_mëa_°¨t
 = (
pmfs_su≥r_block
);

382 
jou∫Æ_mëa_°¨t
 = (jou∫Æ_mëa_°¨à+ 
CACHELINE_SIZE
 - 1) &

383 ~(
CACHELINE_SIZE
 - 1);

384 
öode_èbÀ_°¨t
 = 
jou∫Æ_mëa_°¨t
 + (
pmfs_jou∫Æ_t
);

385 
öode_èbÀ_°¨t
 = (öode_èbÀ_°¨à+ 
CACHELINE_SIZE
 - 1) &

386 ~(
CACHELINE_SIZE
 - 1);

388 i‡((
öode_èbÀ_°¨t
 + (
pmfs_öode
)Ë> 
PMFS_SB_SIZE
) {

389 
	`pmfs_dbg
("PMFS super block definedÅoo small. defined 0x%x, "

390 "ªquúed 0x%Œx\n", 
PMFS_SB_SIZE
,

391 
öode_èbÀ_°¨t
 + (
pmfs_öode
));

392  
	`ERR_PTR
(-
EINVAL
);

395 
jou∫Æ_d©a_°¨t
 = 
PMFS_SB_SIZE
 * 2;

396 
jou∫Æ_d©a_°¨t
 = (jou∫Æ_d©a_°¨à+ 
blocksize
 - 1) &

397 ~(
blocksize
 - 1);

399 
	`pmfs_dbg_vîbo£
("journal meta start %llx data start 0x%llx, "

400 "jou∫Æ sizê0x%x, inode_èbÀ 0x%Œx\n", 
jou∫Æ_mëa_°¨t
,

401 
jou∫Æ_d©a_°¨t
, 
sbi
->
jsize
, 
öode_èbÀ_°¨t
);

402 
	`pmfs_dbg_vîbo£
("max fûê«mêÀ¿%d\n", ()
PMFS_NAME_LEN
);

404 
su≥r
 = 
	`pmfs_gë_su≥r
(
sb
);

405 
	`pmfs_memu∆ock_ønge
(
sb
, 
su≥r
, 
jou∫Æ_d©a_°¨t
);

408 
	`mem£t_¡
(
su≥r
, 0, 
jou∫Æ_d©a_°¨t
);

409 
su≥r
->
s_size
 = 
	`˝u_to_À64
(
size
);

410 
su≥r
->
s_blocksize
 = 
	`˝u_to_À32
(
blocksize
);

411 
su≥r
->
s_magic
 = 
	`˝u_to_À16
(
PMFS_SUPER_MAGIC
);

412 
su≥r
->
s_jou∫Æ_off£t
 = 
	`˝u_to_À64
(
jou∫Æ_mëa_°¨t
);

413 
su≥r
->
s_öode_èbÀ_off£t
 = 
	`˝u_to_À64
(
öode_èbÀ_°¨t
);

415 
	`pmfs_öô_blockm≠
(
sb
, 
jou∫Æ_d©a_°¨t
 + 
sbi
->
jsize
);

416 
	`pmfs_memlock_ønge
(
sb
, 
su≥r
, 
jou∫Æ_d©a_°¨t
);

418 i‡(
	`pmfs_jou∫Æ_h¨d_öô
(
sb
, 
jou∫Æ_d©a_°¨t
, 
sbi
->
jsize
) < 0) {

419 
	`¥ötk
(
KERN_ERR
 "Journal hard initialization failed\n");

420  
	`ERR_PTR
(-
EINVAL
);

423 i‡(
	`pmfs_öô_öode_èbÀ
(
sb
) < 0)

424  
	`ERR_PTR
(-
EINVAL
);

426 
	`pmfs_memu∆ock_ønge
(
sb
, 
su≥r
, 
PMFS_SB_SIZE
*2);

427 
	`pmfs_sync_su≥r
(
su≥r
);

428 
	`pmfs_memlock_ønge
(
sb
, 
su≥r
, 
PMFS_SB_SIZE
*2);

430 
	`pmfs_Êush_buf„r
(
su≥r
, 
PMFS_SB_SIZE
, 
Ál£
);

431 
	`pmfs_Êush_buf„r
((*)
su≥r
 + 
PMFS_SB_SIZE
, (*su≥r), 
Ál£
);

433 
	`pmfs_√w_block
(
sb
, &
blockƒ
, 
PMFS_BLOCK_TYPE_4K
, 1);

435 
roŸ_i
 = 
	`pmfs_gë_öode
(
sb
, 
PMFS_ROOT_INO
);

437 
	`pmfs_memu∆ock_öode
(
sb
, 
roŸ_i
);

438 
roŸ_i
->
i_mode
 = 
	`˝u_to_À16
(
sbi
->
mode
 | 
S_IFDIR
);

439 
roŸ_i
->
i_uid
 = 
	`˝u_to_À32
(
	`‰om_kuid
(&
öô_u£r_ns
, 
sbi
->
uid
));

440 
roŸ_i
->
i_gid
 = 
	`˝u_to_À32
(
	`‰om_kgid
(&
öô_u£r_ns
, 
sbi
->
gid
));

441 
roŸ_i
->
i_löks_cou¡
 = 
	`˝u_to_À16
(2);

442 
roŸ_i
->
i_blk_ty≥
 = 
PMFS_BLOCK_TYPE_4K
;

443 
roŸ_i
->
i_Êags
 = 0;

444 
roŸ_i
->
i_blocks
 = 
	`˝u_to_À64
(1);

445 
roŸ_i
->
i_size
 = 
	`˝u_to_À64
(
sb
->
s_blocksize
);

446 
roŸ_i
->
i_©ime
 =ÑoŸ_i->
i_mtime
 =ÑoŸ_i->
i_˘ime
 =

447 
	`˝u_to_À32
(
	`ktime_gë_£c⁄ds
());

448 
roŸ_i
->
roŸ
 = 
	`˝u_to_À64
(
	`pmfs_gë_block_off
(
sb
, 
blockƒ
,

449 
PMFS_BLOCK_TYPE_4K
));

450 
roŸ_i
->
height
 = 0;

452 
	`pmfs_memlock_öode
(
sb
, 
roŸ_i
);

453 
	`pmfs_Êush_buf„r
(
roŸ_i
, (*roŸ_i), 
Ál£
);

454 
de
 = (
pmfs_dúíåy
 *)

455 
	`pmfs_gë_block
(
sb
, 
	`pmfs_gë_block_off
(sb, 
blockƒ
, 
PMFS_BLOCK_TYPE_4K
));

457 
	`pmfs_memu∆ock_ønge
(
sb
, 
de
, sb->
s_blocksize
);

458 
de
->
öo
 = 
	`˝u_to_À64
(
PMFS_ROOT_INO
);

459 
de
->
«me_Àn
 = 1;

460 
de
->
de_Àn
 = 
	`˝u_to_À16
(
	`PMFS_DIR_REC_LEN
(de->
«me_Àn
));

461 
	`°r˝y
(
de
->
«me
, ".");

462 
	`pmfs_Êush_buf„r
(
de
, 
	`PMFS_DIR_REC_LEN
(1), 
Ál£
);

463 
de
 = (
pmfs_dúíåy
 *)((*)dê+ 
	`À16_to_˝u
(de->
de_Àn
));

464 
de
->
öo
 = 
	`˝u_to_À64
(
PMFS_ROOT_INO
);

465 
de
->
de_Àn
 = 
	`˝u_to_À16
(
sb
->
s_blocksize
 - 
	`PMFS_DIR_REC_LEN
(1));

466 
de
->
«me_Àn
 = 2;

467 
	`°r˝y
(
de
->
«me
, "..");

468 
	`pmfs_memlock_ønge
(
sb
, 
de
, sb->
s_blocksize
);

469 
	`pmfs_Êush_buf„r
(
de
, 
	`PMFS_DIR_REC_LEN
(2), 
Ál£
);

470 
	`PERSISTENT_MARK
();

471 
	`PERSISTENT_BARRIER
();

472  
roŸ_i
;

473 
	}
}

475 
ölöe
 
	$£t_deÁu…_›ts
(
pmfs_sb_öfo
 *
sbi
)

478 
	`£t_›t
(
sbi
->
s_mou¡_›t
, 
HUGEIOREMAP
);

479 
	`£t_›t
(
sbi
->
s_mou¡_›t
, 
ERRORS_CONT
);

480 
sbi
->
jsize
 = 
PMFS_DEFAULT_JOURNAL_SIZE
;

481 
	}
}

483 
	$pmfs_roŸ_check
(
su≥r_block
 *
sb
, 
pmfs_öode
 *
roŸ_pi
)

491 i‡(!
	`S_ISDIR
(
	`À16_to_˝u
(
roŸ_pi
->
i_mode
)))

492 
	`pmfs_w¨n
("root isÇotá directory!\n");

494 i‡(
	`pmfs_ˇlc_checksum
((
u8
 *)
roŸ_pi
, 
PMFS_INODE_SIZE
)) {

495 
	`pmfs_dbg
("checksumÉrror inÑoot inode,ÅryingÅo fix\n");

496 
Áû3
;

499 
	}
}

501 
	$pmfs_check_öãgrôy
(
su≥r_block
 *
sb
,

502 
pmfs_su≥r_block
 *
su≥r
)

504 
pmfs_su≥r_block
 *
su≥r_ªdund
;

506 
su≥r_ªdund
 =

507 (
pmfs_su≥r_block
 *)((*)
su≥r
 + 
PMFS_SB_SIZE
);

510 i‡(
	`À16_to_˝u
(
su≥r
->
s_magic
Ë!
PMFS_SUPER_MAGIC
) {

511 i‡(
	`À16_to_˝u
(
su≥r_ªdund
->
s_magic
Ë!
PMFS_SUPER_MAGIC
) {

512 
	`¥ötk
(
KERN_ERR
 "Can't findá validÖmfsÖartition\n");

513 
out
;

515 
pmfs_w¨n


519 i‡(
sb
)

520 
	`pmfs_memu∆ock_su≥r
(
sb
, 
su≥r
);

521 
	`mem˝y
(
su≥r
, 
su≥r_ªdund
,

522 (
pmfs_su≥r_block
));

523 i‡(
sb
)

524 
	`pmfs_memlock_su≥r
(
sb
, 
su≥r
);

525 
	`pmfs_Êush_buf„r
(
su≥r
, (*su≥r), 
Ál£
);

526 
	`pmfs_Êush_buf„r
((*)
su≥r
 + 
PMFS_SB_SIZE
,

527 (*
su≥r
), 
Ál£
);

533 i‡(
	`pmfs_ˇlc_checksum
((
u8
 *)
su≥r
, 
	`PMFS_SB_STATIC_SIZE
(super))) {

534 i‡(
	`pmfs_ˇlc_checksum
((
u8
 *)
su≥r_ªdund
,

535 
	`PMFS_SB_STATIC_SIZE
(
su≥r_ªdund
))) {

536 
	`¥ötk
(
KERN_ERR
 "checksumÉrror in super block\n");

537 
out
;

539 
pmfs_w¨n


543 i‡(
sb
)

544 
	`pmfs_memu∆ock_su≥r
(
sb
, 
su≥r
);

545 
	`mem˝y
(
su≥r
, 
su≥r_ªdund
,

546 (
pmfs_su≥r_block
));

547 i‡(
sb
)

548 
	`pmfs_memlock_su≥r
(
sb
, 
su≥r
);

549 
	`pmfs_Êush_buf„r
(
su≥r
, (*su≥r), 
Ál£
);

550 
	`pmfs_Êush_buf„r
((*)
su≥r
 + 
PMFS_SB_SIZE
,

551 (*
su≥r
), 
Ál£
);

556 
out
:

558 
	}
}

560 
	$pmfs_ªcovî_åunˇã_li°
(
su≥r_block
 *
sb
)

562 
pmfs_öode_åunˇã_ôem
 *
hód
 = 
	`pmfs_gë_åunˇã_li°_hód
(
sb
);

563 
u64
 
öo_√xt
 = 
	`À64_to_˝u
(
hód
->
i_√xt_åunˇã
);

564 
pmfs_öode
 *
pi
;

565 
pmfs_öode_åunˇã_ôem
 *
li
;

566 
öode
 *inode;

568 i‡(
öo_√xt
 == 0)

571 
öo_√xt
 != 0) {

572 
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öo_√xt
);

573 
li
 = (
pmfs_öode_åunˇã_ôem
 *)(
pi
 + 1);

574 
öode
 = 
	`pmfs_igë
(
sb
, 
öo_√xt
);

575 i‡(
	`IS_ERR
(
öode
))

577 
	`pmfs_dbg
("Recovî inÿ%ŒxÇlök %d sz %Œx:%Œx\n", 
öo_√xt
,

578 
öode
->
i_∆ök
, 
pi
->
i_size
, 
li
->
i_åunˇãsize
);

579 i‡(
öode
->
i_∆ök
) {

581 
	`pmfs_£t_blocksize_höt
(
sb
, 
pi
,

582 
	`À64_to_˝u
(
li
->
i_åunˇãsize
));

583 
	`pmfs_£tsize
(
öode
, 
	`À64_to_˝u
(
li
->
i_åunˇãsize
));

584 
	`pmfs_upd©e_isize
(
öode
, 
pi
);

587 
	`pmfs_dbg
("deleting unreferenced inode %lx\n",

588 
öode
->
i_öo
);

590 
	`ùut
(
öode
);

591 
	`pmfs_Êush_buf„r
(
pi
, 
CACHELINE_SIZE
, 
Ál£
);

592 
öo_√xt
 = 
	`À64_to_˝u
(
li
->
i_√xt_åunˇã
);

594 
	`PERSISTENT_MARK
();

595 
	`PERSISTENT_BARRIER
();

597 
	`pmfs_memu∆ock_ønge
(
sb
, 
hód
, (*head));

598 
hód
->
i_√xt_åunˇã
 = 0;

599 
	`pmfs_memlock_ønge
(
sb
, 
hód
, (*head));

600 
	`pmfs_Êush_buf„r
(
hód
, (*hód), 
Ál£
);

601 
	`PERSISTENT_MARK
();

602 
	`PERSISTENT_BARRIER
();

603 
	}
}

605 
	$pmfs_fûl_su≥r
(
su≥r_block
 *
sb
, *
d©a
, 
sûít
)

607 
pmfs_su≥r_block
 *
su≥r
;

608 
pmfs_öode
 *
roŸ_pi
;

609 
pmfs_sb_öfo
 *
sbi
 = 
NULL
;

610 
öode
 *
roŸ_i
 = 
NULL
;

611 
blocksize
;

612 
u32
 
øndom
 = 0;

613 
ªtvÆ
 = -
EINVAL
;

615 
	`BUILD_BUG_ON
((
pmfs_su≥r_block
Ë> 
PMFS_SB_SIZE
);

616 
	`BUILD_BUG_ON
((
pmfs_öode
Ë> 
PMFS_INODE_SIZE
);

618 i‡(
	`¨ch_has_pcommô
()) {

619 
	`pmfs_öfo
("arch has PCOMMIT support\n");

620 
suµ‹t_pcommô_pmfs
 = 1;

622 
	`pmfs_öfo
("arch doesÇot have PCOMMIT support\n");

625 i‡(
	`¨ch_has_˛wb
()) {

626 
	`pmfs_öfo
("arch has CLWB support\n");

627 
suµ‹t_˛wb_pmfs
 = 1;

629 
	`pmfs_öfo
("arch doesÇot have CLWB support\n");

632 
sbi
 = 
	`kzÆloc
((
pmfs_sb_öfo
), 
GFP_KERNEL
);

633 i‡(!
sbi
)

634  -
ENOMEM
;

635 
sb
->
s_fs_öfo
 = 
sbi
;

637 
	`£t_deÁu…_›ts
(
sbi
);

639 i‡(
	`pmfs_gë_block_öfo
(
sb
, 
sbi
))

640 
out
;

642 
	`gë_øndom_byãs
(&
øndom
, (
u32
));

643 
	`©omic_£t
(&
sbi
->
√xt_gíî©i⁄
, 
øndom
);

646 
	`INIT_LIST_HEAD
(&
sbi
->
block_öu£_hód
);

647 
sbi
->
mode
 = (
S_IRUGO
 | 
S_IXUGO
 | 
S_IWUSR
);

648 
sbi
->
uid
 = 
	`cuºít_fsuid
();

649 
sbi
->
gid
 = 
	`cuºít_fsgid
();

650 
	`£t_›t
(
sbi
->
s_mou¡_›t
, 
XIP
);

651 
	`˛ór_›t
(
sbi
->
s_mou¡_›t
, 
PROTECT
);

652 
	`£t_›t
(
sbi
->
s_mou¡_›t
, 
HUGEIOREMAP
);

654 
	`INIT_LIST_HEAD
(&
sbi
->
s_åunˇã
);

655 
	`muãx_öô
(&
sbi
->
s_åunˇã_lock
);

656 
	`muãx_öô
(&
sbi
->
öode_èbÀ_muãx
);

657 
	`muãx_öô
(&
sbi
->
s_lock
);

659 i‡(
	`pmfs_∑r£_›ti⁄s
(
d©a
, 
sbi
, 0))

660 
out
;

662 
	`£t_›t
(
sbi
->
s_mou¡_›t
, 
MOUNTING
);

665 i‡(
sbi
->
s_mou¡_›t
 & 
PMFS_MOUNT_FORMAT
) {

666 
roŸ_pi
 = 
	`pmfs_öô
(
sb
, 
sbi
->
öôsize
);

667 i‡(
	`IS_ERR
(
roŸ_pi
))

668 
out
;

669 
su≥r
 = 
	`pmfs_gë_su≥r
(
sb
);

670 
£tup_sb
;

672 
	`pmfs_dbg_vîbo£
("checkingÖhysicaláddress 0x%016llx forÖmfs image\n",

673 (
u64
)
sbi
->
phys_addr
);

675 
su≥r
 = 
	`pmfs_gë_su≥r
(
sb
);

677 i‡(
	`pmfs_jou∫Æ_so·_öô
(
sb
)) {

678 
ªtvÆ
 = -
EINVAL
;

679 
	`¥ötk
(
KERN_ERR
 "Journal initialization failed\n");

680 
out
;

682 i‡(
	`pmfs_ªcovî_jou∫Æ
(
sb
)) {

683 
ªtvÆ
 = -
EINVAL
;

684 
	`¥ötk
(
KERN_ERR
 "JournalÑecovery failed\n");

685 
out
;

688 i‡(
	`pmfs_check_öãgrôy
(
sb
, 
su≥r
) == 0) {

689 
	`pmfs_dbg
("Memory contains invalidÖmfs %x:%x\n",

690 
	`À16_to_˝u
(
su≥r
->
s_magic
), 
PMFS_SUPER_MAGIC
);

691 
out
;

694 
blocksize
 = 
	`À32_to_˝u
(
su≥r
->
s_blocksize
);

695 
	`pmfs_£t_blocksize
(
sb
, 
blocksize
);

697 
	`pmfs_dbg_vîbo£
("blocksizê%lu\n", 
blocksize
);

700 
roŸ_pi
 = 
	`pmfs_gë_öode
(
sb
, 
PMFS_ROOT_INO
);

703 
	`pmfs_roŸ_check
(
sb
, 
roŸ_pi
);

705 #ifde‡
CONFIG_PMFS_TEST


706 i‡(!
fú°_pmfs_su≥r
)

707 
fú°_pmfs_su≥r
 = 
sbi
->
vút_addr
;

711 
£tup_sb
:

712 
sb
->
s_magic
 = 
	`À16_to_˝u
(
su≥r
->s_magic);

713 
sb
->
s_›
 = &
pmfs_s›s
;

714 
sb
->
s_maxbyãs
 = 
	`pmfs_max_size
(sb->
s_blocksize_bôs
);

715 
sb
->
s_time_gøn
 = 1;

716 
sb
->
s_exp‹t_›
 = &
pmfs_exp‹t_›s
;

717 
sb
->
s_x©å
 = 
NULL
;

718 
sb
->
s_Êags
 |
MS_NOSEC
;

719 
roŸ_i
 = 
	`pmfs_igë
(
sb
, 
PMFS_ROOT_INO
);

720 i‡(
	`IS_ERR
(
roŸ_i
)) {

721 
ªtvÆ
 = 
	`PTR_ERR
(
roŸ_i
);

722 
out
;

725 
sb
->
s_roŸ
 = 
	`d_make_roŸ
(
roŸ_i
);

726 i‡(!
sb
->
s_roŸ
) {

727 
	`¥ötk
(
KERN_ERR
 "getÖmfsÑoot inode failed\n");

728 
ªtvÆ
 = -
ENOMEM
;

729 
out
;

732 
	`pmfs_ªcovî_åunˇã_li°
(
sb
);

735 i‡((
sbi
->
s_mou¡_›t
 & 
PMFS_MOUNT_FORMAT
) == 0)

736 
	`pmfs_£tup_blocknode_m≠
(
sb
);

738 i‡(!(
sb
->
s_Êags
 & 
MS_RDONLY
)) {

739 
u64
 
m¡_wrôe_time
;

741 
m¡_wrôe_time
 = (
	`ktime_gë_£c⁄ds
() & 0xFFFFFFFF);

742 
m¡_wrôe_time
 = mnt_write_time | (mnt_write_time << 32);

744 
	`pmfs_memu∆ock_ønge
(
sb
, &
su≥r
->
s_mtime
, 8);

745 
	`pmfs_mem˝y_©omic
(&
su≥r
->
s_mtime
, &
m¡_wrôe_time
, 8);

746 
	`pmfs_memlock_ønge
(
sb
, &
su≥r
->
s_mtime
, 8);

748 
	`pmfs_Êush_buf„r
(&
su≥r
->
s_mtime
, 8, 
Ál£
);

749 
	`PERSISTENT_MARK
();

750 
	`PERSISTENT_BARRIER
();

753 
	`˛ór_›t
(
sbi
->
s_mou¡_›t
, 
MOUNTING
);

754 
ªtvÆ
 = 0;

755  
ªtvÆ
;

756 
out
:

757 
	`k‰ì
(
sbi
);

758  
ªtvÆ
;

759 
	}
}

761 
	$pmfs_°©fs
(
díåy
 *
d
, 
k°©fs
 *
buf
)

763 
su≥r_block
 *
sb
 = 
d
->
d_sb
;

764 
cou¡
 = 0;

765 
pmfs_sb_öfo
 *
sbi
 = (pmfs_sb_öfÿ*)
sb
->
s_fs_öfo
;

767 
buf
->
f_ty≥
 = 
PMFS_SUPER_MAGIC
;

768 
buf
->
f_bsize
 = 
sb
->
s_blocksize
;

770 
cou¡
 = 
sbi
->
block_íd
;

771 
buf
->
f_blocks
 = 
sbi
->
block_íd
;

772 
buf
->
f_b‰ì
 = buf->
f_bavaû
 = 
	`pmfs_cou¡_‰ì_blocks
(
sb
);

773 
buf
->
f_fûes
 = (
sbi
->
s_öodes_cou¡
);

774 
buf
->
f_f‰ì
 = (
sbi
->
s_‰ì_öodes_cou¡
);

775 
buf
->
f_«mñí
 = 
PMFS_NAME_LEN
;

776 
	`pmfs_dbg_vîbo£
("pmfs_stats:Åotal 4k free blocks 0x%llx\n",

777 
buf
->
f_b‰ì
);

778 
	`pmfs_dbg_vîbo£
("total inodes 0x%x, free inodes 0x%x, "

779 "blocknode†0x%lx\n", (
sbi
->
s_öodes_cou¡
),

780 (
sbi
->
s_‰ì_öodes_cou¡
), (sbi->
num_blocknode_Æloˇãd
));

782 
	}
}

784 
	$pmfs_show_›ti⁄s
(
£q_fûe
 *
£q
, 
díåy
 *
roŸ
)

786 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
roŸ
->
d_sb
);

788 
	`£q_¥ötf
(
£q
, ",phyßddr=0x%016Œx", (
u64
)
sbi
->
phys_addr
);

789 i‡(
sbi
->
öôsize
)

790 
	`£q_¥ötf
(
£q
, ",öô=%luk", 
sbi
->
öôsize
 >> 10);

791 i‡(
sbi
->
blocksize
)

792 
	`£q_¥ötf
(
£q
, ",bs=%lu", 
sbi
->
blocksize
);

793 i‡(
sbi
->
bpi
)

794 
	`£q_¥ötf
(
£q
, ",bpi=%lu", 
sbi
->
bpi
);

795 i‡(
sbi
->
num_öodes
)

796 
	`£q_¥ötf
(
£q
, ",N=%lu", 
sbi
->
num_öodes
);

797 i‡(
sbi
->
mode
 !(
S_IRWXUGO
 | 
S_ISVTX
))

798 
	`£q_¥ötf
(
£q
, ",mode=%03o", 
sbi
->
mode
);

799 i‡(
	`uid_vÆid
(
sbi
->
uid
))

800 
	`£q_¥ötf
(
£q
, ",uid=%u", 
	`‰om_kuid
(&
öô_u£r_ns
, 
sbi
->
uid
));

801 i‡(
	`gid_vÆid
(
sbi
->
gid
))

802 
	`£q_¥ötf
(
£q
, ",gid=%u", 
	`‰om_kgid
(&
öô_u£r_ns
, 
sbi
->
gid
));

803 i‡(
	`ã°_›t
(
roŸ
->
d_sb
, 
ERRORS_RO
))

804 
	`£q_puts
(
£q
, ",errors=remount-ro");

805 i‡(
	`ã°_›t
(
roŸ
->
d_sb
, 
ERRORS_PANIC
))

806 
	`£q_puts
(
£q
, ",errors=panic");

808 i‡(
	`ã°_›t
(
roŸ
->
d_sb
, 
PROTECT
))

809 
	`£q_puts
(
£q
, ",wprotect");

810 i‡(
	`ã°_›t
(
roŸ
->
d_sb
, 
HUGEMMAP
))

811 
	`£q_puts
(
£q
, ",hugemmap");

812 i‡(
	`ã°_›t
(
roŸ
->
d_sb
, 
HUGEIOREMAP
))

813 
	`£q_puts
(
£q
, ",hugeioremap");

815 i‡(
	`ã°_›t
(
roŸ
->
d_sb
, 
XIP
))

816 
	`£q_puts
(
£q
, ",xip");

819 
	}
}

821 
	$pmfs_ªmou¡
(
su≥r_block
 *
sb
, *
m¡Êags
, *
d©a
)

823 
ﬁd_sb_Êags
;

824 
ﬁd_mou¡_›t
;

825 
pmfs_su≥r_block
 *
ps
;

826 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

827 
ªt
 = -
EINVAL
;

830 
	`muãx_lock
(&
sbi
->
s_lock
);

831 
ﬁd_sb_Êags
 = 
sb
->
s_Êags
;

832 
ﬁd_mou¡_›t
 = 
sbi
->
s_mou¡_›t
;

834 i‡(
	`pmfs_∑r£_›ti⁄s
(
d©a
, 
sbi
, 1))

835 
ª°‹e_›t
;

837 
sb
->
s_Êags
 = (sb->s_Êag†& ~
MS_POSIXACL
) |

838 ((
sbi
->
s_mou¡_›t
 & 
PMFS_MOUNT_POSIX_ACL
Ë? 
MS_POSIXACL
 : 0);

840 i‡((*
m¡Êags
 & 
MS_RDONLY
Ë!(
sb
->
s_Êags
 & MS_RDONLY)) {

841 
u64
 
m¡_wrôe_time
;

842 
ps
 = 
	`pmfs_gë_su≥r
(
sb
);

844 
m¡_wrôe_time
 = (
	`ktime_gë_£c⁄ds
() & 0xFFFFFFFF);

845 
m¡_wrôe_time
 = mnt_write_time | (mnt_write_time << 32);

847 
	`pmfs_memu∆ock_ønge
(
sb
, &
ps
->
s_mtime
, 8);

848 
	`pmfs_mem˝y_©omic
(&
ps
->
s_mtime
, &
m¡_wrôe_time
, 8);

849 
	`pmfs_memlock_ønge
(
sb
, &
ps
->
s_mtime
, 8);

851 
	`pmfs_Êush_buf„r
(&
ps
->
s_mtime
, 8, 
Ál£
);

852 
	`PERSISTENT_MARK
();

853 
	`PERSISTENT_BARRIER
();

856 
	`muãx_u∆ock
(&
sbi
->
s_lock
);

857 
ªt
 = 0;

858  
ªt
;

860 
ª°‹e_›t
:

861 
sb
->
s_Êags
 = 
ﬁd_sb_Êags
;

862 
sbi
->
s_mou¡_›t
 = 
ﬁd_mou¡_›t
;

863 
	`muãx_u∆ock
(&
sbi
->
s_lock
);

864  
ªt
;

865 
	}
}

867 
	$pmfs_put_su≥r
(
su≥r_block
 *
sb
)

869 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

870 
pmfs_blocknode
 *
i
;

871 
li°_hód
 *
hód
 = &(
sbi
->
block_öu£_hód
);

873 #ifde‡
CONFIG_PMFS_TEST


874 i‡(
fú°_pmfs_su≥r
 =
sbi
->
vút_addr
)

875 
fú°_pmfs_su≥r
 = 
NULL
;

879 i‡(
sbi
->
vút_addr
) {

880 
	`pmfs_ßve_blocknode_m≠pögs
(
sb
);

881 
	`pmfs_jou∫Æ_unöô
(
sb
);

882 
sbi
->
vút_addr
 = 
NULL
;

886 !
	`li°_em±y
(
hód
)) {

887 
i
 = 
	`li°_fú°_íåy
(
hód
, 
pmfs_blocknode
, 
lök
);

888 
	`li°_dñ
(&
i
->
lök
);

889 
	`pmfs_‰ì_blocknode
(
sb
, 
i
);

891 
sb
->
s_fs_öfo
 = 
NULL
;

892 
pmfs_dbgmask
 = 0;

893 
	`k‰ì
(
sbi
);

894 
	}
}

896 
ölöe
 
	$pmfs_‰ì_å™ß˘i⁄
(
pmfs_å™ß˘i⁄_t
 *
å™s
)

898 
	`kmem_ˇche_‰ì
(
pmfs_å™ß˘i⁄_ˇchï
, 
å™s
);

899 
	}
}

901 
	$__pmfs_‰ì_blocknode
(
pmfs_blocknode
 *
bnode
)

903 
	`kmem_ˇche_‰ì
(
pmfs_blocknode_ˇchï
, 
bnode
);

904 
	}
}

906 
	$pmfs_‰ì_blocknode
(
su≥r_block
 *
sb
, 
pmfs_blocknode
 *
bnode
)

908 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

909 
sbi
->
num_blocknode_Æloˇãd
--;

910 
	`__pmfs_‰ì_blocknode
(
bnode
);

911 
	}
}

913 
ölöe
 
pmfs_å™ß˘i⁄_t
 *
	$pmfs_Æloc_å™ß˘i⁄
()

915  (
pmfs_å™ß˘i⁄_t
 *)

916 
	`kmem_ˇche_Æloc
(
pmfs_å™ß˘i⁄_ˇchï
, 
GFP_NOFS
);

917 
	}
}

919 
pmfs_blocknode
 *
	$pmfs_Æloc_blocknode
(
su≥r_block
 *
sb
)

921 
pmfs_blocknode
 *
p
;

922 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

923 
p
 = (
pmfs_blocknode
 *)

924 
	`kmem_ˇche_Æloc
(
pmfs_blocknode_ˇchï
, 
GFP_NOFS
);

925 i‡(
p
) {

926 
sbi
->
num_blocknode_Æloˇãd
++;

928  
p
;

929 
	}
}

931 
öode
 *
	$pmfs_Æloc_öode
(
su≥r_block
 *
sb
)

933 
pmfs_öode_öfo
 *
vi
;

935 
vi
 = 
	`kmem_ˇche_Æloc
(
pmfs_öode_ˇchï
, 
GFP_NOFS
);

936 i‡(!
vi
)

937  
NULL
;

940  &
vi
->
vfs_öode
;

941 
	}
}

943 
	$pmfs_i_ˇŒback
(
rcu_hód
 *
hód
)

945 
öode
 *öodê
	`c⁄èöî_of
(
hód
, öode, 
i_rcu
);

947 
	`kmem_ˇche_‰ì
(
pmfs_öode_ˇchï
, 
	`PMFS_I
(
öode
));

948 
	}
}

950 
	$pmfs_de°roy_öode
(
öode
 *inode)

952 
	`ˇŒ_rcu
(&
öode
->
i_rcu
, 
pmfs_i_ˇŒback
);

953 
	}
}

955 
	$öô_⁄˚
(*
foo
)

957 
pmfs_öode_öfo
 *
vi
 = 
foo
;

959 
vi
->
i_dú_°¨t_lookup
 = 0;

960 
	`INIT_LIST_HEAD
(&
vi
->
i_åunˇãd
);

961 
	`öode_öô_⁄˚
(&
vi
->
vfs_öode
);

962 
	}
}

965 
__öô
 
	$öô_blocknode_ˇche
()

967 
pmfs_blocknode_ˇchï
 = 
	`kmem_ˇche_¸óã
("pmfs_blocknode_cache",

968 (
pmfs_blocknode
),

969 0, (
SLAB_RECLAIM_ACCOUNT
 |

970 
SLAB_MEM_SPREAD
), 
NULL
);

971 i‡(
pmfs_blocknode_ˇchï
 =
NULL
)

972  -
ENOMEM
;

974 
	}
}

977 
__öô
 
	$öô_öodeˇche
()

979 
pmfs_öode_ˇchï
 = 
	`kmem_ˇche_¸óã
("pmfs_inode_cache",

980 (
pmfs_öode_öfo
),

981 0, (
SLAB_RECLAIM_ACCOUNT
 |

982 
SLAB_MEM_SPREAD
), 
öô_⁄˚
);

983 i‡(
pmfs_öode_ˇchï
 =
NULL
)

984  -
ENOMEM
;

986 
	}
}

988 
__öô
 
	$öô_å™ß˘i⁄_ˇche
()

990 
pmfs_å™ß˘i⁄_ˇchï
 = 
	`kmem_ˇche_¸óã
("pmfs_journal_transaction",

991 (
pmfs_å™ß˘i⁄_t
), 0, (
SLAB_RECLAIM_ACCOUNT
 |

992 
SLAB_MEM_SPREAD
), 
NULL
);

993 i‡(
pmfs_å™ß˘i⁄_ˇchï
 =
NULL
) {

994 
	`pmfs_dbg
("PMFS: failedÅo initÅransaction cache\n");

995  -
ENOMEM
;

998 
	}
}

1000 
	$de°roy_å™ß˘i⁄_ˇche
()

1002 i‡(
pmfs_å™ß˘i⁄_ˇchï
)

1003 
	`kmem_ˇche_de°roy
(
pmfs_å™ß˘i⁄_ˇchï
);

1004 
pmfs_å™ß˘i⁄_ˇchï
 = 
NULL
;

1005 
	}
}

1007 
	$de°roy_öodeˇche
()

1013 
	`rcu_b¨rõr
();

1014 
	`kmem_ˇche_de°roy
(
pmfs_öode_ˇchï
);

1015 
	}
}

1017 
	$de°roy_blocknode_ˇche
()

1019 
	`kmem_ˇche_de°roy
(
pmfs_blocknode_ˇchï
);

1020 
	}
}

1027 
su≥r_›î©i⁄s
 
	gpmfs_s›s
 = {

1028 .
Æloc_öode
 = 
pmfs_Æloc_öode
,

1029 .
	gde°roy_öode
 = 
pmfs_de°roy_öode
,

1030 .
	gwrôe_öode
 = 
pmfs_wrôe_öode
,

1031 .
	gdúty_öode
 = 
pmfs_dúty_öode
,

1032 .
	gevi˘_öode
 = 
pmfs_evi˘_öode
,

1033 .
	gput_su≥r
 = 
pmfs_put_su≥r
,

1034 .
	g°©fs
 = 
pmfs_°©fs
,

1035 .
	gªmou¡_fs
 = 
pmfs_ªmou¡
,

1036 .
	gshow_›ti⁄s
 = 
pmfs_show_›ti⁄s
,

1039 
díåy
 *
	$pmfs_mou¡
(
fûe_sy°em_ty≥
 *
fs_ty≥
,

1040 
Êags
, c⁄° *
dev_«me
, *
d©a
)

1042  
	`mou¡_bdev
(
fs_ty≥
, 
Êags
, 
dev_«me
, 
d©a
, 
pmfs_fûl_su≥r
);

1043 
	}
}

1045 
fûe_sy°em_ty≥
 
	gpmfs_fs_ty≥
 = {

1046 .
ow√r
 = 
THIS_MODULE
,

1047 .
	g«me
 = "pmfs",

1048 .
	gmou¡
 = 
pmfs_mou¡
,

1049 .
	gkûl_sb
 = 
kûl_block_su≥r
,

1052 
öode
 *
	$pmfs_nfs_gë_öode
(
su≥r_block
 *
sb
,

1053 
u64
 
öo
, 
u32
 
gíî©i⁄
)

1055 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

1056 
öode
 *inode;

1058 i‡(
öo
 < 
PMFS_ROOT_INO
)

1059  
	`ERR_PTR
(-
ESTALE
);

1061 i‡((
öo
 >> 
PMFS_INODE_BITS
Ë> (
sbi
->
s_öodes_cou¡
))

1062  
	`ERR_PTR
(-
ESTALE
);

1064 
öode
 = 
	`pmfs_igë
(
sb
, 
öo
);

1065 i‡(
	`IS_ERR
(
öode
))

1066  
	`ERR_CAST
(
öode
);

1068 i‡(
gíî©i⁄
 && 
öode
->
i_gíî©i⁄
 != generation) {

1070 
	`ùut
(
öode
);

1071  
	`ERR_PTR
(-
ESTALE
);

1074  
öode
;

1075 
	}
}

1077 
díåy
 *
	$pmfs_fh_to_díåy
(
su≥r_block
 *
sb
,

1078 
fid
 *fid, 
fh_Àn
,

1079 
fh_ty≥
)

1081  
	`gíîic_fh_to_díåy
(
sb
, 
fid
, 
fh_Àn
, 
fh_ty≥
,

1082 
pmfs_nfs_gë_öode
);

1083 
	}
}

1085 
díåy
 *
	$pmfs_fh_to_∑ª¡
(
su≥r_block
 *
sb
,

1086 
fid
 *fid, 
fh_Àn
,

1087 
fh_ty≥
)

1089  
	`gíîic_fh_to_∑ª¡
(
sb
, 
fid
, 
fh_Àn
, 
fh_ty≥
,

1090 
pmfs_nfs_gë_öode
);

1091 
	}
}

1093 c⁄° 
exp‹t_›î©i⁄s
 
	gpmfs_exp‹t_›s
 = {

1094 .
fh_to_díåy
 = 
pmfs_fh_to_díåy
,

1095 .
	gfh_to_∑ª¡
 = 
pmfs_fh_to_∑ª¡
,

1096 .
	ggë_∑ª¡
 = 
pmfs_gë_∑ª¡
,

1099 
__öô
 
	$öô_pmfs_fs
()

1101 
rc
 = 0;

1103 
rc
 = 
	`öô_blocknode_ˇche
();

1104 i‡(
rc
)

1105  
rc
;

1107 
rc
 = 
	`öô_å™ß˘i⁄_ˇche
();

1108 i‡(
rc
)

1109 
out1
;

1111 
rc
 = 
	`öô_öodeˇche
();

1112 i‡(
rc
)

1113 
out2
;

1115 
rc
 = 
	`ªgi°î_fûesy°em
(&
pmfs_fs_ty≥
);

1116 i‡(
rc
)

1117 
out3
;

1121 
out3
:

1122 
	`de°roy_öodeˇche
();

1123 
out2
:

1124 
	`de°roy_å™ß˘i⁄_ˇche
();

1125 
out1
:

1126 
	`de°roy_blocknode_ˇche
();

1127  
rc
;

1128 
	}
}

1130 
__exô
 
	$exô_pmfs_fs
()

1132 
	`uƒegi°î_fûesy°em
(&
pmfs_fs_ty≥
);

1133 
	`de°roy_öodeˇche
();

1134 
	`de°roy_blocknode_ˇche
();

1135 
	`de°roy_å™ß˘i⁄_ˇche
();

1136 
	}
}

1138 
MODULE_AUTHOR
("Intel Corporation <linux-pmfs@intel.com>");

1139 
MODULE_DESCRIPTION
("Persistent Memory File System");

1140 
MODULE_LICENSE
("GPL");

1142 
	$moduÀ_öô
(
öô_pmfs_fs
)

1143 
	`moduÀ_exô
(
exô_pmfs_fs
)

	@symlink.c

16 
	~<löux/fs.h
>

17 
	~<löux/«mei.h
>

18 
	~"pmfs.h
"

20 
	$pmfs_block_symlök
(
öode
 *öode, c⁄° *
sym«me
, 
Àn
)

22 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

23 
u64
 
block
;

24 *
blockp
;

25 
îr
;

27 
îr
 = 
	`pmfs_Æloc_blocks
(
NULL
, 
öode
, 0, 1, 
Ál£
);

28 i‡(
îr
)

29  
îr
;

31 
block
 = 
	`pmfs_föd_d©a_block
(
öode
, 0);

32 
blockp
 = 
	`pmfs_gë_block
(
sb
, 
block
);

34 
	`pmfs_memu∆ock_block
(
sb
, 
blockp
);

35 
	`mem˝y
(
blockp
, 
sym«me
, 
Àn
);

36 
blockp
[
Àn
] = '\0';

37 
	`pmfs_memlock_block
(
sb
, 
blockp
);

38 
	`pmfs_Êush_buf„r
(
blockp
, 
Àn
+1, 
Ál£
);

40 
	}
}

43 
	$pmfs_ªadlök_c›y
(
__u£r
 *
buf„r
, 
buÊí
, c⁄° *
lök
)

45 
Àn
 = 
	`PTR_ERR
(
lök
);

46 i‡(
	`IS_ERR
(
lök
))

47 
out
;

49 
Àn
 = 
	`°æí
(
lök
);

50 i‡(
Àn
 > (Ë
buÊí
)

51 
Àn
 = 
buÊí
;

52 i‡(
	`c›y_to_u£r
(
buf„r
, 
lök
, 
Àn
))

53 
Àn
 = -
EFAULT
;

54 
out
:

55  
Àn
;

56 
	}
}

58 
	$pmfs_ªadlök
(
díåy
 *díåy, 
__u£r
 *
buf„r
, 
buÊí
)

60 
öode
 *öodê
díåy
->
d_öode
;

61 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

62 
u64
 
block
;

63 *
blockp
;

65 
block
 = 
	`pmfs_föd_d©a_block
(
öode
, 0);

66 
blockp
 = 
	`pmfs_gë_block
(
sb
, 
block
);

67  
	`pmfs_ªadlök_c›y
(
buf„r
, 
buÊí
, 
blockp
);

68 
	}
}

70 c⁄° *
	$pmfs_gë_lök
(
díåy
 *díåy, 
öode
 *inode,

71 
dñayed_ˇŒ
 *
d⁄e
)

73 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

74 
off_t
 
block
;

75 *
blockp
;

77 
block
 = 
	`pmfs_föd_d©a_block
(
öode
, 0);

78 
blockp
 = 
	`pmfs_gë_block
(
sb
, 
block
);

79  
blockp
;

80 
	}
}

82 c⁄° 
öode_›î©i⁄s
 
	gpmfs_symlök_öode_›î©i⁄s
 = {

83 .
ªadlök
 = 
pmfs_ªadlök
,

84 .
	ggë_lök
 = 
pmfs_gë_lök
,

85 .
	g£èâr
 = 
pmfs_nŸify_ch™ge
,

	@wprotect.c

16 
	~<löux/moduÀ.h
>

17 
	~<löux/fs.h
>

18 
	~<löux/mm.h
>

19 
	~<löux/io.h
>

20 
	~"pmfs.h
"

22 
ölöe
 
	$w¥Ÿe˘_dißbÀ
()

24 
¸0_vÆ
;

26 
¸0_vÆ
 = 
	`ªad_¸0
();

27 
¸0_vÆ
 &(~
X86_CR0_WP
);

28 
	`wrôe_¸0
(
¸0_vÆ
);

29 
	}
}

31 
ölöe
 
	$w¥Ÿe˘_íabÀ
()

33 
¸0_vÆ
;

35 
¸0_vÆ
 = 
	`ªad_¸0
();

36 
¸0_vÆ
 |
X86_CR0_WP
;

37 
	`wrôe_¸0
(
¸0_vÆ
);

38 
	}
}

44 
	$pmfs_wrôóbÀ
(*
vaddr
, 
size
, 
rw
)

46 
Êags
;

47 i‡(
rw
) {

48 
	`loˇl_úq_ßve
(
Êags
);

49 
	`w¥Ÿe˘_dißbÀ
();

51 
	`w¥Ÿe˘_íabÀ
();

52 
	`loˇl_úq_ª°‹e
(
Êags
);

55 
	}
}

57 
	$pmfs_xù_mem_¥Ÿe˘
(
su≥r_block
 *
sb
, *
vaddr
,

58 
size
, 
rw
)

60 i‡(!
	`pmfs_is_w¥Ÿe˘ed
(
sb
))

62  
	`pmfs_wrôóbÀ
(
vaddr
, 
size
, 
rw
);

63 
	}
}

	@wprotect.h

13 #i‚de‡
__WPROTECT_H


14 
	#__WPROTECT_H


	)

16 
	~<löux/fs.h
>

17 
	~"pmfs_def.h
"

20 
ölöe
 
	$pmfs_sync_su≥r
(
pmfs_su≥r_block
 *
ps
)

22 
u16
 
¸c
 = 0;

24 
ps
->
s_wtime
 = 
	`˝u_to_À32
(
	`ktime_gë_£c⁄ds
());

25 
ps
->
s_sum
 = 0;

26 
¸c
 = 
	`¸c16
(~0, (
__u8
 *)
ps
 + (
__À16
),

27 
	`PMFS_SB_STATIC_SIZE
(
ps
Ë- (
__À16
));

28 
ps
->
s_sum
 = 
	`˝u_to_À16
(
¸c
);

30 
	`mem˝y
((*)
ps
 + 
PMFS_SB_SIZE
, (*)ps,

31 (
pmfs_su≥r_block
));

32 
	}
}

36 
ölöe
 
	$pmfs_sync_öode
(
pmfs_öode
 *
pi
)

38 
u16
 
¸c
 = 0;

40 
pi
->
i_sum
 = 0;

41 
¸c
 = 
	`¸c16
(~0, (
__u8
 *)
pi
 + (
__À16
), 
PMFS_INODE_SIZE
 -

42 (
__À16
));

43 
pi
->
i_sum
 = 
	`˝u_to_À16
(
¸c
);

44 
	}
}

47 
pmfs_wrôóbÀ
(*
vaddr
, 
size
, 
rw
);

48 
pmfs_xù_mem_¥Ÿe˘
(
su≥r_block
 *
sb
,

49 *
vaddr
, 
size
, 
rw
);

51 
ölöe
 
	$pmfs_is_¥Ÿe˘ed
(
su≥r_block
 *
sb
)

53 
pmfs_sb_öfo
 *
sbi
 = (pmfs_sb_öfÿ*)
sb
->
s_fs_öfo
;

55  
sbi
->
s_mou¡_›t
 & 
PMFS_MOUNT_PROTECT
;

56 
	}
}

58 
ölöe
 
	$pmfs_is_w¥Ÿe˘ed
(
su≥r_block
 *
sb
)

60  
	`pmfs_is_¥Ÿe˘ed
(
sb
);

61 
	}
}

63 
ölöe
 

64 
	$__pmfs_memu∆ock_ønge
(*
p
, 
Àn
)

73 
	`pmfs_wrôóbÀ
(
p
, 
Àn
, 1);

74 
	}
}

76 
ölöe
 

77 
	$__pmfs_memlock_ønge
(*
p
, 
Àn
)

79 
	`pmfs_wrôóbÀ
(
p
, 
Àn
, 0);

80 
	}
}

82 
ölöe
 
	$pmfs_memu∆ock_ønge
(
su≥r_block
 *
sb
, *
p
,

83 
Àn
)

85 i‡(
	`pmfs_is_¥Ÿe˘ed
(
sb
))

86 
	`__pmfs_memu∆ock_ønge
(
p
, 
Àn
);

87 
	}
}

89 
ölöe
 
	$pmfs_memlock_ønge
(
su≥r_block
 *
sb
, *
p
,

90 
Àn
)

92 i‡(
	`pmfs_is_¥Ÿe˘ed
(
sb
))

93 
	`__pmfs_memlock_ønge
(
p
, 
Àn
);

94 
	}
}

96 
ölöe
 
	$pmfs_memu∆ock_su≥r
(
su≥r_block
 *
sb
,

97 
pmfs_su≥r_block
 *
ps
)

99 i‡(
	`pmfs_is_¥Ÿe˘ed
(
sb
))

100 
	`__pmfs_memu∆ock_ønge
(
ps
, 
PMFS_SB_SIZE
);

101 
	}
}

103 
ölöe
 
	$pmfs_memlock_su≥r
(
su≥r_block
 *
sb
,

104 
pmfs_su≥r_block
 *
ps
)

106 
	`pmfs_sync_su≥r
(
ps
);

107 i‡(
	`pmfs_is_¥Ÿe˘ed
(
sb
))

108 
	`__pmfs_memlock_ønge
(
ps
, 
PMFS_SB_SIZE
);

109 
	}
}

111 
ölöe
 
	$pmfs_memu∆ock_öode
(
su≥r_block
 *
sb
,

112 
pmfs_öode
 *
pi
)

114 i‡(
	`pmfs_is_¥Ÿe˘ed
(
sb
))

115 
	`__pmfs_memu∆ock_ønge
(
pi
, 
PMFS_SB_SIZE
);

116 
	}
}

118 
ölöe
 
	$pmfs_memlock_öode
(
su≥r_block
 *
sb
,

119 
pmfs_öode
 *
pi
)

122 i‡(
	`pmfs_is_¥Ÿe˘ed
(
sb
))

123 
	`__pmfs_memlock_ønge
(
pi
, 
PMFS_SB_SIZE
);

124 
	}
}

126 
ölöe
 
	$pmfs_memu∆ock_block
(
su≥r_block
 *
sb
, *
bp
)

128 i‡(
	`pmfs_is_¥Ÿe˘ed
(
sb
))

129 
	`__pmfs_memu∆ock_ønge
(
bp
, 
sb
->
s_blocksize
);

130 
	}
}

132 
ölöe
 
	$pmfs_memlock_block
(
su≥r_block
 *
sb
, *
bp
)

134 i‡(
	`pmfs_is_¥Ÿe˘ed
(
sb
))

135 
	`__pmfs_memlock_ønge
(
bp
, 
sb
->
s_blocksize
);

136 
	}
}

	@xip.c

13 
	~<löux/mm.h
>

14 
	~<löux/sched.h
>

15 
	~<löux/fs.h
>

16 
	~<löux/buf„r_hód.h
>

17 
	~<asm/˝u„©uª.h
>

18 
	~<asm/pgèbÀ.h
>

19 
	~"pmfs.h
"

20 
	~"xù.h
"

22 
ssize_t


23 
	$do_xù_m≠pög_ªad
(
addªss_•a˚
 *
m≠pög
,

24 
fûe_ø_°©e
 *
_ø
,

25 
fûe
 *
fûp
,

26 
__u£r
 *
buf
,

27 
size_t
 
Àn
,

28 
loff_t
 *
µos
)

30 
öode
 *öodê
m≠pög
->
ho°
;

31 
pgoff_t
 
ödex
, 
íd_ödex
;

32 
off£t
;

33 
loff_t
 
isize
, 
pos
;

34 
size_t
 
c›õd
 = 0, 
îr‹
 = 0;

35 
timög_t
 
mem˝y_time
;

37 
pos
 = *
µos
;

38 
ödex
 = 
pos
 >> 
PAGE_SHIFT
;

39 
off£t
 = 
pos
 & ~
PAGE_MASK
;

41 
isize
 = 
	`i_size_ªad
(
öode
);

42 i‡(!
isize
)

43 
out
;

45 
íd_ödex
 = (
isize
 - 1Ë>> 
PAGE_SHIFT
;

47 
ƒ
, 
À·
;

48 *
xù_mem
;

49 
xù_p‚
;

50 
zîo
 = 0;

53 
ƒ
 = 
PAGE_SIZE
;

54 i‡(
ödex
 >
íd_ödex
) {

55 i‡(
ödex
 > 
íd_ödex
)

56 
out
;

57 
ƒ
 = ((
isize
 - 1Ë& ~
PAGE_MASK
) + 1;

58 i‡(
ƒ
 <
off£t
) {

59 
out
;

62 
ƒ
 =Ç∏- 
off£t
;

63 i‡(
ƒ
 > 
Àn
 - 
c›õd
)

64 
ƒ
 = 
Àn
 - 
c›õd
;

66 
îr‹
 = 
	`pmfs_gë_xù_mem
(
m≠pög
, 
ödex
, 0,

67 &
xù_mem
, &
xù_p‚
);

68 i‡(
	`u∆ikñy
(
îr‹
)) {

69 i‡(
îr‹
 =-
ENODATA
) {

71 
zîo
 = 1;

73 
out
;

80 i‡(
	`m≠pög_wrôably_m≠≥d
(
m≠pög
))

92 
	`PMFS_START_TIMING
(
mem˝y_r_t
, 
mem˝y_time
);

93 i‡(!
zîo
)

94 
À·
 = 
	`__c›y_to_u£r
(
buf
+
c›õd
, 
xù_mem
+
off£t
, 
ƒ
);

96 
À·
 = 
	`__˛ór_u£r
(
buf
 + 
c›õd
, 
ƒ
);

97 
	`PMFS_END_TIMING
(
mem˝y_r_t
, 
mem˝y_time
);

99 i‡(
À·
) {

100 
îr‹
 = -
EFAULT
;

101 
out
;

104 
c›õd
 +(
ƒ
 - 
À·
);

105 
off£t
 +(
ƒ
 - 
À·
);

106 
ödex
 +
off£t
 >> 
PAGE_SHIFT
;

107 
off£t
 &~
PAGE_MASK
;

109 i‡(
	`√ed_ªsched
()) {

110 
	`c⁄d_ªsched
();

113 } 
c›õd
 < 
Àn
);

115 
out
:

116 *
µos
 = 
pos
 + 
c›õd
;

117 i‡(
fûp
)

118 
	`fûe_ac˚s£d
(
fûp
);

120  (
c›õd
 ? c›õd : 
îr‹
);

121 
	}
}

123 
ssize_t


124 
	$xù_fûe_ªad
(
fûe
 *
fûp
, 
__u£r
 *
buf
, 
size_t
 
Àn
, 
loff_t
 *
µos
)

127 i‡(!
	`ac˚ss_ok
(
buf
, 
Àn
))

128  -
EFAULT
;

130  
	`do_xù_m≠pög_ªad
(
fûp
->
f_m≠pög
, &fûp->
f_ø
, filp,

131 
buf
, 
Àn
, 
µos
);

132 
	}
}

139 
ssize_t
 
	$pmfs_xù_fûe_ªad
(
fûe
 *
fûp
, 
__u£r
 *
buf
,

140 
size_t
 
Àn
, 
loff_t
 *
µos
)

142 
ssize_t
 
ªs
;

143 
timög_t
 
xù_ªad_time
;

144 
öode
 *öodê
fûp
->
f_m≠pög
->
ho°
;

146 
	`PMFS_START_TIMING
(
xù_ªad_t
, 
xù_ªad_time
);

147 
	`öode_lock_sh¨ed
(
öode
);

148 
ªs
 = 
	`xù_fûe_ªad
(
fûp
, 
buf
, 
Àn
, 
µos
);

149 
	`öode_u∆ock_sh¨ed
(
öode
);

151 
	`PMFS_END_TIMING
(
xù_ªad_t
, 
xù_ªad_time
);

152  
ªs
;

153 
	}
}

155 
ölöe
 
	$pmfs_Êush_edge_ˇchñöes
(
loff_t
 
pos
, 
ssize_t
 
Àn
,

156 *
°¨t_addr
)

158 i‡(
	`u∆ikñy
(
pos
 & 0x7))

159 
	`pmfs_Êush_buf„r
(
°¨t_addr
, 1, 
Ál£
);

160 i‡(
	`u∆ikñy
(((
pos
 + 
Àn
Ë& 0x7Ë&& (’o†& (
CACHELINE_SIZE
 - 1)) !=

161 ((
pos
 + 
Àn
Ë& (
CACHELINE_SIZE
 - 1)))))

162 
	`pmfs_Êush_buf„r
(
°¨t_addr
 + 
Àn
, 1, 
Ál£
);

163 
	}
}

165 
ölöe
 
size_t
 
	$mem˝y_to_nvmm
(*
kmem
, 
loff_t
 
off£t
,

166 c⁄° 
__u£r
 *
buf
, 
size_t
 
byãs
)

168 
size_t
 
c›õd
;

170 i‡(
suµ‹t_˛wb_pmfs
) {

171 
c›õd
 = 
byãs
 - 
	`__c›y_‰om_u£r
(
kmem
 + 
off£t
, 
buf
, bytes);

172 
	`pmfs_Êush_buf„r
(
kmem
 + 
off£t
, 
c›õd
, 0);

174 
c›õd
 = 
byãs
 - 
	`__c›y_‰om_u£r_ö©omic_noˇche
(
kmem
 +

175 
off£t
, 
buf
, 
byãs
);

178  
c›õd
;

179 
	}
}

181 
ssize_t


182 
	$__pmfs_xù_fûe_wrôe
(
addªss_•a˚
 *
m≠pög
, c⁄° 
__u£r
 *
buf
,

183 
size_t
 
cou¡
, 
loff_t
 
pos
,Üoff_à*
µos
)

185 
öode
 *öodê
m≠pög
->
ho°
;

186 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

187 
°©us
 = 0;

188 
size_t
 
byãs
;

189 
size_t
 
ªmaö
;

190 
ssize_t
 
wrôãn
 = 0;

191 
pmfs_öode
 *
pi
;

192 
timög_t
 
mem˝y_time
, 
wrôe_time
;

194 
	`PMFS_START_TIMING
(
öã∫Æ_wrôe_t
, 
wrôe_time
);

195 
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öode
->
i_öo
);

197 
ödex
;

198 
off£t
;

199 
size_t
 
c›õd
;

200 *
xmem
;

201 
xp‚
;

203 * 
ôî_buf
;

204 * 
ôî_xmem
;

205 
size_t
 
chunk_off£t
;

207 
off£t
 = (
pos
 & (
sb
->
s_blocksize
 - 1));

208 
ödex
 = 
pos
 >> 
sb
->
s_blocksize_bôs
;

209 
byãs
 = 
sb
->
s_blocksize
 - 
off£t
;

210 i‡(
byãs
 > 
cou¡
)

211 
byãs
 = 
cou¡
;

213 
°©us
 = 
	`pmfs_gë_xù_mem
(
m≠pög
, 
ödex
, 1, &
xmem
, &
xp‚
);

214 i‡(
°©us
)

217 
	`PMFS_START_TIMING
(
mem˝y_w_t
, 
mem˝y_time
);

218 
	`pmfs_xù_mem_¥Ÿe˘
(
sb
, 
xmem
 + 
off£t
, 
byãs
, 1);

220 
ôî_xmem
 = 
xmem
 + 
off£t
;

221 
ôî_buf
 = (*Ë
buf
;

222 
ªmaö
 = 
byãs
;

223 
c›õd
 = 0;

225 
ªmaö
 != 0) {

226 
size_t
 
adv
, 
to_c›y
;

228 
chunk_off£t
 = (Ë
ôî_xmem
 &

229 (
PMFS_MEMCPY_CHUNK_SIZE
 - 1);

232 
to_c›y
 = 
PMFS_MEMCPY_CHUNK_SIZE
 - 
chunk_off£t
;

233 i‡(
to_c›y
 > 
ªmaö
)

234 
to_c›y
 = 
ªmaö
;

236 
adv
 = 
	`mem˝y_to_nvmm
((*)
ôî_xmem
, 0, 
ôî_buf
, 
to_c›y
);

238 
c›õd
 +
adv
;

239 
ªmaö
 -
adv
;

240 
ôî_xmem
 +
adv
;

241 
ôî_buf
 +
adv
;

243 i‡(
	`√ed_ªsched
()) {

244 
	`c⁄d_ªsched
();

248 
	`pmfs_xù_mem_¥Ÿe˘
(
sb
, 
xmem
 + 
off£t
, 
byãs
, 0);

249 
	`PMFS_END_TIMING
(
mem˝y_w_t
, 
mem˝y_time
);

254 
	`pmfs_Êush_edge_ˇchñöes
(
pos
, 
c›õd
, 
xmem
 + 
off£t
);

256 i‡(
	`likñy
(
c›õd
 > 0)) {

257 
°©us
 = 
c›õd
;

259 i‡(
°©us
 >= 0) {

260 
wrôãn
 +
°©us
;

261 
cou¡
 -
°©us
;

262 
pos
 +
°©us
;

263 
buf
 +
°©us
;

266 i‡(
	`u∆ikñy
(
c›õd
 !
byãs
))

267 i‡(
°©us
 >= 0)

268 
°©us
 = -
EFAULT
;

269 i‡(
°©us
 < 0)

272 } 
cou¡
);

273 *
µos
 = 
pos
;

278 i‡(
pos
 > 
öode
->
i_size
) {

279 
	`i_size_wrôe
(
öode
, 
pos
);

280 
	`pmfs_upd©e_isize
(
öode
, 
pi
);

283 
	`PMFS_END_TIMING
(
öã∫Æ_wrôe_t
, 
wrôe_time
);

284  
wrôãn
 ? wrôã¿: 
°©us
;

285 
	}
}

290 
ssize_t
 
	$pmfs_fûe_wrôe_Á°
(
su≥r_block
 *
sb
, 
öode
 *inode,

291 
pmfs_öode
 *
pi
, c⁄° 
__u£r
 *
buf
, 
size_t
 
cou¡
, 
loff_t
 
pos
,

292 
loff_t
 *
µos
, 
u64
 
block
)

294 *
xmem
 = 
	`pmfs_gë_block
(
sb
, 
block
);

295 
size_t
 
c›õd
, 
ªt
 = 0, 
off£t
, 
to_c›y
;

296 
size_t
 
chunk_off£t
;

297 
timög_t
 
mem˝y_time
;

298 *
ôî_xmem
, *
ôî_buf
;

299 
loff_t
 
pos_ôî
;

301 
off£t
 = 
pos
 & (
sb
->
s_blocksize
 - 1);

302 
ôî_xmem
 = 
xmem
 + 
off£t
;

303 
ôî_buf
 = (*Ë
buf
;

304 
c›õd
 = 0;

305 
pos_ôî
 = 
pos
;

307 
	`PMFS_START_TIMING
(
mem˝y_w_t
, 
mem˝y_time
);

308 
	`pmfs_xù_mem_¥Ÿe˘
(
sb
, 
xmem
 + 
off£t
, 
cou¡
, 1);

309 
cou¡
 != 0) {

310 
size_t
 
adv
;

312 
chunk_off£t
 = 
pos_ôî
 & (
PMFS_MEMCPY_CHUNK_SIZE
 - 1);

314 
to_c›y
 = 
PMFS_MEMCPY_CHUNK_SIZE
 - 
chunk_off£t
;

315 i‡(
to_c›y
 > 
cou¡
)

316 
to_c›y
 = 
cou¡
;

318 
adv
 = 
	`mem˝y_to_nvmm
((*)
ôî_xmem
, 0, 
ôî_buf
, 
to_c›y
);

320 
c›õd
 +
adv
;

321 
cou¡
 -
adv
;

322 
ôî_xmem
 +
adv
;

323 
ôî_buf
 +
adv
;

324 
pos_ôî
 +
adv
;

326 i‡(
	`√ed_ªsched
()) {

327 
	`c⁄d_ªsched
();

330 
	`pmfs_xù_mem_¥Ÿe˘
(
sb
, 
xmem
 + 
off£t
, 
cou¡
, 0);

331 
	`PMFS_END_TIMING
(
mem˝y_w_t
, 
mem˝y_time
);

333 
	`pmfs_Êush_edge_ˇchñöes
(
pos
, 
c›õd
, 
xmem
 + 
off£t
);

335 i‡(
	`likñy
(
c›õd
 > 0)) {

336 
pos
 +
c›õd
;

337 
ªt
 = 
c›õd
;

339 i‡(
	`u∆ikñy
(
c›õd
 !
cou¡
 && copied == 0))

340 
ªt
 = -
EFAULT
;

341 *
µos
 = 
pos
;

343 
öode
->
i_mtime
 = 
	`öode_£t_˘ime_cuºít
(inode);

344 i‡(
pos
 > 
öode
->
i_size
) {

347 
	`PERSISTENT_MARK
();

348 
	`i_size_wrôe
(
öode
, 
pos
);

349 
	`PERSISTENT_BARRIER
();

350 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

351 
	`pmfs_upd©e_time_™d_size
(
öode
, 
pi
);

352 
	`pmfs_memlock_öode
(
sb
, 
pi
);

354 
u64
 
c_m_time
;

359 
c_m_time
 = (
	`öode_gë_˘ime_£c
(
öode
) & 0xFFFFFFFF);

360 
c_m_time
 = c_m_time | (c_m_time << 32);

361 
	`pmfs_memu∆ock_öode
(
sb
, 
pi
);

362 
	`pmfs_mem˝y_©omic
(&
pi
->
i_˘ime
, &
c_m_time
, 8);

363 
	`pmfs_memlock_öode
(
sb
, 
pi
);

365 
	`pmfs_Êush_buf„r
(
pi
, 1, 
Ál£
);

366  
ªt
;

367 
	}
}

375 
ölöe
 
	$pmfs_˛ór_edge_blk
 (
su≥r_block
 *
sb
, 

376 
pmfs_öode
 *
pi
, 
boﬁ
 
√w_blk
, 
block
, 
size_t
 
blk_off
,

377 
boﬁ
 
is_íd_blk
)

379 *
±r
, *
±r_ôî
;

380 
size_t
 
cou¡
, 
off£t
;

381 
blkƒ
;

383 i‡(
√w_blk
) {

384 
blkƒ
 = 
block
 >> (
	`pmfs_öode_blk_shi·
(
pi
) -

385 
sb
->
s_blocksize_bôs
);

386 
±r
 = 
	`pmfs_gë_block
(
sb
, 
	`__pmfs_föd_d©a_block
(sb, 
pi
, 
blkƒ
));

387 i‡(
±r
 !
NULL
) {

388 i‡(
is_íd_blk
) {

389 
±r
 =Öå + 
blk_off
 - (blk_off % 8);

390 
cou¡
 = 
	`pmfs_öode_blk_size
(
pi
) -

391 
blk_off
 + (blk_off % 8);

393 
cou¡
 = 
blk_off
 + (8 - (blk_off % 8));

395 
±r_ôî
 = 
±r
;

397 
	`pmfs_memu∆ock_ønge
(
sb
, 
±r
, 
	`pmfs_öode_blk_size
(
pi
));

399 
cou¡
 > 0) {

400 
size_t
 
to_mem£t
;

401 
off£t
 = (Ë
±r_ôî
 & (
PMFS_MEMCPY_CHUNK_SIZE
 - 1);

402 
to_mem£t
 = 
PMFS_MEMCPY_CHUNK_SIZE
 - 
off£t
;

404 i‡(
to_mem£t
 > 
cou¡
)

405 
to_mem£t
 = 
cou¡
;

407 
	`mem£t_¡
(
±r_ôî
, 0, 
to_mem£t
);

409 
±r_ôî
 +
to_mem£t
;

410 
cou¡
 -
to_mem£t
;

412 i‡(
	`√ed_ªsched
()) {

413 
	`c⁄d_ªsched
();

416 
	`pmfs_memlock_ønge
(
sb
, 
±r
, 
	`pmfs_öode_blk_size
(
pi
));

419 
	}
}

421 
ssize_t
 
	$pmfs_xù_fûe_wrôe
(
fûe
 *
fûp
, c⁄° 
__u£r
 *
buf
,

422 
size_t
 
Àn
, 
loff_t
 *
µos
)

424 
addªss_•a˚
 *
m≠pög
 = 
fûp
->
f_m≠pög
;

425 
öode
 *öodê
m≠pög
->
ho°
;

426 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

427 
pmfs_å™ß˘i⁄_t
 *
å™s
;

428 
pmfs_öode
 *
pi
;

429 
ssize_t
 
wrôãn
 = 0;

430 
loff_t
 
pos
;

431 
u64
 
block
;

432 
boﬁ
 
√w_sblk
 = 
Ál£
, 
√w_eblk
 = false;

433 
size_t
 
cou¡
, 
off£t
, 
eblk_off£t
, 
ªt
;

434 
°¨t_blk
, 
íd_blk
, 
num_blocks
, 
max_logíåõs
;

435 
boﬁ
 
ßme_block
;

436 
timög_t
 
xù_wrôe_time
, 
xù_wrôe_Á°_time
;

438 
	`PMFS_START_TIMING
(
xù_wrôe_t
, 
xù_wrôe_time
);

440 
	`sb_°¨t_wrôe
(
öode
->
i_sb
);

441 
	`öode_lock
(
öode
);

444 i‡(!
	`ac˚ss_ok
(
buf
, 
Àn
)) {

445 
ªt
 = -
EFAULT
;

446 
out
;

448 
pos
 = *
µos
;

449 
cou¡
 = 
Àn
;

450 i‡(
cou¡
 == 0) {

451 
ªt
 = 0;

452 
out
;

455 
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öode
->
i_öo
);

457 
off£t
 = 
pos
 & (
sb
->
s_blocksize
 - 1);

458 
num_blocks
 = ((
cou¡
 + 
off£t
 - 1Ë>> 
sb
->
s_blocksize_bôs
) + 1;

460 
off£t
 = 
pos
 & (
	`pmfs_öode_blk_size
(
pi
) - 1);

461 
°¨t_blk
 = 
pos
 >> 
sb
->
s_blocksize_bôs
;

462 
íd_blk
 = 
°¨t_blk
 + 
num_blocks
 - 1;

464 
block
 = 
	`pmfs_föd_d©a_block
(
öode
, 
°¨t_blk
);

467 
ßme_block
 = (((
cou¡
 + 
off£t
 - 1) >>

468 
	`pmfs_öode_blk_shi·
(
pi
)) == 0) ? 1 : 0;

469 i‡(
block
 && 
ßme_block
) {

470 
	`PMFS_START_TIMING
(
xù_wrôe_Á°_t
, 
xù_wrôe_Á°_time
);

471 
ªt
 = 
	`pmfs_fûe_wrôe_Á°
(
sb
, 
öode
, 
pi
, 
buf
, 
cou¡
, 
pos
,

472 
µos
, 
block
);

473 
	`PMFS_END_TIMING
(
xù_wrôe_Á°_t
, 
xù_wrôe_Á°_time
);

474 
out
;

476 
max_logíåõs
 = 
num_blocks
 / 
MAX_PTRS_PER_LENTRY
 + 2;

477 i‡(
max_logíåõs
 > 
MAX_METABLOCK_LENTRIES
)

478 
max_logíåõs
 = 
MAX_METABLOCK_LENTRIES
;

480 
å™s
 = 
	`pmfs_√w_å™ß˘i⁄
(
sb
, 
MAX_INODE_LENTRIES
 + 
max_logíåõs
);

481 i‡(
	`IS_ERR
(
å™s
)) {

482 
ªt
 = 
	`PTR_ERR
(
å™s
);

483 
out
;

485 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
pi
, 
MAX_DATA_PER_LENTRY
, 
LE_DATA
);

487 
ªt
 = 
	`fûe_ªmove_¥ivs
(
fûp
);

488 i‡(
ªt
) {

489 
	`pmfs_ab‹t_å™ß˘i⁄
(
sb
, 
å™s
);

490 
out
;

493 
öode
->
i_mtime
 = 
	`öode_£t_˘ime_cuºít
(inode);

494 
	`pmfs_upd©e_time
(
öode
, 
pi
);

498 i‡(
off£t
 != 0) {

499 i‡(
	`pmfs_föd_d©a_block
(
öode
, 
°¨t_blk
) == 0)

500 
√w_sblk
 = 
åue
;

503 
eblk_off£t
 = (
pos
 + 
cou¡
Ë& (
	`pmfs_öode_blk_size
(
pi
) - 1);

504 i‡((
eblk_off£t
 != 0) &&

505 (
	`pmfs_föd_d©a_block
(
öode
, 
íd_blk
) == 0))

506 
√w_eblk
 = 
åue
;

509 
	`pmfs_Æloc_blocks
(
å™s
, 
öode
, 
°¨t_blk
, 
num_blocks
, 
Ál£
);

512 
	`pmfs_˛ór_edge_blk
(
sb
, 
pi
, 
√w_sblk
, 
°¨t_blk
, 
off£t
, 
Ál£
);

513 
	`pmfs_˛ór_edge_blk
(
sb
, 
pi
, 
√w_eblk
, 
íd_blk
, 
eblk_off£t
, 
åue
);

515 
wrôãn
 = 
	`__pmfs_xù_fûe_wrôe
(
m≠pög
, 
buf
, 
cou¡
, 
pos
, 
µos
);

516 i‡(
wrôãn
 < 0 || wrôã¿!
cou¡
)

517 
	`pmfs_dbg_vîbo£
("write incomplete/failed: written %ldÜen %ld"

519 
wrôãn
, 
cou¡
, 
pos
, 
°¨t_blk
, 
num_blocks
);

521 
	`pmfs_commô_å™ß˘i⁄
(
sb
, 
å™s
);

522 
ªt
 = 
wrôãn
;

523 
out
:

524 
	`öode_u∆ock
(
öode
);

525 
	`sb_íd_wrôe
(
öode
->
i_sb
);

526 
	`PMFS_END_TIMING
(
xù_wrôe_t
, 
xù_wrôe_time
);

527  
ªt
;

528 
	}
}

533 
vm_Áu…_t
 
	$__pmfs_xù_fûe_Áu…
(
vm_¨ó_°ru˘
 *
vma
,

534 
vm_Áu…
 *
vmf
)

536 
addªss_•a˚
 *
m≠pög
 = 
vma
->
vm_fûe
->
f_m≠pög
;

537 
öode
 *öodê
m≠pög
->
ho°
;

538 
pgoff_t
 
size
;

539 *
xù_mem
;

540 
xù_p‚
;

541 
vm_Áu…_t
 
îr
;

543 
size
 = (
	`i_size_ªad
(
öode
Ë+ 
PAGE_SIZE
 - 1Ë>> 
PAGE_SHIFT
;

544 i‡(
vmf
->
pgoff
 >
size
) {

545 
	`pmfs_dbg
("[%s:%d]Ögoff >= size(SIGBUS). vm_start(0x%lx),"

547 
__func__
, 
__LINE__
, 
vma
->
vm_°¨t
, vma->
vm_íd
,

548 
vmf
->
pgoff
, ()vmf->
addªss
, 
size
);

549  
VM_FAULT_SIGBUS
;

552 
îr
 = 
	`pmfs_gë_xù_mem
(
m≠pög
, 
vmf
->
pgoff
, 1, &
xù_mem
, &
xù_p‚
);

553 i‡(
	`u∆ikñy
(
îr
)) {

554 
	`pmfs_dbg
("[%s:%d] get_xip_mem failed(OOM). vm_start(0x%lx),"

556 
__func__
, 
__LINE__
, 
vma
->
vm_°¨t
, vma->
vm_íd
,

557 
vmf
->
pgoff
, ()vmf->
addªss
);

558  
VM_FAULT_SIGBUS
;

561 
	`pmfs_dbg_mm≠v
("[%s:%d] vm_start(0x%lx), vm_end(0x%lx),Ögoff(0x%lx), "

562 "BlockSz(0x%lx), VA(0x%lx)->PA(0x%lx)\n", 
__func__
,

563 
__LINE__
, 
vma
->
vm_°¨t
, vma->
vm_íd
, 
vmf
->
pgoff
,

564 
PAGE_SIZE
, ()
vmf
->
addªss
,

565 ()
xù_p‚
 << 
PAGE_SHIFT
);

567 
îr
 = 
	`vmf_ö£π_mixed
(
vma
, ()
vmf
->
addªss
,

568 
	`p‚_to_p‚_t
(
xù_p‚
));

570 i‡(
îr
 =-
ENOMEM
)

571  
VM_FAULT_SIGBUS
;

576 i‡(
îr
 !-
EBUSY
)

577 
	`BUG_ON
(
îr
);

578  
VM_FAULT_NOPAGE
;

579 
	}
}

581 
vm_Áu…_t
 
	$pmfs_xù_fûe_Áu…
(
vm_Áu…
 *
vmf
)

583 
vm_Áu…_t
 
ªt
 = 0;

584 
timög_t
 
Áu…_time
;

586 
	`PMFS_START_TIMING
(
mm≠_Áu…_t
, 
Áu…_time
);

587 
	`rcu_ªad_lock
();

588 
ªt
 = 
	`__pmfs_xù_fûe_Áu…
(
vmf
->
vma
, vmf);

589 
	`rcu_ªad_u∆ock
();

590 
	`PMFS_END_TIMING
(
mm≠_Áu…_t
, 
Áu…_time
);

591  
ªt
;

592 
	}
}

594 
	$pmfs_föd_™d_Æloc_blocks
(
öode
 *öode, 
£˘‹_t
 
iblock
,

595 
£˘‹_t
 *
d©a_block
, 
¸óã
)

597 
îr
 = -
EIO
;

598 
u64
 
block
;

599 
pmfs_å™ß˘i⁄_t
 *
å™s
;

600 
pmfs_öode
 *
pi
;

602 
block
 = 
	`pmfs_föd_d©a_block
(
öode
, 
iblock
);

604 i‡(!
block
) {

605 
su≥r_block
 *
sb
 = 
öode
->
i_sb
;

606 i‡(!
¸óã
) {

607 
îr
 = -
ENODATA
;

608 
îr
;

611 
pi
 = 
	`pmfs_gë_öode
(
sb
, 
öode
->
i_öo
);

612 
å™s
 = 
	`pmfs_cuºít_å™ß˘i⁄
();

613 i‡(
å™s
) {

614 
îr
 = 
	`pmfs_Æloc_blocks
(
å™s
, 
öode
, 
iblock
, 1, 
åue
);

615 i‡(
îr
) {

616 
	`pmfs_dbg_vîbo£
("[%s:%d] Alloc failed!\n",

617 
__func__
, 
__LINE__
);

618 
îr
;

622 
å™s
 = 
	`pmfs_√w_å™ß˘i⁄
(
sb
, 
MAX_INODE_LENTRIES
);

623 i‡(
	`IS_ERR
(
å™s
)) {

624 
îr
 = 
	`PTR_ERR
(
å™s
);

625 
îr
;

628 
	`rcu_ªad_u∆ock
();

629 
	`öode_lock
(
öode
);

631 
	`pmfs_add_logíåy
(
sb
, 
å™s
, 
pi
, 
MAX_DATA_PER_LENTRY
,

632 
LE_DATA
);

633 
îr
 = 
	`pmfs_Æloc_blocks
(
å™s
, 
öode
, 
iblock
, 1, 
åue
);

635 
	`pmfs_commô_å™ß˘i⁄
(
sb
, 
å™s
);

637 
	`öode_u∆ock
(
öode
);

638 
	`rcu_ªad_lock
();

639 i‡(
îr
) {

640 
	`pmfs_dbg_vîbo£
("[%s:%d] Alloc failed!\n",

641 
__func__
, 
__LINE__
);

642 
îr
;

645 
block
 = 
	`pmfs_föd_d©a_block
(
öode
, 
iblock
);

646 i‡(!
block
) {

647 
	`pmfs_dbg
("[%s:%d] Butálloc didn't fail!\n",

648 
__func__
, 
__LINE__
);

649 
îr
 = -
ENODATA
;

650 
îr
;

653 
	`pmfs_dbg_mm≠vv
("iblock 0x%ŒxáŒoˇãd_block 0x%Œx\n", 
iblock
,

654 
block
);

656 *
d©a_block
 = 
block
;

657 
îr
 = 0;

659 
îr
:

660  
îr
;

661 
	}
}

663 
ölöe
 
	$__pmfs_gë_block
(
öode
 *öode, 
pgoff_t
 
pgoff
,

664 
¸óã
, 
£˘‹_t
 *
ªsu…
)

666 
rc
 = 0;

668 
rc
 = 
	`pmfs_föd_™d_Æloc_blocks
(
öode
, (
£˘‹_t
)
pgoff
, 
ªsu…
,

669 
¸óã
);

670  
rc
;

671 
	}
}

673 
	$pmfs_gë_xù_mem
(
addªss_•a˚
 *
m≠pög
, 
pgoff_t
 
pgoff
, 
¸óã
,

674 **
kmem
, *
p‚
)

676 
rc
;

677 
£˘‹_t
 
block
 = 0;

678 
öode
 *öodê
m≠pög
->
ho°
;

680 
rc
 = 
	`__pmfs_gë_block
(
öode
, 
pgoff
, 
¸óã
, &
block
);

681 i‡(
rc
) {

682 
	`pmfs_dbg1
("[%s:%d]Ñc(%d), sb->physaddr(0x%llx), block(0x%llx),"

683 "Ögoff(0x%lx), fœg(0x%x), PFN(0x%lx)\n", 
__func__
,

684 
__LINE__
, 
rc
, 
	`PMFS_SB
(
öode
->
i_sb
)->
phys_addr
,

685 
block
, 
pgoff
, 
¸óã
, *
p‚
);

686  
rc
;

689 *
kmem
 = 
	`pmfs_gë_block
(
öode
->
i_sb
, 
block
);

690 *
p‚
 = 
	`pmfs_gë_p‚
(
öode
->
i_sb
, 
block
);

692 
	`pmfs_dbg_mm≠vv
("[%s:%d] sb->physaddr(0x%llx), block(0x%llx),"

693 "Ögoff(0x%lx), fœg(0x%x), PFN(0x%lx)\n", 
__func__
, 
__LINE__
,

694 
	`PMFS_SB
(
öode
->
i_sb
)->
phys_addr
, 
block
, 
pgoff
, 
¸óã
, *
p‚
);

696 
	}
}

698 c⁄° 
vm_›î©i⁄s_°ru˘
 
	gpmfs_xù_vm_›s
 = {

699 .
Áu…
 = 
pmfs_xù_fûe_Áu…
,

702 
	$pmfs_xù_fûe_mm≠
(
fûe
 *fûe, 
vm_¨ó_°ru˘
 *
vma
)

706 
	`fûe_ac˚s£d
(
fûe
);

709 
	`vm_Êags_£t
(
vma
, 
VM_MIXEDMAP
);

711 
vma
->
vm_›s
 = &
pmfs_xù_vm_›s
;

712 
	`pmfs_dbg_mm≠4k
("[%s:%d] MMAP 4KPAGE vm_start(0x%lx),"

714 "vm_∑ge_¥Ÿ(0x%lx)\n", 
__func__
,

715 
__LINE__
, 
vma
->
vm_°¨t
, vma->
vm_íd
,

716 
vma
->
vm_Êags
, 
	`pg¥Ÿ_vÆ
(vma->
vm_∑ge_¥Ÿ
));

719 
	}
}

	@xip.h

13 
pmfs_gë_xù_mem
(
addªss_•a˚
 *, 
pgoff_t
, , **,

15 
ssize_t
 
pmfs_xù_fûe_ªad
(
fûe
 *
fûp
, 
__u£r
 *
buf
, 
size_t
 
Àn
,

16 
loff_t
 *
µos
);

17 
ssize_t
 
pmfs_xù_fûe_wrôe
(
fûe
 *
fûp
, c⁄° 
__u£r
 *
buf
,

18 
size_t
 
Àn
, 
loff_t
 *
µos
);

19 
pmfs_xù_fûe_mm≠
(
fûe
 *fûe, 
vm_¨ó_°ru˘
 *
vma
);

21 
ölöe
 
	$pmfs_u£_xù
(
su≥r_block
 *
sb
)

23 
pmfs_sb_öfo
 *
sbi
 = 
	`PMFS_SB
(
sb
);

25  
sbi
->
s_mou¡_›t
 & 
PMFS_MOUNT_XIP
;

26 
	}
}

28 
	#m≠pög_is_xù
(
m≠
Ë(m≠->
a_›s
->
gë_xù_mem
)

	)

	@/usr/include/linux/capability.h

14 #i‚de‡
_LINUX_CAPABILITY_H


15 
	#_LINUX_CAPABILITY_H


	)

17 
	~<löux/ty≥s.h
>

30 
	#_LINUX_CAPABILITY_VERSION_1
 0x19980330

	)

31 
	#_LINUX_CAPABILITY_U32S_1
 1

	)

33 
	#_LINUX_CAPABILITY_VERSION_2
 0x20071026

	)

34 
	#_LINUX_CAPABILITY_U32S_2
 2

	)

36 
	#_LINUX_CAPABILITY_VERSION_3
 0x20080522

	)

37 
	#_LINUX_CAPABILITY_U32S_3
 2

	)

39 
	s__u£r_ˇp_hódî_°ru˘
 {

40 
__u32
 
	mvîsi⁄
;

41 
	mpid
;

42 } *
	tˇp_u£r_hódî_t
;

44 
	s__u£r_ˇp_d©a_°ru˘
 {

45 
__u32
 
	mef„˘ive
;

46 
__u32
 
	m≥rmôãd
;

47 
__u32
 
	möhîôabÀ
;

48 } *
	tˇp_u£r_d©a_t
;

51 
	#VFS_CAP_REVISION_MASK
 0xFF000000

	)

52 
	#VFS_CAP_REVISION_SHIFT
 24

	)

53 
	#VFS_CAP_FLAGS_MASK
 ~
VFS_CAP_REVISION_MASK


	)

54 
	#VFS_CAP_FLAGS_EFFECTIVE
 0x000001

	)

56 
	#VFS_CAP_REVISION_1
 0x01000000

	)

57 
	#VFS_CAP_U32_1
 1

	)

58 
	#XATTR_CAPS_SZ_1
 ((
__À32
)*(1 + 2*
VFS_CAP_U32_1
))

	)

60 
	#VFS_CAP_REVISION_2
 0x02000000

	)

61 
	#VFS_CAP_U32_2
 2

	)

62 
	#XATTR_CAPS_SZ_2
 ((
__À32
)*(1 + 2*
VFS_CAP_U32_2
))

	)

64 
	#VFS_CAP_REVISION_3
 0x03000000

	)

65 
	#VFS_CAP_U32_3
 2

	)

66 
	#XATTR_CAPS_SZ_3
 ((
__À32
)*(2 + 2*
VFS_CAP_U32_3
))

	)

68 
	#XATTR_CAPS_SZ
 
XATTR_CAPS_SZ_3


	)

69 
	#VFS_CAP_U32
 
VFS_CAP_U32_3


	)

70 
	#VFS_CAP_REVISION
 
VFS_CAP_REVISION_3


	)

72 
	svfs_ˇp_d©a
 {

73 
__À32
 
	mmagic_ëc
;

75 
__À32
 
	m≥rmôãd
;

76 
__À32
 
	möhîôabÀ
;

77 } 
	md©a
[
VFS_CAP_U32
];

83 
	svfs_ns_ˇp_d©a
 {

84 
__À32
 
	mmagic_ëc
;

86 
__À32
 
	m≥rmôãd
;

87 
__À32
 
	möhîôabÀ
;

88 } 
	md©a
[
VFS_CAP_U32
];

89 
__À32
 
	mroŸid
;

98 
	#_LINUX_CAPABILITY_VERSION
 
_LINUX_CAPABILITY_VERSION_1


	)

99 
	#_LINUX_CAPABILITY_U32S
 
_LINUX_CAPABILITY_U32S_1


	)

111 
	#CAP_CHOWN
 0

	)

117 
	#CAP_DAC_OVERRIDE
 1

	)

123 
	#CAP_DAC_READ_SEARCH
 2

	)

129 
	#CAP_FOWNER
 3

	)

138 
	#CAP_FSETID
 4

	)

144 
	#CAP_KILL
 5

	)

150 
	#CAP_SETGID
 6

	)

155 
	#CAP_SETUID
 7

	)

172 
	#CAP_SETPCAP
 8

	)

176 
	#CAP_LINUX_IMMUTABLE
 9

	)

181 
	#CAP_NET_BIND_SERVICE
 10

	)

185 
	#CAP_NET_BROADCAST
 11

	)

201 
	#CAP_NET_ADMIN
 12

	)

207 
	#CAP_NET_RAW
 13

	)

213 
	#CAP_IPC_LOCK
 14

	)

217 
	#CAP_IPC_OWNER
 15

	)

220 
	#CAP_SYS_MODULE
 16

	)

225 
	#CAP_SYS_RAWIO
 17

	)

229 
	#CAP_SYS_CHROOT
 18

	)

233 
	#CAP_SYS_PTRACE
 19

	)

237 
	#CAP_SYS_PACCT
 20

	)

276 
	#CAP_SYS_ADMIN
 21

	)

280 
	#CAP_SYS_BOOT
 22

	)

291 
	#CAP_SYS_NICE
 23

	)

306 
	#CAP_SYS_RESOURCE
 24

	)

312 
	#CAP_SYS_TIME
 25

	)

317 
	#CAP_SYS_TTY_CONFIG
 26

	)

321 
	#CAP_MKNOD
 27

	)

325 
	#CAP_LEASE
 28

	)

329 
	#CAP_AUDIT_WRITE
 29

	)

333 
	#CAP_AUDIT_CONTROL
 30

	)

338 
	#CAP_SETFCAP
 31

	)

346 
	#CAP_MAC_OVERRIDE
 32

	)

355 
	#CAP_MAC_ADMIN
 33

	)

359 
	#CAP_SYSLOG
 34

	)

363 
	#CAP_WAKE_ALARM
 35

	)

367 
	#CAP_BLOCK_SUSPEND
 36

	)

371 
	#CAP_AUDIT_READ
 37

	)

378 
	#CAP_PERFMON
 38

	)

409 
	#CAP_BPF
 39

	)

416 
	#CAP_CHECKPOINT_RESTORE
 40

	)

418 
	#CAP_LAST_CAP
 
CAP_CHECKPOINT_RESTORE


	)

420 
	#ˇp_vÆid
(
x
Ë((xË>0 && (xË<
CAP_LAST_CAP
)

	)

426 
	#CAP_TO_INDEX
(
x
Ë((xË>> 5Ë

	)

427 
	#CAP_TO_MASK
(
x
Ë(1U << ((xË& 31)Ë

	)

	@/usr/include/linux/falloc.h

2 #i‚de‡
_FALLOC_H_


3 
	#_FALLOC_H_


	)

5 
	#FALLOC_FL_KEEP_SIZE
 0x01

	)

6 
	#FALLOC_FL_PUNCH_HOLE
 0x02

	)

7 
	#FALLOC_FL_NO_HIDE_STALE
 0x04

	)

29 
	#FALLOC_FL_COLLAPSE_RANGE
 0x08

	)

43 
	#FALLOC_FL_ZERO_RANGE
 0x10

	)

60 
	#FALLOC_FL_INSERT_RANGE
 0x20

	)

78 
	#FALLOC_FL_UNSHARE_RANGE
 0x40

	)

	@/usr/include/linux/fs.h

2 #i‚de‡
_LINUX_FS_H


3 
	#_LINUX_FS_H


	)

13 
	~<löux/limôs.h
>

14 
	~<löux/io˘l.h
>

15 
	~<löux/ty≥s.h
>

16 
	~<löux/fs¸y±.h
>

19 
	~<löux/mou¡.h
>

32 #unde‡
NR_OPEN


33 
	#INR_OPEN_CUR
 1024

	)

34 
	#INR_OPEN_MAX
 4096

	)

36 
	#BLOCK_SIZE_BITS
 10

	)

37 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

39 
	#SEEK_SET
 0

	)

40 
	#SEEK_CUR
 1

	)

41 
	#SEEK_END
 2

	)

42 
	#SEEK_DATA
 3

	)

43 
	#SEEK_HOLE
 4

	)

44 
	#SEEK_MAX
 
SEEK_HOLE


	)

46 
	#RENAME_NOREPLACE
 (1 << 0Ë

	)

47 
	#RENAME_EXCHANGE
 (1 << 1Ë

	)

48 
	#RENAME_WHITEOUT
 (1 << 2Ë

	)

50 
	sfûe_˛⁄e_ønge
 {

51 
__s64
 
	m§c_fd
;

52 
__u64
 
	m§c_off£t
;

53 
__u64
 
	m§c_Àngth
;

54 
__u64
 
	mde°_off£t
;

57 
	sf°rim_ønge
 {

58 
__u64
 
	m°¨t
;

59 
__u64
 
	mÀn
;

60 
__u64
 
	mmöÀn
;

64 
	#FILE_DEDUPE_RANGE_SAME
 0

	)

65 
	#FILE_DEDUPE_RANGE_DIFFERS
 1

	)

68 
	sfûe_dedu≥_ønge_öfo
 {

69 
__s64
 
	mde°_fd
;

70 
__u64
 
	mde°_off£t
;

71 
__u64
 
	mbyãs_dedu≥d
;

78 
__s32
 
	m°©us
;

79 
__u32
 
	mª£rved
;

83 
	sfûe_dedu≥_ønge
 {

84 
__u64
 
	m§c_off£t
;

85 
__u64
 
	m§c_Àngth
;

86 
__u16
 
	mde°_cou¡
;

87 
__u16
 
	mª£rved1
;

88 
__u32
 
	mª£rved2
;

89 
fûe_dedu≥_ønge_öfo
 
	möfo
[0];

93 
	sfûes_°©_°ru˘
 {

94 
	mƒ_fûes
;

95 
	mƒ_‰ì_fûes
;

96 
	mmax_fûes
;

99 
	söodes_°©_t
 {

100 
	mƒ_öodes
;

101 
	mƒ_unu£d
;

102 
	mdummy
[5];

106 
	#NR_FILE
 8192

	)

111 
	sfsx©å
 {

112 
__u32
 
	mfsx_xÊags
;

113 
__u32
 
	mfsx_extsize
;

114 
__u32
 
	mfsx_√xã¡s
;

115 
__u32
 
	mfsx_¥ojid
;

116 
__u32
 
	mfsx_cowextsize
;

117 
	mfsx_∑d
[8];

123 
	#FS_XFLAG_REALTIME
 0x00000001

	)

124 
	#FS_XFLAG_PREALLOC
 0x00000002

	)

125 
	#FS_XFLAG_IMMUTABLE
 0x00000008

	)

126 
	#FS_XFLAG_APPEND
 0x00000010

	)

127 
	#FS_XFLAG_SYNC
 0x00000020

	)

128 
	#FS_XFLAG_NOATIME
 0x00000040

	)

129 
	#FS_XFLAG_NODUMP
 0x00000080

	)

130 
	#FS_XFLAG_RTINHERIT
 0x00000100

	)

131 
	#FS_XFLAG_PROJINHERIT
 0x00000200

	)

132 
	#FS_XFLAG_NOSYMLINKS
 0x00000400

	)

133 
	#FS_XFLAG_EXTSIZE
 0x00000800

	)

134 
	#FS_XFLAG_EXTSZINHERIT
 0x00001000

	)

135 
	#FS_XFLAG_NODEFRAG
 0x00002000

	)

136 
	#FS_XFLAG_FILESTREAM
 0x00004000

	)

137 
	#FS_XFLAG_DAX
 0x00008000

	)

138 
	#FS_XFLAG_COWEXTSIZE
 0x00010000

	)

139 
	#FS_XFLAG_HASATTR
 0x80000000

	)

144 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

145 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

146 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

147 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

148 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

149 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

150 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

151 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

152 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

153 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

154 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

155 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

157 
	#BLKPG
 
	`_IO
(0x12,105)

	)

161 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

162 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

167 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

168 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

169 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

170 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

171 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

172 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

173 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

174 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

175 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

176 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

177 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

178 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

179 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

180 
	#BLKSECDISCARD
 
	`_IO
(0x12,125)

	)

181 
	#BLKROTATIONAL
 
	`_IO
(0x12,126)

	)

182 
	#BLKZEROOUT
 
	`_IO
(0x12,127)

	)

183 
	#BLKGETDISKSEQ
 
	`_IOR
(0x12,128,
__u64
)

	)

189 
	#BMAP_IOCTL
 1

	)

190 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

191 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

192 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

193 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

194 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

195 
	#FICLONE
 
	`_IOW
(0x94, 9, )

	)

196 
	#FICLONERANGE
 
	`_IOW
(0x94, 13, 
fûe_˛⁄e_ønge
)

	)

197 
	#FIDEDUPERANGE
 
	`_IOWR
(0x94, 54, 
fûe_dedu≥_ønge
)

	)

199 
	#FSLABEL_MAX
 256

	)

201 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

202 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

203 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

204 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

205 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

206 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

207 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

208 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

209 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

210 
	#FS_IOC_FSGETXATTR
 
	`_IOR
('X', 31, 
fsx©å
)

	)

211 
	#FS_IOC_FSSETXATTR
 
	`_IOW
('X', 32, 
fsx©å
)

	)

212 
	#FS_IOC_GETFSLABEL
 
	`_IOR
(0x94, 49, [
FSLABEL_MAX
])

	)

213 
	#FS_IOC_SETFSLABEL
 
	`_IOW
(0x94, 50, [
FSLABEL_MAX
])

	)

235 
	#FS_SECRM_FL
 0x00000001

	)

236 
	#FS_UNRM_FL
 0x00000002

	)

237 
	#FS_COMPR_FL
 0x00000004

	)

238 
	#FS_SYNC_FL
 0x00000008

	)

239 
	#FS_IMMUTABLE_FL
 0x00000010

	)

240 
	#FS_APPEND_FL
 0x00000020

	)

241 
	#FS_NODUMP_FL
 0x00000040

	)

242 
	#FS_NOATIME_FL
 0x00000080

	)

244 
	#FS_DIRTY_FL
 0x00000100

	)

245 
	#FS_COMPRBLK_FL
 0x00000200

	)

246 
	#FS_NOCOMP_FL
 0x00000400

	)

248 
	#FS_ENCRYPT_FL
 0x00000800

	)

249 
	#FS_BTREE_FL
 0x00001000

	)

250 
	#FS_INDEX_FL
 0x00001000

	)

251 
	#FS_IMAGIC_FL
 0x00002000

	)

252 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

253 
	#FS_NOTAIL_FL
 0x00008000

	)

254 
	#FS_DIRSYNC_FL
 0x00010000

	)

255 
	#FS_TOPDIR_FL
 0x00020000

	)

256 
	#FS_HUGE_FILE_FL
 0x00040000

	)

257 
	#FS_EXTENT_FL
 0x00080000

	)

258 
	#FS_VERITY_FL
 0x00100000

	)

259 
	#FS_EA_INODE_FL
 0x00200000

	)

260 
	#FS_EOFBLOCKS_FL
 0x00400000

	)

261 
	#FS_NOCOW_FL
 0x00800000

	)

262 
	#FS_DAX_FL
 0x02000000

	)

263 
	#FS_INLINE_DATA_FL
 0x10000000

	)

264 
	#FS_PROJINHERIT_FL
 0x20000000

	)

265 
	#FS_CASEFOLD_FL
 0x40000000

	)

266 
	#FS_RESERVED_FL
 0x80000000

	)

268 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

269 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

272 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

273 
	#SYNC_FILE_RANGE_WRITE
 2

	)

274 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

275 
	#SYNC_FILE_RANGE_WRITE_AND_WAIT
 (
SYNC_FILE_RANGE_WRITE
 | \

276 
SYNC_FILE_RANGE_WAIT_BEFORE
 | \

277 
SYNC_FILE_RANGE_WAIT_AFTER
)

	)

283 
	t__bôwi£
 
	t__kî√l_rwf_t
;

286 
	#RWF_HIPRI
 ((
__kî√l_rwf_t
)0x00000001)

	)

289 
	#RWF_DSYNC
 ((
__kî√l_rwf_t
)0x00000002)

	)

292 
	#RWF_SYNC
 ((
__kî√l_rwf_t
)0x00000004)

	)

295 
	#RWF_NOWAIT
 ((
__kî√l_rwf_t
)0x00000008)

	)

298 
	#RWF_APPEND
 ((
__kî√l_rwf_t
)0x00000010)

	)

301 
	#RWF_SUPPORTED
 (
RWF_HIPRI
 | 
RWF_DSYNC
 | 
RWF_SYNC
 | 
RWF_NOWAIT
 |\

302 
RWF_APPEND
)

	)

	@/usr/include/linux/magic.h

2 #i‚de‡
__LINUX_MAGIC_H__


3 
	#__LINUX_MAGIC_H__


	)

5 
	#ADFS_SUPER_MAGIC
 0xadf5

	)

6 
	#AFFS_SUPER_MAGIC
 0xadff

	)

7 
	#AFS_SUPER_MAGIC
 0x5346414F

	)

8 
	#AUTOFS_SUPER_MAGIC
 0x0187

	)

9 
	#CODA_SUPER_MAGIC
 0x73757245

	)

10 
	#CRAMFS_MAGIC
 0x28cd3d45

	)

11 
	#CRAMFS_MAGIC_WEND
 0x453dcd28

	)

12 
	#DEBUGFS_MAGIC
 0x64626720

	)

13 
	#SECURITYFS_MAGIC
 0x73636673

	)

14 
	#SELINUX_MAGIC
 0xf97cff8c

	)

15 
	#SMACK_MAGIC
 0x43415d53

	)

16 
	#RAMFS_MAGIC
 0x858458f6

	)

17 
	#TMPFS_MAGIC
 0x01021994

	)

18 
	#HUGETLBFS_MAGIC
 0x958458f6

	)

19 
	#SQUASHFS_MAGIC
 0x73717368

	)

20 
	#ECRYPTFS_SUPER_MAGIC
 0xf15f

	)

21 
	#EFS_SUPER_MAGIC
 0x414A53

	)

22 
	#EROFS_SUPER_MAGIC_V1
 0xE0F5E1E2

	)

23 
	#EXT2_SUPER_MAGIC
 0xEF53

	)

24 
	#EXT3_SUPER_MAGIC
 0xEF53

	)

25 
	#XENFS_SUPER_MAGIC
 0xabba1974

	)

26 
	#EXT4_SUPER_MAGIC
 0xEF53

	)

27 
	#BTRFS_SUPER_MAGIC
 0x9123683E

	)

28 
	#NILFS_SUPER_MAGIC
 0x3434

	)

29 
	#F2FS_SUPER_MAGIC
 0xF2F52010

	)

30 
	#HPFS_SUPER_MAGIC
 0xf995e849

	)

31 
	#ISOFS_SUPER_MAGIC
 0x9660

	)

32 
	#JFFS2_SUPER_MAGIC
 0x72b6

	)

33 
	#XFS_SUPER_MAGIC
 0x58465342

	)

34 
	#PSTOREFS_MAGIC
 0x6165676C

	)

35 
	#EFIVARFS_MAGIC
 0xde5e81e4

	)

36 
	#HOSTFS_SUPER_MAGIC
 0x00c0f„e

	)

37 
	#OVERLAYFS_SUPER_MAGIC
 0x794c7630

	)

39 
	#MINIX_SUPER_MAGIC
 0x137F

	)

40 
	#MINIX_SUPER_MAGIC2
 0x138F

	)

41 
	#MINIX2_SUPER_MAGIC
 0x2468

	)

42 
	#MINIX2_SUPER_MAGIC2
 0x2478

	)

43 
	#MINIX3_SUPER_MAGIC
 0x4d5®

	)

45 
	#MSDOS_SUPER_MAGIC
 0x4d44

	)

46 
	#NCP_SUPER_MAGIC
 0x564¯

	)

47 
	#NFS_SUPER_MAGIC
 0x6969

	)

48 
	#OCFS2_SUPER_MAGIC
 0x7461636f

	)

49 
	#OPENPROM_SUPER_MAGIC
 0x9Á1

	)

50 
	#QNX4_SUPER_MAGIC
 0x002‡

	)

51 
	#QNX6_SUPER_MAGIC
 0x68191122

	)

52 
	#AFS_FS_MAGIC
 0x6B414653

	)

54 
	#REISERFS_SUPER_MAGIC
 0x52654973

	)

57 
	#REISERFS_SUPER_MAGIC_STRING
 "ReIsErFs"

	)

58 
	#REISER2FS_SUPER_MAGIC_STRING
 "ReIsEr2Fs"

	)

59 
	#REISER2FS_JR_SUPER_MAGIC_STRING
 "ReIsEr3Fs"

	)

61 
	#SMB_SUPER_MAGIC
 0x517B

	)

62 
	#CGROUP_SUPER_MAGIC
 0x27e0eb

	)

63 
	#CGROUP2_SUPER_MAGIC
 0x63677270

	)

65 
	#RDTGROUP_SUPER_MAGIC
 0x7655821

	)

67 
	#STACK_END_MAGIC
 0x57AC6E9D

	)

69 
	#TRACEFS_MAGIC
 0x74726163

	)

71 
	#V9FS_MAGIC
 0x01021997

	)

73 
	#BDEVFS_MAGIC
 0x62646576

	)

74 
	#DAXFS_MAGIC
 0x64646178

	)

75 
	#BINFMTFS_MAGIC
 0x42494e4d

	)

76 
	#DEVPTS_SUPER_MAGIC
 0x1cd1

	)

77 
	#BINDERFS_SUPER_MAGIC
 0x6c6f6f70

	)

78 
	#FUTEXFS_SUPER_MAGIC
 0xBAD1DEA

	)

79 
	#PIPEFS_MAGIC
 0x50495045

	)

80 
	#PROC_SUPER_MAGIC
 0x9Á0

	)

81 
	#SOCKFS_MAGIC
 0x534F434B

	)

82 
	#SYSFS_MAGIC
 0x62656572

	)

83 
	#USBDEVICE_SUPER_MAGIC
 0x9Á2

	)

84 
	#MTD_INODE_FS_MAGIC
 0x11307854

	)

85 
	#ANON_INODE_FS_MAGIC
 0x09041934

	)

86 
	#BTRFS_TEST_MAGIC
 0x73727279

	)

87 
	#NSFS_MAGIC
 0x6e736673

	)

88 
	#BPF_FS_MAGIC
 0xˇ„4a11

	)

89 
	#AAFS_MAGIC
 0x5a3c69f0

	)

90 
	#ZONEFS_MAGIC
 0x5a4f4653

	)

93 
	#UDF_SUPER_MAGIC
 0x15013346

	)

94 
	#BALLOON_KVM_MAGIC
 0x13661366

	)

95 
	#ZSMALLOC_MAGIC
 0x58295829

	)

96 
	#DMA_BUF_MAGIC
 0x444d4142

	)

97 
	#DEVMEM_MAGIC
 0x454d444d

	)

98 
	#Z3FOLD_MAGIC
 0x33

	)

99 
	#PPC_CMM_MAGIC
 0xc7571590

	)

100 
	#SECRETMEM_MAGIC
 0x5345434d

	)

102 
	#SHIFTFS_MAGIC
 0x6a656a62

	)

	@/usr/include/linux/module.h

2 #i‚de‡
_LINUX_MODULE_H


3 
	#_LINUX_MODULE_H


	)

6 
	#MODULE_INIT_IGNORE_MODVERSIONS
 1

	)

7 
	#MODULE_INIT_IGNORE_VERMAGIC
 2

	)

	@/usr/include/linux/mount.h

1 #i‚de‡
_LINUX_MOUNT_H


2 
	#_LINUX_MOUNT_H


	)

4 
	~<löux/ty≥s.h
>

13 
	#MS_RDONLY
 1

	)

14 
	#MS_NOSUID
 2

	)

15 
	#MS_NODEV
 4

	)

16 
	#MS_NOEXEC
 8

	)

17 
	#MS_SYNCHRONOUS
 16

	)

18 
	#MS_REMOUNT
 32

	)

19 
	#MS_MANDLOCK
 64

	)

20 
	#MS_DIRSYNC
 128

	)

21 
	#MS_NOSYMFOLLOW
 256

	)

22 
	#MS_NOATIME
 1024

	)

23 
	#MS_NODIRATIME
 2048

	)

24 
	#MS_BIND
 4096

	)

25 
	#MS_MOVE
 8192

	)

26 
	#MS_REC
 16384

	)

27 
	#MS_VERBOSE
 32768

	)

29 
	#MS_SILENT
 32768

	)

30 
	#MS_POSIXACL
 (1<<16Ë

	)

31 
	#MS_UNBINDABLE
 (1<<17Ë

	)

32 
	#MS_PRIVATE
 (1<<18Ë

	)

33 
	#MS_SLAVE
 (1<<19Ë

	)

34 
	#MS_SHARED
 (1<<20Ë

	)

35 
	#MS_RELATIME
 (1<<21Ë

	)

36 
	#MS_KERNMOUNT
 (1<<22Ë

	)

37 
	#MS_I_VERSION
 (1<<23Ë

	)

38 
	#MS_STRICTATIME
 (1<<24Ë

	)

39 
	#MS_LAZYTIME
 (1<<25Ë

	)

42 
	#MS_SUBMOUNT
 (1<<26)

	)

43 
	#MS_NOREMOTELOCK
 (1<<27)

	)

44 
	#MS_NOSEC
 (1<<28)

	)

45 
	#MS_BORN
 (1<<29)

	)

46 
	#MS_ACTIVE
 (1<<30)

	)

47 
	#MS_NOUSER
 (1<<31)

	)

52 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
|\

53 
MS_LAZYTIME
)

	)

58 
	#MS_MGC_VAL
 0xC0ED0000

	)

59 
	#MS_MGC_MSK
 0xffff0000

	)

64 
	#OPEN_TREE_CLONE
 1

	)

65 
	#OPEN_TREE_CLOEXEC
 
O_CLOEXEC


	)

70 
	#MOVE_MOUNT_F_SYMLINKS
 0x00000001

	)

71 
	#MOVE_MOUNT_F_AUTOMOUNTS
 0x00000002

	)

72 
	#MOVE_MOUNT_F_EMPTY_PATH
 0x00000004

	)

73 
	#MOVE_MOUNT_T_SYMLINKS
 0x00000010

	)

74 
	#MOVE_MOUNT_T_AUTOMOUNTS
 0x00000020

	)

75 
	#MOVE_MOUNT_T_EMPTY_PATH
 0x00000040

	)

76 
	#MOVE_MOUNT_SET_GROUP
 0x00000100

	)

77 
	#MOVE_MOUNT__MASK
 0x00000177

	)

82 
	#FSOPEN_CLOEXEC
 0x00000001

	)

87 
	#FSPICK_CLOEXEC
 0x00000001

	)

88 
	#FSPICK_SYMLINK_NOFOLLOW
 0x00000002

	)

89 
	#FSPICK_NO_AUTOMOUNT
 0x00000004

	)

90 
	#FSPICK_EMPTY_PATH
 0x00000008

	)

95 
	efsc⁄fig_comm™d
 {

96 
	mFSCONFIG_SET_FLAG
 = 0,

97 
	mFSCONFIG_SET_STRING
 = 1,

98 
	mFSCONFIG_SET_BINARY
 = 2,

99 
	mFSCONFIG_SET_PATH
 = 3,

100 
	mFSCONFIG_SET_PATH_EMPTY
 = 4,

101 
	mFSCONFIG_SET_FD
 = 5,

102 
	mFSCONFIG_CMD_CREATE
 = 6,

103 
	mFSCONFIG_CMD_RECONFIGURE
 = 7,

109 
	#FSMOUNT_CLOEXEC
 0x00000001

	)

114 
	#MOUNT_ATTR_RDONLY
 0x00000001

	)

115 
	#MOUNT_ATTR_NOSUID
 0x00000002

	)

116 
	#MOUNT_ATTR_NODEV
 0x00000004

	)

117 
	#MOUNT_ATTR_NOEXEC
 0x00000008

	)

118 
	#MOUNT_ATTR__ATIME
 0x00000070

	)

119 
	#MOUNT_ATTR_RELATIME
 0x00000000

	)

120 
	#MOUNT_ATTR_NOATIME
 0x00000010

	)

121 
	#MOUNT_ATTR_STRICTATIME
 0x00000020

	)

122 
	#MOUNT_ATTR_NODIRATIME
 0x00000080

	)

123 
	#MOUNT_ATTR_IDMAP
 0x00100000

	)

124 
	#MOUNT_ATTR_NOSYMFOLLOW
 0x00200000

	)

129 
	smou¡_©å
 {

130 
__u64
 
	m©å_£t
;

131 
__u64
 
	m©å_˛r
;

132 
__u64
 
	m¥›ag©i⁄
;

133 
__u64
 
	mu£∫s_fd
;

137 
	#MOUNT_ATTR_SIZE_VER0
 32

	)

	@/usr/include/linux/random.h

8 #i‚de‡
_LINUX_RANDOM_H


9 
	#_LINUX_RANDOM_H


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/io˘l.h
>

13 
	~<löux/úqƒ.h
>

18 
	#RNDGETENTCNT
 
	`_IOR
–'R', 0x00, )

	)

21 
	#RNDADDTOENTCNT
 
	`_IOW
–'R', 0x01, )

	)

24 
	#RNDGETPOOL
 
	`_IOR
–'R', 0x02, [2] )

	)

30 
	#RNDADDENTROPY
 
	`_IOW
–'R', 0x03, [2] )

	)

33 
	#RNDZAPENTCNT
 
	`_IO
–'R', 0x04 )

	)

36 
	#RNDCLEARPOOL
 
	`_IO
–'R', 0x06 )

	)

39 
	#RNDRESEEDCRNG
 
	`_IO
–'R', 0x07 )

	)

41 
	sønd_poﬁ_öfo
 {

42 
	míå›y_cou¡
;

43 
	mbuf_size
;

44 
__u32
 
	mbuf
[0];

54 
	#GRND_NONBLOCK
 0x0001

	)

55 
	#GRND_RANDOM
 0x0002

	)

56 
	#GRND_INSECURE
 0x0004

	)

	@/usr/include/linux/sched.h

2 #i‚de‡
_LINUX_SCHED_H


3 
	#_LINUX_SCHED_H


	)

5 
	~<löux/ty≥s.h
>

10 
	#CSIGNAL
 0x000000f‡

	)

11 
	#CLONE_VM
 0x00000100

	)

12 
	#CLONE_FS
 0x00000200

	)

13 
	#CLONE_FILES
 0x00000400

	)

14 
	#CLONE_SIGHAND
 0x00000800

	)

15 
	#CLONE_PIDFD
 0x00001000

	)

16 
	#CLONE_PTRACE
 0x00002000

	)

17 
	#CLONE_VFORK
 0x00004000

	)

18 
	#CLONE_PARENT
 0x00008000

	)

19 
	#CLONE_THREAD
 0x00010000

	)

20 
	#CLONE_NEWNS
 0x00020000

	)

21 
	#CLONE_SYSVSEM
 0x00040000

	)

22 
	#CLONE_SETTLS
 0x00080000

	)

23 
	#CLONE_PARENT_SETTID
 0x00100000

	)

24 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

25 
	#CLONE_DETACHED
 0x00400000

	)

26 
	#CLONE_UNTRACED
 0x00800000

	)

27 
	#CLONE_CHILD_SETTID
 0x01000000

	)

28 
	#CLONE_NEWCGROUP
 0x02000000

	)

29 
	#CLONE_NEWUTS
 0x04000000

	)

30 
	#CLONE_NEWIPC
 0x08000000

	)

31 
	#CLONE_NEWUSER
 0x10000000

	)

32 
	#CLONE_NEWPID
 0x20000000

	)

33 
	#CLONE_NEWNET
 0x40000000

	)

34 
	#CLONE_IO
 0x80000000

	)

37 
	#CLONE_CLEAR_SIGHAND
 0x100000000ULL

	)

38 
	#CLONE_INTO_CGROUP
 0x200000000ULL

	)

44 
	#CLONE_NEWTIME
 0x00000080

	)

46 #i‚de‡
__ASSEMBLY__


92 
	s˛⁄e_¨gs
 {

93 
__Æig√d_u64
 
	mÊags
;

94 
__Æig√d_u64
 
	mpidfd
;

95 
__Æig√d_u64
 
	mchûd_tid
;

96 
__Æig√d_u64
 
	m∑ª¡_tid
;

97 
__Æig√d_u64
 
	mexô_sig«l
;

98 
__Æig√d_u64
 
	m°ack
;

99 
__Æig√d_u64
 
	m°ack_size
;

100 
__Æig√d_u64
 
	més
;

101 
__Æig√d_u64
 
	m£t_tid
;

102 
__Æig√d_u64
 
	m£t_tid_size
;

103 
__Æig√d_u64
 
	mcgroup
;

107 
	#CLONE_ARGS_SIZE_VER0
 64

	)

108 
	#CLONE_ARGS_SIZE_VER1
 80

	)

109 
	#CLONE_ARGS_SIZE_VER2
 88

	)

114 
	#SCHED_NORMAL
 0

	)

115 
	#SCHED_FIFO
 1

	)

116 
	#SCHED_RR
 2

	)

117 
	#SCHED_BATCH
 3

	)

119 
	#SCHED_IDLE
 5

	)

120 
	#SCHED_DEADLINE
 6

	)

123 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

128 
	#SCHED_FLAG_RESET_ON_FORK
 0x01

	)

129 
	#SCHED_FLAG_RECLAIM
 0x02

	)

130 
	#SCHED_FLAG_DL_OVERRUN
 0x04

	)

131 
	#SCHED_FLAG_KEEP_POLICY
 0x08

	)

132 
	#SCHED_FLAG_KEEP_PARAMS
 0x10

	)

133 
	#SCHED_FLAG_UTIL_CLAMP_MIN
 0x20

	)

134 
	#SCHED_FLAG_UTIL_CLAMP_MAX
 0x40

	)

136 
	#SCHED_FLAG_KEEP_ALL
 (
SCHED_FLAG_KEEP_POLICY
 | \

137 
SCHED_FLAG_KEEP_PARAMS
)

	)

139 
	#SCHED_FLAG_UTIL_CLAMP
 (
SCHED_FLAG_UTIL_CLAMP_MIN
 | \

140 
SCHED_FLAG_UTIL_CLAMP_MAX
)

	)

142 
	#SCHED_FLAG_ALL
 (
SCHED_FLAG_RESET_ON_FORK
 | \

143 
SCHED_FLAG_RECLAIM
 | \

144 
SCHED_FLAG_DL_OVERRUN
 | \

145 
SCHED_FLAG_KEEP_ALL
 | \

146 
SCHED_FLAG_UTIL_CLAMP
)

	)

	@/usr/include/linux/string.h

2 #i‚de‡
_LINUX_STRING_H_


3 
	#_LINUX_STRING_H_


	)

7 
	~<°rög.h
>

	@/usr/include/linux/time.h

2 #i‚de‡
_LINUX_TIME_H


3 
	#_LINUX_TIME_H


	)

5 
	~<löux/ty≥s.h
>

6 
	~<löux/time_ty≥s.h
>

8 #i‚de‡
_STRUCT_TIMESPEC


9 
	#_STRUCT_TIMESPEC


	)

10 
	stime•ec
 {

11 
__kî√l_ﬁd_time_t
 
	mtv_£c
;

12 
	mtv_n£c
;

16 
	stimevÆ
 {

17 
__kî√l_ﬁd_time_t
 
	mtv_£c
;

18 
__kî√l_su£c⁄ds_t
 
	mtv_u£c
;

21 
	sôimî•ec
 {

22 
time•ec
 
	mô_öãrvÆ
;

23 
time•ec
 
	mô_vÆue
;

26 
	sôimîvÆ
 {

27 
timevÆ
 
	mô_öãrvÆ
;

28 
timevÆ
 
	mô_vÆue
;

31 
	stimez⁄e
 {

32 
	mtz_möuãswe°
;

33 
	mtz_d°time
;

40 
	#ITIMER_REAL
 0

	)

41 
	#ITIMER_VIRTUAL
 1

	)

42 
	#ITIMER_PROF
 2

	)

47 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

49 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

50 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

51 
	#CLOCK_MONOTONIC_RAW
 4

	)

52 
	#CLOCK_REALTIME_COARSE
 5

	)

53 
	#CLOCK_MONOTONIC_COARSE
 6

	)

54 
	#CLOCK_BOOTTIME
 7

	)

55 
	#CLOCK_REALTIME_ALARM
 8

	)

56 
	#CLOCK_BOOTTIME_ALARM
 9

	)

61 
	#CLOCK_SGI_CYCLE
 10

	)

62 
	#CLOCK_TAI
 11

	)

64 
	#MAX_CLOCKS
 16

	)

65 
	#CLOCKS_MASK
 (
CLOCK_REALTIME
 | 
CLOCK_MONOTONIC
)

	)

66 
	#CLOCKS_MONO
 
CLOCK_MONOTONIC


	)

71 
	#TIMER_ABSTIME
 0x01

	)

	@/usr/include/linux/types.h

2 #i‚de‡
_LINUX_TYPES_H


3 
	#_LINUX_TYPES_H


	)

5 
	~<asm/ty≥s.h
>

7 #i‚de‡
__ASSEMBLY__


9 
	~<löux/posix_ty≥s.h
>

17 #ifde‡
__CHECKER__


18 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

20 
	#__bôwi£__


	)

22 
	#__bôwi£
 
__bôwi£__


	)

24 
__u16
 
	t__bôwi£
 
	t__À16
;

25 
__u16
 
	t__bôwi£
 
	t__be16
;

26 
__u32
 
	t__bôwi£
 
	t__À32
;

27 
__u32
 
	t__bôwi£
 
	t__be32
;

28 
__u64
 
	t__bôwi£
 
	t__À64
;

29 
__u64
 
	t__bôwi£
 
	t__be64
;

31 
__u16
 
	t__bôwi£
 
	t__sum16
;

32 
__u32
 
	t__bôwi£
 
	t__wsum
;

43 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

44 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

45 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	t__bôwi£
 
	t__pﬁl_t
;

	@/usr/include/linux/uio.h

10 #i‚de‡
__LINUX_UIO_H


11 
	#__LINUX_UIO_H


	)

14 
	~<löux/ty≥s.h
>

17 
	siovec


19 *
	miov_ba£
;

20 
__kî√l_size_t
 
	miov_Àn
;

27 
	#UIO_FASTIOV
 8

	)

28 
	#UIO_MAXIOV
 1024

	)

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 331687

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ ((cË> 255 ? 255 : (c)))

	)

3 
	#LINUX_VERSION_MAJOR
 5

	)

4 
	#LINUX_VERSION_PATCHLEVEL
 15

	)

5 
	#LINUX_VERSION_SUBLEVEL
 167

	)

	@/usr/include/linux/fscrypt.h

8 #i‚de‡
_LINUX_FSCRYPT_H


9 
	#_LINUX_FSCRYPT_H


	)

11 
	~<löux/io˘l.h
>

12 
	~<löux/ty≥s.h
>

15 
	#FSCRYPT_POLICY_FLAGS_PAD_4
 0x00

	)

16 
	#FSCRYPT_POLICY_FLAGS_PAD_8
 0x01

	)

17 
	#FSCRYPT_POLICY_FLAGS_PAD_16
 0x02

	)

18 
	#FSCRYPT_POLICY_FLAGS_PAD_32
 0x03

	)

19 
	#FSCRYPT_POLICY_FLAGS_PAD_MASK
 0x03

	)

20 
	#FSCRYPT_POLICY_FLAG_DIRECT_KEY
 0x04

	)

21 
	#FSCRYPT_POLICY_FLAG_IV_INO_LBLK_64
 0x08

	)

22 
	#FSCRYPT_POLICY_FLAG_IV_INO_LBLK_32
 0x10

	)

25 
	#FSCRYPT_MODE_AES_256_XTS
 1

	)

26 
	#FSCRYPT_MODE_AES_256_CTS
 4

	)

27 
	#FSCRYPT_MODE_AES_128_CBC
 5

	)

28 
	#FSCRYPT_MODE_AES_128_CTS
 6

	)

29 
	#FSCRYPT_MODE_ADIANTUM
 9

	)

38 
	#FSCRYPT_POLICY_V1
 0

	)

39 
	#FSCRYPT_KEY_DESCRIPTOR_SIZE
 8

	)

40 
	sfs¸y±_pﬁicy_v1
 {

41 
__u8
 
	mvîsi⁄
;

42 
__u8
 
	mc⁄ã¡s_í¸y±i⁄_mode
;

43 
__u8
 
	mfûíames_í¸y±i⁄_mode
;

44 
__u8
 
	mÊags
;

45 
__u8
 
	mma°î_key_des¸ùt‹
[
FSCRYPT_KEY_DESCRIPTOR_SIZE
];

52 
	#FSCRYPT_KEY_DESC_PREFIX
 "fs¸y±:"

	)

53 
	#FSCRYPT_KEY_DESC_PREFIX_SIZE
 8

	)

54 
	#FSCRYPT_MAX_KEY_SIZE
 64

	)

55 
	sfs¸y±_key
 {

56 
__u32
 
	mmode
;

57 
__u8
 
	møw
[
FSCRYPT_MAX_KEY_SIZE
];

58 
__u32
 
	msize
;

64 
	#FSCRYPT_POLICY_V2
 2

	)

65 
	#FSCRYPT_KEY_IDENTIFIER_SIZE
 16

	)

66 
	sfs¸y±_pﬁicy_v2
 {

67 
__u8
 
	mvîsi⁄
;

68 
__u8
 
	mc⁄ã¡s_í¸y±i⁄_mode
;

69 
__u8
 
	mfûíames_í¸y±i⁄_mode
;

70 
__u8
 
	mÊags
;

71 
__u8
 
	m__ª£rved
[4];

72 
__u8
 
	mma°î_key_idítifõr
[
FSCRYPT_KEY_IDENTIFIER_SIZE
];

76 
	sfs¸y±_gë_pﬁicy_ex_¨g
 {

77 
__u64
 
	mpﬁicy_size
;

79 
__u8
 
	mvîsi⁄
;

80 
fs¸y±_pﬁicy_v1
 
	mv1
;

81 
fs¸y±_pﬁicy_v2
 
	mv2
;

82 } 
	mpﬁicy
;

89 
	#FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR
 1

	)

96 
	#FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER
 2

	)

102 
	sfs¸y±_key_•ecifõr
 {

103 
__u32
 
	mty≥
;

104 
__u32
 
	m__ª£rved
;

106 
__u8
 
	m__ª£rved
[32];

107 
__u8
 
	mdes¸ùt‹
[
FSCRYPT_KEY_DESCRIPTOR_SIZE
];

108 
__u8
 
	midítifõr
[
FSCRYPT_KEY_IDENTIFIER_SIZE
];

109 } 
	mu
;

116 
	sfs¸y±_¥ovisi⁄ög_key_∑ylﬂd
 {

117 
__u32
 
	mty≥
;

118 
__u32
 
	m__ª£rved
;

119 
__u8
 
	møw
[];

123 
	sfs¸y±_add_key_¨g
 {

124 
fs¸y±_key_•ecifõr
 
	mkey_•ec
;

125 
__u32
 
	møw_size
;

126 
__u32
 
	mkey_id
;

127 
__u32
 
	m__ª£rved
[8];

128 
__u8
 
	møw
[];

132 
	sfs¸y±_ªmove_key_¨g
 {

133 
fs¸y±_key_•ecifõr
 
	mkey_•ec
;

134 
	#FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY
 0x00000001

	)

135 
	#FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS
 0x00000002

	)

136 
__u32
 
	mªmovÆ_°©us_Êags
;

137 
__u32
 
	m__ª£rved
[5];

141 
	sfs¸y±_gë_key_°©us_¨g
 {

143 
fs¸y±_key_•ecifõr
 
	mkey_•ec
;

144 
__u32
 
	m__ª£rved
[6];

147 
	#FSCRYPT_KEY_STATUS_ABSENT
 1

	)

148 
	#FSCRYPT_KEY_STATUS_PRESENT
 2

	)

149 
	#FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED
 3

	)

150 
__u32
 
	m°©us
;

151 
	#FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF
 0x00000001

	)

152 
__u32
 
	m°©us_Êags
;

153 
__u32
 
	mu£r_cou¡
;

154 
__u32
 
	m__out_ª£rved
[13];

157 
	#FS_IOC_SET_ENCRYPTION_POLICY
 
	`_IOR
('f', 19, 
fs¸y±_pﬁicy_v1
)

	)

158 
	#FS_IOC_GET_ENCRYPTION_PWSALT
 
	`_IOW
('f', 20, 
__u8
[16])

	)

159 
	#FS_IOC_GET_ENCRYPTION_POLICY
 
	`_IOW
('f', 21, 
fs¸y±_pﬁicy_v1
)

	)

160 
	#FS_IOC_GET_ENCRYPTION_POLICY_EX
 
	`_IOWR
('f', 22, 
__u8
[9]Ë

	)

161 
	#FS_IOC_ADD_ENCRYPTION_KEY
 
	`_IOWR
('f', 23, 
fs¸y±_add_key_¨g
)

	)

162 
	#FS_IOC_REMOVE_ENCRYPTION_KEY
 
	`_IOWR
('f', 24, 
fs¸y±_ªmove_key_¨g
)

	)

163 
	#FS_IOC_REMOVE_ENCRYPTION_KEY_ALL_USERS
 
	`_IOWR
('f', 25, 
fs¸y±_ªmove_key_¨g
)

	)

164 
	#FS_IOC_GET_ENCRYPTION_KEY_STATUS
 
	`_IOWR
('f', 26, 
fs¸y±_gë_key_°©us_¨g
)

	)

165 
	#FS_IOC_GET_ENCRYPTION_NONCE
 
	`_IOR
('f', 27, 
__u8
[16])

	)

170 
	#fs¸y±_pﬁicy
 
fs¸y±_pﬁicy_v1


	)

171 
	#FS_KEY_DESCRIPTOR_SIZE
 
FSCRYPT_KEY_DESCRIPTOR_SIZE


	)

172 
	#FS_POLICY_FLAGS_PAD_4
 
FSCRYPT_POLICY_FLAGS_PAD_4


	)

173 
	#FS_POLICY_FLAGS_PAD_8
 
FSCRYPT_POLICY_FLAGS_PAD_8


	)

174 
	#FS_POLICY_FLAGS_PAD_16
 
FSCRYPT_POLICY_FLAGS_PAD_16


	)

175 
	#FS_POLICY_FLAGS_PAD_32
 
FSCRYPT_POLICY_FLAGS_PAD_32


	)

176 
	#FS_POLICY_FLAGS_PAD_MASK
 
FSCRYPT_POLICY_FLAGS_PAD_MASK


	)

177 
	#FS_POLICY_FLAG_DIRECT_KEY
 
FSCRYPT_POLICY_FLAG_DIRECT_KEY


	)

178 
	#FS_POLICY_FLAGS_VALID
 0x07

	)

179 
	#FS_ENCRYPTION_MODE_INVALID
 0

	)

180 
	#FS_ENCRYPTION_MODE_AES_256_XTS
 
FSCRYPT_MODE_AES_256_XTS


	)

181 
	#FS_ENCRYPTION_MODE_AES_256_GCM
 2

	)

182 
	#FS_ENCRYPTION_MODE_AES_256_CBC
 3

	)

183 
	#FS_ENCRYPTION_MODE_AES_256_CTS
 
FSCRYPT_MODE_AES_256_CTS


	)

184 
	#FS_ENCRYPTION_MODE_AES_128_CBC
 
FSCRYPT_MODE_AES_128_CBC


	)

185 
	#FS_ENCRYPTION_MODE_AES_128_CTS
 
FSCRYPT_MODE_AES_128_CTS


	)

186 
	#FS_ENCRYPTION_MODE_SPECK128_256_XTS
 7

	)

187 
	#FS_ENCRYPTION_MODE_SPECK128_256_CTS
 8

	)

188 
	#FS_ENCRYPTION_MODE_ADIANTUM
 
FSCRYPT_MODE_ADIANTUM


	)

189 
	#FS_KEY_DESC_PREFIX
 
FSCRYPT_KEY_DESC_PREFIX


	)

190 
	#FS_KEY_DESC_PREFIX_SIZE
 
FSCRYPT_KEY_DESC_PREFIX_SIZE


	)

191 
	#FS_MAX_KEY_SIZE
 
FSCRYPT_MAX_KEY_SIZE


	)

	@/usr/include/linux/ioctl.h

2 #i‚de‡
_LINUX_IOCTL_H


3 
	#_LINUX_IOCTL_H


	)

5 
	~<asm/io˘l.h
>

	@/usr/include/linux/irqnr.h

	@/usr/include/linux/limits.h

2 #i‚de‡
_LINUX_LIMITS_H


3 
	#_LINUX_LIMITS_H


	)

5 
	#NR_OPEN
 1024

	)

7 
	#NGROUPS_MAX
 65536

	)

8 
	#ARG_MAX
 131072

	)

9 
	#LINK_MAX
 127

	)

10 
	#MAX_CANON
 255

	)

11 
	#MAX_INPUT
 255

	)

12 
	#NAME_MAX
 255

	)

13 
	#PATH_MAX
 4096

	)

14 
	#PIPE_BUF
 4096

	)

15 
	#XATTR_NAME_MAX
 255

	)

16 
	#XATTR_SIZE_MAX
 65536

	)

17 
	#XATTR_LIST_MAX
 65536

	)

19 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/posix_types.h

2 #i‚de‡
_LINUX_POSIX_TYPES_H


3 
	#_LINUX_POSIX_TYPES_H


	)

5 
	~<löux/°ddef.h
>

22 #unde‡
__FD_SETSIZE


23 
	#__FD_SETSIZE
 1024

	)

26 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

27 } 
	t__kî√l_fd_£t
;

30 (*
	t__kî√l_sigh™dÀr_t
)();

33 
	t__kî√l_key_t
;

34 
	t__kî√l_mqd_t
;

36 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/time_types.h

2 #i‚de‡
_LINUX_TIME_TYPES_H


3 
	#_LINUX_TIME_TYPES_H


	)

5 
	~<löux/ty≥s.h
>

7 
	s__kî√l_time•ec
 {

8 
__kî√l_time64_t
 
	mtv_£c
;

9 
	mtv_n£c
;

12 
	s__kî√l_ôimî•ec
 {

13 
__kî√l_time•ec
 
	mô_öãrvÆ
;

14 
__kî√l_time•ec
 
	mô_vÆue
;

24 #i‚de‡
__kî√l_ﬁd_timevÆ


25 
	s__kî√l_ﬁd_timevÆ
 {

26 
__kî√l_l⁄g_t
 
	mtv_£c
;

27 
__kî√l_l⁄g_t
 
	mtv_u£c
;

31 
	s__kî√l_ﬁd_time•ec
 {

32 
__kî√l_ﬁd_time_t
 
	mtv_£c
;

33 
	mtv_n£c
;

36 
	s__kî√l_ﬁd_ôimîvÆ
 {

37 
__kî√l_ﬁd_timevÆ
 
	mô_öãrvÆ
;

38 
__kî√l_ﬁd_timevÆ
 
	mô_vÆue
;

41 
	s__kî√l_sock_timevÆ
 {

42 
__s64
 
	mtv_£c
;

43 
__s64
 
	mtv_u£c
;

	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC2X
)

54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 4));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

80 
	$__memcm≥q
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

81 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

84 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


87 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

88 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

89 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

90 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

92 #ifde‡
__OPTIMIZE__


93 
__exã∫_Æways_ölöe
 *

94 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


96  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

99 
__exã∫_Æways_ölöe
 const *

100 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


102  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

105 
	}
}

107 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__USE_GNU


114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

116 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

118 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

125 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


126 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

127 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

128 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

129 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

130 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

131 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

133 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

134 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

135 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

141 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

145 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

146 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

149 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

150 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

153 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

156 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

157 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

159 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

160 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

163 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

164 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

166 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

167 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

168 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

170 #ifde‡
__USE_XOPEN2K8


172 
	~<bôs/ty≥s/loˇÀ_t.h
>

175 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

176 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

179 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

180 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4))

181 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

184 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

185 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| 
	$__GLIBC_USE
 (
ISOC2X
))

187 *
	$°rdup
 (c⁄° *
__s
)

188 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

194 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| __GLIBC_USE (
ISOC2X
)

195 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

196 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

199 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


201 
	#°rdu∑
(
s
) \

202 (
__exãnsi⁄__
 \

204 c⁄° *
__ﬁd
 = (
s
); \

205 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

206 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 
	}
}))

	)

211 
	#°∫du∑
(
s
, 
n
) \

212 (
__exãnsi⁄__
 \

214 c⁄° *
__ﬁd
 = (
s
); \

215 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

216 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

217 
__√w
[
__Àn
] = '\0'; \

218 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

219 }))

	)

223 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


226 *
°rchr
 (*
__s
, 
__c
)

227 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

228 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

229 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

231 #ifde‡
__OPTIMIZE__


232 
__exã∫_Æways_ölöe
 *

233 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


235  
__buûtö_°rchr
 (
__s
, 
__c
);

238 
__exã∫_Æways_ölöe
 const *

239 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


241  
__buûtö_°rchr
 (
__s
, 
__c
);

246 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

247 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

250 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


253 *
	`°ºchr
 (*
__s
, 
__c
)

254 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

255 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

256 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

258 #ifde‡
__OPTIMIZE__


259 
__exã∫_Æways_ölöe
 *

260 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


262  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

265 
__exã∫_Æways_ölöe
 const *

266 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


268  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

271 
	}
}

273 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 #ifde‡
__USE_GNU


280 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


281 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

282 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

283 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

284 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

286 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

293 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

294 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


303 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

304 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

305 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

306 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

308 #ifde‡
__OPTIMIZE__


309 
__exã∫_Æways_ölöe
 *

310 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


312  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

315 
__exã∫_Æways_ölöe
 const *

316 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


318  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

321 
	}
}

323 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

324 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


330 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

331 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

332 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

333 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 #ifde‡
__OPTIMIZE__


336 
__exã∫_Æways_ölöe
 *

337 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


339  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

342 
__exã∫_Æways_ölöe
 const *

343 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


345  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

348 
	}
}

350 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

351 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

356 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

362 c⁄° *
__ª°ri˘
 
__dñim
,

363 **
__ª°ri˘
 
__ßve_±r
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

365 #ifde‡
__USE_POSIX


366 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

367 **
__ª°ri˘
 
__ßve_±r
)

368 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

371 #ifde‡
__USE_GNU


373 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


374 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

375 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

376 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

377 c⁄° *
__√edÀ
)

378 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

380 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

385 #ifde‡
__USE_GNU


389 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

390 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3))

392 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2))

393 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 3, 4));

397 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

398 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

400 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

401 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

402 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

407 
size_t
 
	$°æí
 (c⁄° *
__s
)

408 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

410 #ifdef 
__USE_XOPEN2K8


413 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

414 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

419 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

420 #ifde‡
__USE_XOPEN2K


428 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


431 #ifde‡
__REDIRECT_NTH


432 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

433 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

434 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2))

435 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

437 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

439 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

444 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

445 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

448 #ifde‡
__USE_GNU


450 c⁄° *
	$°ªº‹desc_≈
 (
__îr
Ë
__THROW
;

452 c⁄° *
	$°ªº‹«me_≈
 (
__îr
Ë
__THROW
;

456 #ifde‡
__USE_XOPEN2K8


458 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

461 #ifde‡
__USE_MISC


462 
	~<°rögs.h
>

466 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

467 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

471 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

472 c⁄° *
__ª°ri˘
 
__dñim
)

473 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

476 #ifdef 
__USE_XOPEN2K8


478 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

480 #ifde‡
__USE_GNU


482 c⁄° *
	$sigabbªv_≈
 (
__sig
Ë
__THROW
;

485 c⁄° *
	$sigdes¸_≈
 (
__sig
Ë
__THROW
;

489 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

490 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

491 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

492 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

496 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

497 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

498 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

499 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

500 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

501 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

504 #ifdef 
__USE_GNU


506 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

507 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

510 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

513 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

514 
	`__©å_ac˚ss
 ((
__ªad_wrôe__
, 1, 2));

516 #i‚de‡
ba£«me


521 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


522 "C++" *
	$ba£«me
 (*
__fûíame
)

523 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

524 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

525 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

527 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

532 #i‡
	`__GNUC_PREREQ
 (3,4)

533 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


535 
	~<bôs/°rög_f‹tifõd.h
>

539 
__END_DECLS


	@/usr/include/linux/stddef.h

2 #i‚de‡
_LINUX_STDDEF_H


3 
	#_LINUX_STDDEF_H


	)

7 #i‚de‡
__Æways_ölöe


8 
	#__Æways_ölöe
 
__ölöe__


	)

26 
	#__°ru˘_group
(
TAG
, 
NAME
, 
ATTRS
, 
MEMBERS
...) \

28 °ru˘ { 
MEMBERS
 } 
ATTRS
; \

29 
	sTAG
 { 
MEMBERS
 } 
ATTRS
 
NAME
; \

30 } 
ATTRS


	)

42 
	#__DECLARE_FLEX_ARRAY
(
TYPE
, 
NAME
) \

44 °ru˘ { } 
__em±y_
 ## 
NAME
; \

45 
TYPE
 
NAME
[]; \

46 }

	)

	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

126 #unde‡
__USE_ISOC11


127 #unde‡
__USE_ISOC99


128 #unde‡
__USE_ISOC95


129 #unde‡
__USE_ISOCXX11


130 #unde‡
__USE_POSIX


131 #unde‡
__USE_POSIX2


132 #unde‡
__USE_POSIX199309


133 #unde‡
__USE_POSIX199506


134 #unde‡
__USE_XOPEN


135 #unde‡
__USE_XOPEN_EXTENDED


136 #unde‡
__USE_UNIX98


137 #unde‡
__USE_XOPEN2K


138 #unde‡
__USE_XOPEN2KXSI


139 #unde‡
__USE_XOPEN2K8


140 #unde‡
__USE_XOPEN2K8XSI


141 #unde‡
__USE_LARGEFILE


142 #unde‡
__USE_LARGEFILE64


143 #unde‡
__USE_FILE_OFFSET64


144 #unde‡
__USE_MISC


145 #unde‡
__USE_ATFILE


146 #unde‡
__USE_DYNAMIC_STACK_SIZE


147 #unde‡
__USE_GNU


148 #unde‡
__USE_FORTIFY_LEVEL


149 #unde‡
__KERNEL_STRICT_NAMES


150 #unde‡
__GLIBC_USE_ISOC2X


151 #unde‡
__GLIBC_USE_DEPRECATED_GETS


152 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


156 #i‚de‡
_LOOSE_KERNEL_NAMES


157 
	#__KERNEL_STRICT_NAMES


	)

167 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


168 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

169 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

171 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

178 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


179 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

180 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

182 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

186 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

192 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

193 && !
deföed
 
	g_DEFAULT_SOURCE


195 #unde‡
_DEFAULT_SOURCE


196 
	#_DEFAULT_SOURCE
 1

	)

200 #ifde‡
_GNU_SOURCE


201 #unde‡
_ISOC95_SOURCE


202 
	#_ISOC95_SOURCE
 1

	)

203 #unde‡
_ISOC99_SOURCE


204 
	#_ISOC99_SOURCE
 1

	)

205 #unde‡
_ISOC11_SOURCE


206 
	#_ISOC11_SOURCE
 1

	)

207 #unde‡
_ISOC2X_SOURCE


208 
	#_ISOC2X_SOURCE
 1

	)

209 #unde‡
_POSIX_SOURCE


210 
	#_POSIX_SOURCE
 1

	)

211 #unde‡
_POSIX_C_SOURCE


212 
	#_POSIX_C_SOURCE
 200809L

	)

213 #unde‡
_XOPEN_SOURCE


214 
	#_XOPEN_SOURCE
 700

	)

215 #unde‡
_XOPEN_SOURCE_EXTENDED


216 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

217 #unde‡
_LARGEFILE64_SOURCE


218 
	#_LARGEFILE64_SOURCE
 1

	)

219 #unde‡
_DEFAULT_SOURCE


220 
	#_DEFAULT_SOURCE
 1

	)

221 #unde‡
_ATFILE_SOURCE


222 
	#_ATFILE_SOURCE
 1

	)

223 #unde‡
_DYNAMIC_STACK_SIZE_SOURCE


224 
	#_DYNAMIC_STACK_SIZE_SOURCE
 1

	)

229 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

230 || (!
deföed
 
	g__STRICT_ANSI__
 \

231 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

232 && !
deföed
 
	g_ISOC2X_SOURCE
 \

233 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

234 && !
deföed
 
	g_XOPEN_SOURCE
))

235 #unde‡
_DEFAULT_SOURCE


236 
	#_DEFAULT_SOURCE
 1

	)

240 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

241 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

242 
	#__GLIBC_USE_ISOC2X
 1

	)

244 
	#__GLIBC_USE_ISOC2X
 0

	)

248 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

249 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

250 
	#__USE_ISOC11
 1

	)

254 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

255 || 
deföed
 
_ISOC2X_SOURCE
 \

256 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

257 
	#__USE_ISOC99
 1

	)

261 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

262 || 
deföed
 
_ISOC2X_SOURCE
 \

263 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

264 
	#__USE_ISOC95
 1

	)

267 #ifde‡
__˝lu•lus


269 #i‡
__˝lu•lus
 >= 201703L

270 
	#__USE_ISOC11
 1

	)

274 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


275 
	#__USE_ISOCXX11
 1

	)

276 
	#__USE_ISOC99
 1

	)

283 #ifde‡
_DEFAULT_SOURCE


284 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


285 
	#__USE_POSIX_IMPLICITLY
 1

	)

287 #unde‡
_POSIX_SOURCE


288 
	#_POSIX_SOURCE
 1

	)

289 #unde‡
_POSIX_C_SOURCE


290 
	#_POSIX_C_SOURCE
 200809L

	)

293 #i‡((!
deföed
 
__STRICT_ANSI__
 \

294 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

295 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

296 
	#_POSIX_SOURCE
 1

	)

297 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

298 
	#_POSIX_C_SOURCE
 2

	)

299 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

300 
	#_POSIX_C_SOURCE
 199506L

	)

301 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

302 
	#_POSIX_C_SOURCE
 200112L

	)

304 
	#_POSIX_C_SOURCE
 200809L

	)

306 
	#__USE_POSIX_IMPLICITLY
 1

	)

315 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

316 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

317 
	#_POSIX_SOURCE
 1

	)

318 #unde‡
_POSIX_C_SOURCE


319 
	#_POSIX_C_SOURCE
 199506L

	)

322 #i‡(
deföed
 
_POSIX_SOURCE
 \

323 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

324 || 
deföed
 
_XOPEN_SOURCE
)

325 
	#__USE_POSIX
 1

	)

328 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


329 
	#__USE_POSIX2
 1

	)

332 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

333 
	#__USE_POSIX199309
 1

	)

336 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

337 
	#__USE_POSIX199506
 1

	)

340 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

341 
	#__USE_XOPEN2K
 1

	)

342 #unde‡
__USE_ISOC95


343 
	#__USE_ISOC95
 1

	)

344 #unde‡
__USE_ISOC99


345 
	#__USE_ISOC99
 1

	)

348 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

349 
	#__USE_XOPEN2K8
 1

	)

350 #unde‡
_ATFILE_SOURCE


351 
	#_ATFILE_SOURCE
 1

	)

354 #ifdef 
_XOPEN_SOURCE


355 
	#__USE_XOPEN
 1

	)

356 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

357 
	#__USE_XOPEN_EXTENDED
 1

	)

358 
	#__USE_UNIX98
 1

	)

359 #unde‡
_LARGEFILE_SOURCE


360 
	#_LARGEFILE_SOURCE
 1

	)

361 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

362 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

363 
	#__USE_XOPEN2K8
 1

	)

364 
	#__USE_XOPEN2K8XSI
 1

	)

366 
	#__USE_XOPEN2K
 1

	)

367 
	#__USE_XOPEN2KXSI
 1

	)

368 #unde‡
__USE_ISOC95


369 
	#__USE_ISOC95
 1

	)

370 #unde‡
__USE_ISOC99


371 
	#__USE_ISOC99
 1

	)

374 #ifde‡
_XOPEN_SOURCE_EXTENDED


375 
	#__USE_XOPEN_EXTENDED
 1

	)

380 #ifde‡
_LARGEFILE_SOURCE


381 
	#__USE_LARGEFILE
 1

	)

384 #ifde‡
_LARGEFILE64_SOURCE


385 
	#__USE_LARGEFILE64
 1

	)

388 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

389 
	#__USE_FILE_OFFSET64
 1

	)

392 
	~<„©uªs-time64.h
>

394 #i‡
deföed
 
_DEFAULT_SOURCE


395 
	#__USE_MISC
 1

	)

398 #ifdef 
_ATFILE_SOURCE


399 
	#__USE_ATFILE
 1

	)

402 #ifdef 
_DYNAMIC_STACK_SIZE_SOURCE


403 
	#__USE_DYNAMIC_STACK_SIZE
 1

	)

406 #ifdef 
_GNU_SOURCE


407 
	#__USE_GNU
 1

	)

410 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

411 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

412 #ñi‡!
__GNUC_PREREQ
 (4, 1)

413 #ñi‡
_FORTIFY_SOURCE
 > 2 && (
__glibc_˛™g_¥îeq
 (9, 0) \

414 || 
	$__GNUC_PREREQ
 (12, 0))

416 #i‡
_FORTIFY_SOURCE
 > 3

418 
	#__USE_FORTIFY_LEVEL
 3

	)

419 #ñi‡
_FORTIFY_SOURCE
 > 1

420 #i‡
_FORTIFY_SOURCE
 > 2

422 
	#__USE_FORTIFY_LEVEL
 2

	)

424 
	#__USE_FORTIFY_LEVEL
 1

	)

427 #i‚de‡
__USE_FORTIFY_LEVEL


428 
	#__USE_FORTIFY_LEVEL
 0

	)

435 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


436 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

438 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

453 #i‡(
deföed
 
__USE_GNU
 \

454 && (
deföed
 
__˝lu•lus
 \

455 ? (
__˝lu•lus
 < 201103L && !
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
) \

456 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

457 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

459 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

464 
	~<°dc-¥edef.h
>

472 #unde‡
__GNU_LIBRARY__


473 
	#__GNU_LIBRARY__
 6

	)

477 
	#__GLIBC__
 2

	)

478 
	#__GLIBC_MINOR__
 35

	)

480 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

481 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

484 #i‚de‡
__ASSEMBLER__


485 #i‚de‡
_SYS_CDEFS_H


486 
	~<sys/cdefs.h
>

491 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


492 
	#__USE_LARGEFILE
 1

	)

493 
	#__USE_LARGEFILE64
 1

	)

499 #i‡
	`__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

500 && !
deföed
 
__OPTIMIZE_SIZE__
 && !deföed 
__NO_INLINE__
 \

501 && 
deföed
 
__exã∫_ölöe


502 
	#__USE_EXTERN_INLINES
 1

	)

510 
	~<gnu/°ubs.h
>

	@/usr/include/features-time64.h

20 
	~<bôs/w‹dsize.h
>

21 
	~<bôs/timesize.h
>

23 #i‡
deföed
 
_TIME_BITS


24 #i‡
_TIME_BITS
 == 64

25 #i‡! 
deföed
 (
_FILE_OFFSET_BITS
) || _FILE_OFFSET_BITS != 64

27 #ñi‡
__TIMESIZE
 == 32

28 
	#__USE_TIME_BITS64
 1

	)

30 #ñi‡
_TIME_BITS
 == 32

31 #i‡
__TIMESIZE
 > 32

35 #îr‹ 
InvÆid
 
_TIME_BITS
 
vÆue
 (
ˇn
 
⁄ly
 
be
 32 
‹
 64-
bô
)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

39 
	#__STDC_IEC_60559_BFP__
 201404L

	)

42 
	#__STDC_IEC_559__
 1

	)

43 
	#__STDC_IEC_60559_BFP__
 201404L

	)

46 #ifde‡
__GCC_IEC_559_COMPLEX


47 #i‡
__GCC_IEC_559_COMPLEX
 > 0

48 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

52 
	#__STDC_IEC_559_COMPLEX__
 1

	)

53 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

62 
	#__STDC_ISO_10646__
 201706L

	)

	@
1
.
1
/usr/include
45
868
balloc.c
bbuild.c
dir.c
file.c
inode.c
ioctl.c
journal.c
journal.h
namei.c
pmfs.h
pmfs.mod.c
pmfs_def.h
pmfs_stats.c
pmfs_test.c
super.c
symlink.c
wprotect.c
wprotect.h
xip.c
xip.h
/usr/include/linux/capability.h
/usr/include/linux/falloc.h
/usr/include/linux/fs.h
/usr/include/linux/magic.h
/usr/include/linux/module.h
/usr/include/linux/mount.h
/usr/include/linux/random.h
/usr/include/linux/sched.h
/usr/include/linux/string.h
/usr/include/linux/time.h
/usr/include/linux/types.h
/usr/include/linux/uio.h
/usr/include/linux/version.h
/usr/include/linux/fscrypt.h
/usr/include/linux/ioctl.h
/usr/include/linux/irqnr.h
/usr/include/linux/limits.h
/usr/include/linux/posix_types.h
/usr/include/linux/time_types.h
/usr/include/string.h
/usr/include/linux/stddef.h
/usr/include/strings.h
/usr/include/features.h
/usr/include/features-time64.h
/usr/include/stdc-predef.h
